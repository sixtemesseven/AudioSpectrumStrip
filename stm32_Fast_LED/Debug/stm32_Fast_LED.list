
stm32_Fast_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08004618  08004618  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004618  08004618  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08004620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de8  2000017c  0800479c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001f64  0800479c  00021f64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db1a  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f0c  00000000  00000000  0003dcbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011779  00000000  00000000  00041bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00053348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001460  00000000  00000000  00054440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa5b  00000000  00000000  000558a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a22a  00000000  00000000  000702fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f475  00000000  00000000  0008a525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011999a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bcc  00000000  00000000  001199f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800458c 	.word	0x0800458c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800458c 	.word	0x0800458c

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2400      	movs	r4, #0
 8000152:	940d      	str	r4, [sp, #52]	; 0x34
 8000154:	940f      	str	r4, [sp, #60]	; 0x3c
 8000156:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000158:	9405      	str	r4, [sp, #20]
 800015a:	9406      	str	r4, [sp, #24]
 800015c:	9407      	str	r4, [sp, #28]
 800015e:	9408      	str	r4, [sp, #32]
 8000160:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000162:	9401      	str	r4, [sp, #4]
 8000164:	9402      	str	r4, [sp, #8]
 8000166:	9403      	str	r4, [sp, #12]
 8000168:	9404      	str	r4, [sp, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800016a:	2501      	movs	r5, #1
 800016c:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800016e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000172:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000174:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000176:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000178:	2602      	movs	r6, #2
 800017a:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800017c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800017e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000182:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000184:	a80a      	add	r0, sp, #40	; 0x28
 8000186:	f001 fc23 	bl	80019d0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800018a:	230f      	movs	r3, #15
 800018c:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800018e:	9606      	str	r6, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000190:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000196:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000198:	9409      	str	r4, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800019a:	4629      	mov	r1, r5
 800019c:	a805      	add	r0, sp, #20
 800019e:	f001 fe63 	bl	8001e68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001a2:	2310      	movs	r3, #16
 80001a4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80001a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80001aa:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ac:	a801      	add	r0, sp, #4
 80001ae:	f001 ff33 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80001b2:	b014      	add	sp, #80	; 0x50
 80001b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080001b8 <main>:
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 80001bc:	f000 fa26 	bl	800060c <HAL_Init>
  SystemClock_Config();
 80001c0:	f7ff ffc4 	bl	800014c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	2400      	movs	r4, #0
 80001c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80001c8:	940c      	str	r4, [sp, #48]	; 0x30
 80001ca:	940d      	str	r4, [sp, #52]	; 0x34
 80001cc:	940e      	str	r4, [sp, #56]	; 0x38

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ce:	4d5d      	ldr	r5, [pc, #372]	; (8000344 <main+0x18c>)
 80001d0:	69ab      	ldr	r3, [r5, #24]
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	61ab      	str	r3, [r5, #24]
 80001d8:	69ab      	ldr	r3, [r5, #24]
 80001da:	f003 0320 	and.w	r3, r3, #32
 80001de:	9302      	str	r3, [sp, #8]
 80001e0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e2:	69ab      	ldr	r3, [r5, #24]
 80001e4:	f043 0308 	orr.w	r3, r3, #8
 80001e8:	61ab      	str	r3, [r5, #24]
 80001ea:	69ab      	ldr	r3, [r5, #24]
 80001ec:	f003 0308 	and.w	r3, r3, #8
 80001f0:	9303      	str	r3, [sp, #12]
 80001f2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	69ab      	ldr	r3, [r5, #24]
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	61ab      	str	r3, [r5, #24]
 80001fc:	69ab      	ldr	r3, [r5, #24]
 80001fe:	f003 0304 	and.w	r3, r3, #4
 8000202:	9304      	str	r3, [sp, #16]
 8000204:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000206:	4e50      	ldr	r6, [pc, #320]	; (8000348 <main+0x190>)
 8000208:	4622      	mov	r2, r4
 800020a:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 800020e:	4630      	mov	r0, r6
 8000210:	f000 fc6e 	bl	8000af0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021a:	4630      	mov	r0, r6
 800021c:	f000 fc68 	bl	8000af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000224:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000226:	2701      	movs	r7, #1
 8000228:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	a90b      	add	r1, sp, #44	; 0x2c
 8000232:	4630      	mov	r0, r6
 8000234:	f000 fb4c 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000240:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	a90b      	add	r1, sp, #44	; 0x2c
 8000244:	4841      	ldr	r0, [pc, #260]	; (800034c <main+0x194>)
 8000246:	f000 fb43 	bl	80008d0 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 800024a:	4841      	ldr	r0, [pc, #260]	; (8000350 <main+0x198>)
 800024c:	4b41      	ldr	r3, [pc, #260]	; (8000354 <main+0x19c>)
 800024e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000250:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000254:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000256:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000258:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800025a:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800025c:	260c      	movs	r6, #12
 800025e:	6146      	str	r6, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000260:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000262:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000264:	f002 fa42 	bl	80026ec <HAL_UART_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000268:	696b      	ldr	r3, [r5, #20]
 800026a:	433b      	orrs	r3, r7
 800026c:	616b      	str	r3, [r5, #20]
 800026e:	696b      	ldr	r3, [r5, #20]
 8000270:	403b      	ands	r3, r7
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000276:	4622      	mov	r2, r4
 8000278:	4621      	mov	r1, r4
 800027a:	4630      	mov	r0, r6
 800027c:	f000 f9fc 	bl	8000678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000280:	4630      	mov	r0, r6
 8000282:	f000 fa2b 	bl	80006dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000286:	4622      	mov	r2, r4
 8000288:	4621      	mov	r1, r4
 800028a:	200f      	movs	r0, #15
 800028c:	f000 f9f4 	bl	8000678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000290:	200f      	movs	r0, #15
 8000292:	f000 fa23 	bl	80006dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000296:	4622      	mov	r2, r4
 8000298:	4621      	mov	r1, r4
 800029a:	2011      	movs	r0, #17
 800029c:	f000 f9ec 	bl	8000678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002a0:	2011      	movs	r0, #17
 80002a2:	f000 fa1b 	bl	80006dc <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a6:	9407      	str	r4, [sp, #28]
 80002a8:	9408      	str	r4, [sp, #32]
 80002aa:	9409      	str	r4, [sp, #36]	; 0x24
 80002ac:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ae:	9405      	str	r4, [sp, #20]
 80002b0:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80002b4:	940c      	str	r4, [sp, #48]	; 0x30
 80002b6:	940d      	str	r4, [sp, #52]	; 0x34
 80002b8:	940e      	str	r4, [sp, #56]	; 0x38
 80002ba:	940f      	str	r4, [sp, #60]	; 0x3c
 80002bc:	9410      	str	r4, [sp, #64]	; 0x40
 80002be:	9411      	str	r4, [sp, #68]	; 0x44
  htim2.Instance = TIM2;
 80002c0:	4d25      	ldr	r5, [pc, #148]	; (8000358 <main+0x1a0>)
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c6:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 0;
 80002c8:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ca:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 80002cc:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ce:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d2:	4628      	mov	r0, r5
 80002d4:	f001 fff6 	bl	80022c4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002dc:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002de:	a907      	add	r1, sp, #28
 80002e0:	4628      	mov	r0, r5
 80002e2:	f002 f8e8 	bl	80024b6 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002e6:	4628      	mov	r0, r5
 80002e8:	f002 f818 	bl	800231c <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ec:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ee:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002f0:	a905      	add	r1, sp, #20
 80002f2:	4628      	mov	r0, r5
 80002f4:	f002 f982 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002f8:	2360      	movs	r3, #96	; 0x60
 80002fa:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80002fc:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002fe:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000300:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000302:	4622      	mov	r2, r4
 8000304:	a90b      	add	r1, sp, #44	; 0x2c
 8000306:	4628      	mov	r0, r5
 8000308:	f002 f862 	bl	80023d0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800030c:	2204      	movs	r2, #4
 800030e:	a90b      	add	r1, sp, #44	; 0x2c
 8000310:	4628      	mov	r0, r5
 8000312:	f002 f85d 	bl	80023d0 <HAL_TIM_PWM_ConfigChannel>
  MX_USB_DEVICE_Init();
 8000316:	f003 fee7 	bl	80040e8 <MX_USB_DEVICE_Init>
	  uint8_t buf[5] = {"hi\n"};
 800031a:	4d10      	ldr	r5, [pc, #64]	; (800035c <main+0x1a4>)
	  if(dataInBuffer > 0)
 800031c:	4c10      	ldr	r4, [pc, #64]	; (8000360 <main+0x1a8>)
		  CDC_Transmit_FS(buffer, dataInBuffer);
 800031e:	4e11      	ldr	r6, [pc, #68]	; (8000364 <main+0x1ac>)
 8000320:	e004      	b.n	800032c <main+0x174>
 8000322:	4630      	mov	r0, r6
 8000324:	f003 ff4e 	bl	80041c4 <CDC_Transmit_FS>
		  dataInBuffer = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	6023      	str	r3, [r4, #0]
	  uint8_t buf[5] = {"hi\n"};
 800032c:	950b      	str	r5, [sp, #44]	; 0x2c
 800032e:	2300      	movs	r3, #0
 8000330:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	  CDC_Transmit_FS(buf, 5);
 8000334:	2105      	movs	r1, #5
 8000336:	a80b      	add	r0, sp, #44	; 0x2c
 8000338:	f003 ff44 	bl	80041c4 <CDC_Transmit_FS>
	  if(dataInBuffer > 0)
 800033c:	6821      	ldr	r1, [r4, #0]
 800033e:	2900      	cmp	r1, #0
 8000340:	d0f4      	beq.n	800032c <main+0x174>
 8000342:	e7ee      	b.n	8000322 <main+0x16a>
 8000344:	40021000 	.word	0x40021000
 8000348:	40010c00 	.word	0x40010c00
 800034c:	40010800 	.word	0x40010800
 8000350:	200004cc 	.word	0x200004cc
 8000354:	40013800 	.word	0x40013800
 8000358:	2000050c 	.word	0x2000050c
 800035c:	000a6968 	.word	0x000a6968
 8000360:	200001d8 	.word	0x200001d8
 8000364:	20000198 	.word	0x20000198

08000368 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000368:	4770      	bx	lr
	...

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <HAL_MspInit+0x3c>)
 8000370:	699a      	ldr	r2, [r3, #24]
 8000372:	f042 0201 	orr.w	r2, r2, #1
 8000376:	619a      	str	r2, [r3, #24]
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	f002 0201 	and.w	r2, r2, #1
 800037e:	9200      	str	r2, [sp, #0]
 8000380:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	69da      	ldr	r2, [r3, #28]
 8000384:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000388:	61da      	str	r2, [r3, #28]
 800038a:	69db      	ldr	r3, [r3, #28]
 800038c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000394:	4a05      	ldr	r2, [pc, #20]	; (80003ac <HAL_MspInit+0x40>)
 8000396:	6853      	ldr	r3, [r2, #4]
 8000398:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	b002      	add	sp, #8
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40010000 	.word	0x40010000

080003b0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80003b0:	6803      	ldr	r3, [r0, #0]
 80003b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003b6:	d000      	beq.n	80003ba <HAL_TIM_Base_MspInit+0xa>
 80003b8:	4770      	bx	lr
{
 80003ba:	b510      	push	{r4, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80003c4:	69da      	ldr	r2, [r3, #28]
 80003c6:	f042 0201 	orr.w	r2, r2, #1
 80003ca:	61da      	str	r2, [r3, #28]
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	9b01      	ldr	r3, [sp, #4]
  
    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 80003d6:	482c      	ldr	r0, [pc, #176]	; (8000488 <HAL_TIM_Base_MspInit+0xd8>)
 80003d8:	4b2c      	ldr	r3, [pc, #176]	; (800048c <HAL_TIM_Base_MspInit+0xdc>)
 80003da:	6003      	str	r3, [r0, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80003dc:	2310      	movs	r3, #16
 80003de:	6043      	str	r3, [r0, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	6083      	str	r3, [r0, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 80003e4:	60c3      	str	r3, [r0, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ea:	6103      	str	r3, [r0, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f0:	6143      	str	r3, [r0, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80003f2:	2320      	movs	r3, #32
 80003f4:	6183      	str	r3, [r0, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80003f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80003fa:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80003fc:	f000 f992 	bl	8000724 <HAL_DMA_Init>
 8000400:	2800      	cmp	r0, #0
 8000402:	d137      	bne.n	8000474 <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <HAL_TIM_Base_MspInit+0xd8>)
 8000406:	6223      	str	r3, [r4, #32]
 8000408:	625c      	str	r4, [r3, #36]	; 0x24

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800040a:	4821      	ldr	r0, [pc, #132]	; (8000490 <HAL_TIM_Base_MspInit+0xe0>)
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <HAL_TIM_Base_MspInit+0xe4>)
 800040e:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000410:	2310      	movs	r3, #16
 8000412:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8000418:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800041a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800041e:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000424:	6143      	str	r3, [r0, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000426:	2320      	movs	r3, #32
 8000428:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800042a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800042e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000430:	f000 f978 	bl	8000724 <HAL_DMA_Init>
 8000434:	bb08      	cbnz	r0, 800047a <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <HAL_TIM_Base_MspInit+0xe0>)
 8000438:	6263      	str	r3, [r4, #36]	; 0x24
 800043a:	625c      	str	r4, [r3, #36]	; 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800043c:	4816      	ldr	r0, [pc, #88]	; (8000498 <HAL_TIM_Base_MspInit+0xe8>)
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <HAL_TIM_Base_MspInit+0xec>)
 8000440:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000442:	2310      	movs	r3, #16
 8000444:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 800044a:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800044c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000450:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000456:	6143      	str	r3, [r0, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000458:	2320      	movs	r3, #32
 800045a:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800045c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000460:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000462:	f000 f95f 	bl	8000724 <HAL_DMA_Init>
 8000466:	b958      	cbnz	r0, 8000480 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <HAL_TIM_Base_MspInit+0xe8>)
 800046a:	62a3      	str	r3, [r4, #40]	; 0x28
 800046c:	625c      	str	r4, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800046e:	6323      	str	r3, [r4, #48]	; 0x30
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000470:	b002      	add	sp, #8
 8000472:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000474:	f7ff ff78 	bl	8000368 <Error_Handler>
 8000478:	e7c4      	b.n	8000404 <HAL_TIM_Base_MspInit+0x54>
      Error_Handler();
 800047a:	f7ff ff75 	bl	8000368 <Error_Handler>
 800047e:	e7da      	b.n	8000436 <HAL_TIM_Base_MspInit+0x86>
      Error_Handler();
 8000480:	f7ff ff72 	bl	8000368 <Error_Handler>
 8000484:	e7f0      	b.n	8000468 <HAL_TIM_Base_MspInit+0xb8>
 8000486:	bf00      	nop
 8000488:	20000444 	.word	0x20000444
 800048c:	4002001c 	.word	0x4002001c
 8000490:	20000400 	.word	0x20000400
 8000494:	40020058 	.word	0x40020058
 8000498:	20000488 	.word	0x20000488
 800049c:	40020080 	.word	0x40020080

080004a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a0:	b510      	push	{r4, lr}
 80004a2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2300      	movs	r3, #0
 80004a6:	9302      	str	r3, [sp, #8]
 80004a8:	9303      	str	r3, [sp, #12]
 80004aa:	9304      	str	r3, [sp, #16]
 80004ac:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 80004ae:	6802      	ldr	r2, [r0, #0]
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <HAL_UART_MspInit+0x70>)
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d001      	beq.n	80004ba <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004b6:	b006      	add	sp, #24
 80004b8:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ba:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80004be:	699a      	ldr	r2, [r3, #24]
 80004c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	f042 0204 	orr.w	r2, r2, #4
 80004d6:	619a      	str	r2, [r3, #24]
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	4c08      	ldr	r4, [pc, #32]	; (8000514 <HAL_UART_MspInit+0x74>)
 80004f2:	a902      	add	r1, sp, #8
 80004f4:	4620      	mov	r0, r4
 80004f6:	f000 f9eb 	bl	80008d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	a902      	add	r1, sp, #8
 8000508:	4620      	mov	r0, r4
 800050a:	f000 f9e1 	bl	80008d0 <HAL_GPIO_Init>
}
 800050e:	e7d2      	b.n	80004b6 <HAL_UART_MspInit+0x16>
 8000510:	40013800 	.word	0x40013800
 8000514:	40010800 	.word	0x40010800

08000518 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000518:	4770      	bx	lr

0800051a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <HardFault_Handler>

0800051c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler>

0800051e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler>

08000520 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <UsageFault_Handler>

08000522 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000524:	4770      	bx	lr

08000526 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	4770      	bx	lr

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052a:	f000 f881 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052e:	bd08      	pop	{r3, pc}

08000530 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000530:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000532:	4802      	ldr	r0, [pc, #8]	; (800053c <DMA1_Channel2_IRQHandler+0xc>)
 8000534:	f000 f92c 	bl	8000790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000538:	bd08      	pop	{r3, pc}
 800053a:	bf00      	nop
 800053c:	20000444 	.word	0x20000444

08000540 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <DMA1_Channel5_IRQHandler+0xc>)
 8000544:	f000 f924 	bl	8000790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000548:	bd08      	pop	{r3, pc}
 800054a:	bf00      	nop
 800054c:	20000400 	.word	0x20000400

08000550 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000550:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <DMA1_Channel7_IRQHandler+0xc>)
 8000554:	f000 f91c 	bl	8000790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000558:	bd08      	pop	{r3, pc}
 800055a:	bf00      	nop
 800055c:	20000488 	.word	0x20000488

08000560 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000562:	4802      	ldr	r0, [pc, #8]	; (800056c <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8000564:	f000 fb78 	bl	8000c58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000568:	bd08      	pop	{r3, pc}
 800056a:	bf00      	nop
 800056c:	20001c78 	.word	0x20001c78

08000570 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000570:	4770      	bx	lr
	...

08000574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000574:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000586:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800059a:	f7ff ffe9 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059e:	f003 ffbb 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fe09 	bl	80001b8 <main>
  bx lr
 80005a6:	4770      	bx	lr
  ldr r3, =_sidata
 80005a8:	08004620 	.word	0x08004620
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005b0:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80005b4:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80005b8:	20001f64 	.word	0x20001f64

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b510      	push	{r4, lr}
 80005c2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
 80005c6:	7818      	ldrb	r0, [r3, #0]
 80005c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <HAL_InitTick+0x44>)
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f88e 	bl	80006f8 <HAL_SYSTICK_Config>
 80005dc:	b968      	cbnz	r0, 80005fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005de:	2c0f      	cmp	r4, #15
 80005e0:	d901      	bls.n	80005e6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005e2:	2001      	movs	r0, #1
 80005e4:	e00a      	b.n	80005fc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e6:	2200      	movs	r2, #0
 80005e8:	4621      	mov	r1, r4
 80005ea:	f04f 30ff 	mov.w	r0, #4294967295
 80005ee:	f000 f843 	bl	8000678 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_InitTick+0x48>)
 80005f4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80005f6:	2000      	movs	r0, #0
 80005f8:	e000      	b.n	80005fc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005fa:	2001      	movs	r0, #1
}
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	bf00      	nop
 8000600:	20000004 	.word	0x20000004
 8000604:	20000000 	.word	0x20000000
 8000608:	20000008 	.word	0x20000008

0800060c <HAL_Init>:
{
 800060c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_Init+0x20>)
 8000610:	6813      	ldr	r3, [r2, #0]
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f81b 	bl	8000654 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ffce 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000624:	f7ff fea2 	bl	800036c <HAL_MspInit>
}
 8000628:	2000      	movs	r0, #0
 800062a:	bd08      	pop	{r3, pc}
 800062c:	40022000 	.word	0x40022000

08000630 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x10>)
 8000632:	6811      	ldr	r1, [r2, #0]
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_IncTick+0x14>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	440b      	add	r3, r1
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000fe0 	.word	0x20000fe0
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_GetTick+0x8>)
 800064a:	6818      	ldr	r0, [r3, #0]
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000fe0 	.word	0x20000fe0

08000654 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4907      	ldr	r1, [pc, #28]	; (8000674 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000656:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000658:	0203      	lsls	r3, r0, #8
 800065a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000662:	0412      	lsls	r2, r2, #16
 8000664:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000670:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000678:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <HAL_NVIC_SetPriority+0x5c>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000682:	f1c3 0407 	rsb	r4, r3, #7
 8000686:	2c04      	cmp	r4, #4
 8000688:	bf28      	it	cs
 800068a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068c:	1d1d      	adds	r5, r3, #4
 800068e:	2d06      	cmp	r5, #6
 8000690:	bf8c      	ite	hi
 8000692:	3b03      	subhi	r3, #3
 8000694:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	f04f 35ff 	mov.w	r5, #4294967295
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	ea21 0104 	bic.w	r1, r1, r4
 80006a2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	fa05 f303 	lsl.w	r3, r5, r3
 80006a8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80006ae:	2800      	cmp	r0, #0
 80006b0:	db09      	blt.n	80006c6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	0109      	lsls	r1, r1, #4
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006ba:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006be:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006c2:	bc30      	pop	{r4, r5}
 80006c4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	f000 000f 	and.w	r0, r0, #15
 80006ca:	0109      	lsls	r1, r1, #4
 80006cc:	b2c9      	uxtb	r1, r1
 80006ce:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <HAL_NVIC_SetPriority+0x60>)
 80006d0:	5419      	strb	r1, [r3, r0]
 80006d2:	e7f6      	b.n	80006c2 <HAL_NVIC_SetPriority+0x4a>
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	e000ed14 	.word	0xe000ed14

080006dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006dc:	2800      	cmp	r0, #0
 80006de:	db08      	blt.n	80006f2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e0:	0942      	lsrs	r2, r0, #5
 80006e2:	f000 001f 	and.w	r0, r0, #31
 80006e6:	2301      	movs	r3, #1
 80006e8:	fa03 f000 	lsl.w	r0, r3, r0
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <HAL_NVIC_EnableIRQ+0x18>)
 80006ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	3801      	subs	r0, #1
 80006fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fe:	d20a      	bcs.n	8000716 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_SYSTICK_Config+0x24>)
 8000702:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SYSTICK_Config+0x28>)
 8000706:	21f0      	movs	r1, #240	; 0xf0
 8000708:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	2000      	movs	r0, #0
 800070e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000710:	2207      	movs	r2, #7
 8000712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000714:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000716:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e010 	.word	0xe000e010
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000724:	b360      	cbz	r0, 8000780 <HAL_DMA_Init+0x5c>
{
 8000726:	b410      	push	{r4}
 8000728:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800072a:	6801      	ldr	r1, [r0, #0]
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_DMA_Init+0x60>)
 800072e:	440b      	add	r3, r1
 8000730:	4815      	ldr	r0, [pc, #84]	; (8000788 <HAL_DMA_Init+0x64>)
 8000732:	fba0 0303 	umull	r0, r3, r0, r3
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_DMA_Init+0x68>)
 800073e:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000740:	2302      	movs	r3, #2
 8000742:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000746:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000748:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 800074c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000750:	6853      	ldr	r3, [r2, #4]
 8000752:	6894      	ldr	r4, [r2, #8]
 8000754:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000756:	68d4      	ldr	r4, [r2, #12]
 8000758:	4323      	orrs	r3, r4
 800075a:	6914      	ldr	r4, [r2, #16]
 800075c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800075e:	6954      	ldr	r4, [r2, #20]
 8000760:	4323      	orrs	r3, r4
 8000762:	6994      	ldr	r4, [r2, #24]
 8000764:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000766:	69d4      	ldr	r4, [r2, #28]
 8000768:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800076a:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800076c:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800076e:	2000      	movs	r0, #0
 8000770:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000772:	2301      	movs	r3, #1
 8000774:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000778:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 800077c:	bc10      	pop	{r4}
 800077e:	4770      	bx	lr
    return HAL_ERROR;
 8000780:	2001      	movs	r0, #1
}
 8000782:	4770      	bx	lr
 8000784:	bffdfff8 	.word	0xbffdfff8
 8000788:	cccccccd 	.word	0xcccccccd
 800078c:	40020000 	.word	0x40020000

08000790 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000790:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000792:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000794:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000796:	6804      	ldr	r4, [r0, #0]
 8000798:	6825      	ldr	r5, [r4, #0]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800079a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800079c:	2304      	movs	r3, #4
 800079e:	408b      	lsls	r3, r1
 80007a0:	4213      	tst	r3, r2
 80007a2:	d034      	beq.n	800080e <HAL_DMA_IRQHandler+0x7e>
 80007a4:	f015 0f04 	tst.w	r5, #4
 80007a8:	d031      	beq.n	800080e <HAL_DMA_IRQHandler+0x7e>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	f013 0f20 	tst.w	r3, #32
 80007b0:	d103      	bne.n	80007ba <HAL_DMA_IRQHandler+0x2a>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	f023 0304 	bic.w	r3, r3, #4
 80007b8:	6023      	str	r3, [r4, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007ba:	6803      	ldr	r3, [r0, #0]
 80007bc:	4a42      	ldr	r2, [pc, #264]	; (80008c8 <HAL_DMA_IRQHandler+0x138>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d013      	beq.n	80007ea <HAL_DMA_IRQHandler+0x5a>
 80007c2:	3214      	adds	r2, #20
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d017      	beq.n	80007f8 <HAL_DMA_IRQHandler+0x68>
 80007c8:	3214      	adds	r2, #20
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d016      	beq.n	80007fc <HAL_DMA_IRQHandler+0x6c>
 80007ce:	3214      	adds	r2, #20
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d016      	beq.n	8000802 <HAL_DMA_IRQHandler+0x72>
 80007d4:	3214      	adds	r2, #20
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d016      	beq.n	8000808 <HAL_DMA_IRQHandler+0x78>
 80007da:	3214      	adds	r2, #20
 80007dc:	4293      	cmp	r3, r2
 80007de:	bf0c      	ite	eq
 80007e0:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80007e4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80007e8:	e000      	b.n	80007ec <HAL_DMA_IRQHandler+0x5c>
 80007ea:	2304      	movs	r3, #4
 80007ec:	4a37      	ldr	r2, [pc, #220]	; (80008cc <HAL_DMA_IRQHandler+0x13c>)
 80007ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80007f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007f2:	b103      	cbz	r3, 80007f6 <HAL_DMA_IRQHandler+0x66>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80007f4:	4798      	blx	r3
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80007f6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	e7f7      	b.n	80007ec <HAL_DMA_IRQHandler+0x5c>
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	e7f4      	b.n	80007ec <HAL_DMA_IRQHandler+0x5c>
 8000802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000806:	e7f1      	b.n	80007ec <HAL_DMA_IRQHandler+0x5c>
 8000808:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800080c:	e7ee      	b.n	80007ec <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800080e:	2302      	movs	r3, #2
 8000810:	408b      	lsls	r3, r1
 8000812:	4213      	tst	r3, r2
 8000814:	d03b      	beq.n	800088e <HAL_DMA_IRQHandler+0xfe>
 8000816:	f015 0f02 	tst.w	r5, #2
 800081a:	d038      	beq.n	800088e <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	f013 0f20 	tst.w	r3, #32
 8000822:	d106      	bne.n	8000832 <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	f023 030a 	bic.w	r3, r3, #10
 800082a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800082c:	2301      	movs	r3, #1
 800082e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000832:	6803      	ldr	r3, [r0, #0]
 8000834:	4a24      	ldr	r2, [pc, #144]	; (80008c8 <HAL_DMA_IRQHandler+0x138>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d013      	beq.n	8000862 <HAL_DMA_IRQHandler+0xd2>
 800083a:	3214      	adds	r2, #20
 800083c:	4293      	cmp	r3, r2
 800083e:	d01b      	beq.n	8000878 <HAL_DMA_IRQHandler+0xe8>
 8000840:	3214      	adds	r2, #20
 8000842:	4293      	cmp	r3, r2
 8000844:	d01a      	beq.n	800087c <HAL_DMA_IRQHandler+0xec>
 8000846:	3214      	adds	r2, #20
 8000848:	4293      	cmp	r3, r2
 800084a:	d01a      	beq.n	8000882 <HAL_DMA_IRQHandler+0xf2>
 800084c:	3214      	adds	r2, #20
 800084e:	4293      	cmp	r3, r2
 8000850:	d01a      	beq.n	8000888 <HAL_DMA_IRQHandler+0xf8>
 8000852:	3214      	adds	r2, #20
 8000854:	4293      	cmp	r3, r2
 8000856:	bf0c      	ite	eq
 8000858:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800085c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000860:	e000      	b.n	8000864 <HAL_DMA_IRQHandler+0xd4>
 8000862:	2302      	movs	r3, #2
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_DMA_IRQHandler+0x13c>)
 8000866:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000868:	2300      	movs	r3, #0
 800086a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800086e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0c0      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8000874:	4798      	blx	r3
 8000876:	e7be      	b.n	80007f6 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000878:	2320      	movs	r3, #32
 800087a:	e7f3      	b.n	8000864 <HAL_DMA_IRQHandler+0xd4>
 800087c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000880:	e7f0      	b.n	8000864 <HAL_DMA_IRQHandler+0xd4>
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	e7ed      	b.n	8000864 <HAL_DMA_IRQHandler+0xd4>
 8000888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800088c:	e7ea      	b.n	8000864 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800088e:	2308      	movs	r3, #8
 8000890:	fa03 f101 	lsl.w	r1, r3, r1
 8000894:	4211      	tst	r1, r2
 8000896:	d0ae      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x66>
 8000898:	f015 0f08 	tst.w	r5, #8
 800089c:	d0ab      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800089e:	6823      	ldr	r3, [r4, #0]
 80008a0:	f023 030e 	bic.w	r3, r3, #14
 80008a4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80008a8:	2301      	movs	r3, #1
 80008aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80008ac:	fa03 f202 	lsl.w	r2, r3, r2
 80008b0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80008b2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80008b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80008b8:	2300      	movs	r3, #0
 80008ba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80008be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d098      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80008c4:	4798      	blx	r3
  return;
 80008c6:	e796      	b.n	80007f6 <HAL_DMA_IRQHandler+0x66>
 80008c8:	40020008 	.word	0x40020008
 80008cc:	40020000 	.word	0x40020000

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d4:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d6:	680f      	ldr	r7, [r1, #0]
 80008d8:	2f00      	cmp	r7, #0
 80008da:	f000 80f8 	beq.w	8000ace <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 80008de:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80008e0:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000ae4 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008e6:	4d7b      	ldr	r5, [pc, #492]	; (8000ad4 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 80008e8:	4e7b      	ldr	r6, [pc, #492]	; (8000ad8 <HAL_GPIO_Init+0x208>)
 80008ea:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000ae8 <HAL_GPIO_Init+0x218>
 80008ee:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000aec <HAL_GPIO_Init+0x21c>
 80008f2:	e09a      	b.n	8000a2a <HAL_GPIO_Init+0x15a>
 80008f4:	2200      	movs	r2, #0
 80008f6:	e01e      	b.n	8000936 <HAL_GPIO_Init+0x66>
 80008f8:	42b4      	cmp	r4, r6
 80008fa:	d00c      	beq.n	8000916 <HAL_GPIO_Init+0x46>
 80008fc:	d904      	bls.n	8000908 <HAL_GPIO_Init+0x38>
 80008fe:	4574      	cmp	r4, lr
 8000900:	d009      	beq.n	8000916 <HAL_GPIO_Init+0x46>
 8000902:	4544      	cmp	r4, r8
 8000904:	d007      	beq.n	8000916 <HAL_GPIO_Init+0x46>
 8000906:	e016      	b.n	8000936 <HAL_GPIO_Init+0x66>
 8000908:	4f74      	ldr	r7, [pc, #464]	; (8000adc <HAL_GPIO_Init+0x20c>)
 800090a:	42bc      	cmp	r4, r7
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x46>
 800090e:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000912:	42bc      	cmp	r4, r7
 8000914:	d10b      	bne.n	800092e <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000916:	688a      	ldr	r2, [r1, #8]
 8000918:	2a00      	cmp	r2, #0
 800091a:	f000 80ca 	beq.w	8000ab2 <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800091e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000920:	bf0c      	ite	eq
 8000922:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000926:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092a:	2208      	movs	r2, #8
 800092c:	e003      	b.n	8000936 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 800092e:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000932:	42bc      	cmp	r4, r7
 8000934:	d0ef      	beq.n	8000916 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000936:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800093a:	f200 80bc 	bhi.w	8000ab6 <HAL_GPIO_Init+0x1e6>
 800093e:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000940:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000944:	683c      	ldr	r4, [r7, #0]
 8000946:	f04f 0b0f 	mov.w	fp, #15
 800094a:	fa0b fb09 	lsl.w	fp, fp, r9
 800094e:	ea24 040b 	bic.w	r4, r4, fp
 8000952:	fa02 f909 	lsl.w	r9, r2, r9
 8000956:	ea44 0409 	orr.w	r4, r4, r9
 800095a:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095c:	684c      	ldr	r4, [r1, #4]
 800095e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000962:	d05d      	beq.n	8000a20 <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000964:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000968:	f044 0401 	orr.w	r4, r4, #1
 800096c:	f8cc 4018 	str.w	r4, [ip, #24]
 8000970:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000974:	f004 0401 	and.w	r4, r4, #1
 8000978:	9401      	str	r4, [sp, #4]
 800097a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800097c:	f023 0403 	bic.w	r4, r3, #3
 8000980:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000984:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000988:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800098c:	f003 0703 	and.w	r7, r3, #3
 8000990:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000994:	270f      	movs	r7, #15
 8000996:	fa07 f70b 	lsl.w	r7, r7, fp
 800099a:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800099e:	4f50      	ldr	r7, [pc, #320]	; (8000ae0 <HAL_GPIO_Init+0x210>)
 80009a0:	42b8      	cmp	r0, r7
 80009a2:	f000 808e 	beq.w	8000ac2 <HAL_GPIO_Init+0x1f2>
 80009a6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009aa:	42b8      	cmp	r0, r7
 80009ac:	f000 808b 	beq.w	8000ac6 <HAL_GPIO_Init+0x1f6>
 80009b0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009b4:	42b8      	cmp	r0, r7
 80009b6:	f000 8088 	beq.w	8000aca <HAL_GPIO_Init+0x1fa>
 80009ba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009be:	42b8      	cmp	r0, r7
 80009c0:	bf0c      	ite	eq
 80009c2:	2703      	moveq	r7, #3
 80009c4:	2704      	movne	r7, #4
 80009c6:	fa07 f70b 	lsl.w	r7, r7, fp
 80009ca:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80009ce:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009d0:	684c      	ldr	r4, [r1, #4]
 80009d2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80009d6:	682c      	ldr	r4, [r5, #0]
 80009d8:	bf14      	ite	ne
 80009da:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009de:	ea24 040a 	biceq.w	r4, r4, sl
 80009e2:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e4:	684c      	ldr	r4, [r1, #4]
 80009e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80009ea:	686c      	ldr	r4, [r5, #4]
 80009ec:	bf14      	ite	ne
 80009ee:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009f2:	ea24 040a 	biceq.w	r4, r4, sl
 80009f6:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f8:	684c      	ldr	r4, [r1, #4]
 80009fa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80009fe:	68ac      	ldr	r4, [r5, #8]
 8000a00:	bf14      	ite	ne
 8000a02:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a06:	ea24 040a 	biceq.w	r4, r4, sl
 8000a0a:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a0c:	684c      	ldr	r4, [r1, #4]
 8000a0e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a12:	68ec      	ldr	r4, [r5, #12]
 8000a14:	bf14      	ite	ne
 8000a16:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a1a:	ea24 040a 	biceq.w	r4, r4, sl
 8000a1e:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000a20:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a22:	680f      	ldr	r7, [r1, #0]
 8000a24:	fa37 f403 	lsrs.w	r4, r7, r3
 8000a28:	d051      	beq.n	8000ace <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000a2a:	f04f 0901 	mov.w	r9, #1
 8000a2e:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000a36:	ea39 0407 	bics.w	r4, r9, r7
 8000a3a:	d1f1      	bne.n	8000a20 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000a3c:	684c      	ldr	r4, [r1, #4]
 8000a3e:	2c12      	cmp	r4, #18
 8000a40:	f63f af5a 	bhi.w	80008f8 <HAL_GPIO_Init+0x28>
 8000a44:	2c12      	cmp	r4, #18
 8000a46:	f63f af76 	bhi.w	8000936 <HAL_GPIO_Init+0x66>
 8000a4a:	a701      	add	r7, pc, #4	; (adr r7, 8000a50 <HAL_GPIO_Init+0x180>)
 8000a4c:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000a50:	08000917 	.word	0x08000917
 8000a54:	08000a9d 	.word	0x08000a9d
 8000a58:	08000aa7 	.word	0x08000aa7
 8000a5c:	080008f5 	.word	0x080008f5
 8000a60:	08000937 	.word	0x08000937
 8000a64:	08000937 	.word	0x08000937
 8000a68:	08000937 	.word	0x08000937
 8000a6c:	08000937 	.word	0x08000937
 8000a70:	08000937 	.word	0x08000937
 8000a74:	08000937 	.word	0x08000937
 8000a78:	08000937 	.word	0x08000937
 8000a7c:	08000937 	.word	0x08000937
 8000a80:	08000937 	.word	0x08000937
 8000a84:	08000937 	.word	0x08000937
 8000a88:	08000937 	.word	0x08000937
 8000a8c:	08000937 	.word	0x08000937
 8000a90:	08000937 	.word	0x08000937
 8000a94:	08000aa1 	.word	0x08000aa1
 8000a98:	08000aad 	.word	0x08000aad
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a9c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000a9e:	e74a      	b.n	8000936 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa0:	68ca      	ldr	r2, [r1, #12]
 8000aa2:	3204      	adds	r2, #4
          break;
 8000aa4:	e747      	b.n	8000936 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa6:	68ca      	ldr	r2, [r1, #12]
 8000aa8:	3208      	adds	r2, #8
          break;
 8000aaa:	e744      	b.n	8000936 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aac:	68ca      	ldr	r2, [r1, #12]
 8000aae:	320c      	adds	r2, #12
          break;
 8000ab0:	e741      	b.n	8000936 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	e73f      	b.n	8000936 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab6:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab8:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000abc:	f1a9 0920 	sub.w	r9, r9, #32
 8000ac0:	e740      	b.n	8000944 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac2:	2700      	movs	r7, #0
 8000ac4:	e77f      	b.n	80009c6 <HAL_GPIO_Init+0xf6>
 8000ac6:	2701      	movs	r7, #1
 8000ac8:	e77d      	b.n	80009c6 <HAL_GPIO_Init+0xf6>
 8000aca:	2702      	movs	r7, #2
 8000acc:	e77b      	b.n	80009c6 <HAL_GPIO_Init+0xf6>
  }
}
 8000ace:	b003      	add	sp, #12
 8000ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ad4:	40010400 	.word	0x40010400
 8000ad8:	10220000 	.word	0x10220000
 8000adc:	10120000 	.word	0x10120000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	10310000 	.word	0x10310000
 8000aec:	10320000 	.word	0x10320000

08000af0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af0:	b10a      	cbz	r2, 8000af6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000af2:	6101      	str	r1, [r0, #16]
 8000af4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af6:	0409      	lsls	r1, r1, #16
 8000af8:	6101      	str	r1, [r0, #16]
  }
}
 8000afa:	4770      	bx	lr

08000afc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d07a      	beq.n	8000bfa <HAL_PCD_Init+0xfe>
 8000b04:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b06:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000b0a:	b1db      	cbz	r3, 8000b44 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b12:	6828      	ldr	r0, [r5, #0]
 8000b14:	f001 fe29 	bl	800276a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b18:	462c      	mov	r4, r5
 8000b1a:	f854 7b10 	ldr.w	r7, [r4], #16
 8000b1e:	466e      	mov	r6, sp
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	6033      	str	r3, [r6, #0]
 8000b28:	1d2b      	adds	r3, r5, #4
 8000b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	f001 fe0c 	bl	800274a <USB_CoreInit>
 8000b32:	4604      	mov	r4, r0
 8000b34:	b158      	cbz	r0, 8000b4e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000b3c:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000b3e:	4620      	mov	r0, r4
 8000b40:	b007      	add	sp, #28
 8000b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000b44:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000b48:	f003 fbd0 	bl	80042ec <HAL_PCD_MspInit>
 8000b4c:	e7de      	b.n	8000b0c <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	6828      	ldr	r0, [r5, #0]
 8000b52:	f001 fe14 	bl	800277e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b56:	6868      	ldr	r0, [r5, #4]
 8000b58:	b388      	cbz	r0, 8000bbe <HAL_PCD_Init+0xc2>
 8000b5a:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000b5c:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b5e:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000b60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000b64:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000b68:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000b6c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b70:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b72:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b76:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b78:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000b7e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000b82:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b84:	3301      	adds	r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4283      	cmp	r3, r0
 8000b8a:	d3e9      	bcc.n	8000b60 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000b92:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000b96:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000b9a:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b9e:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ba2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ba6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000baa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000bae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000bb2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bb6:	3401      	adds	r4, #1
 8000bb8:	b2e4      	uxtb	r4, r4
 8000bba:	4284      	cmp	r4, r0
 8000bbc:	d3e7      	bcc.n	8000b8e <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bbe:	462c      	mov	r4, r5
 8000bc0:	f854 7b10 	ldr.w	r7, [r4], #16
 8000bc4:	466e      	mov	r6, sp
 8000bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	6033      	str	r3, [r6, #0]
 8000bce:	1d2b      	adds	r3, r5, #4
 8000bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	f001 fdd5 	bl	8002782 <USB_DevInit>
 8000bd8:	4604      	mov	r4, r0
 8000bda:	b120      	cbz	r0, 8000be6 <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000be2:	2401      	movs	r4, #1
 8000be4:	e7ab      	b.n	8000b3e <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000bf2:	6828      	ldr	r0, [r5, #0]
 8000bf4:	f002 f8bd 	bl	8002d72 <USB_DevDisconnect>
  return HAL_OK;
 8000bf8:	e7a1      	b.n	8000b3e <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8000bfa:	2401      	movs	r4, #1
 8000bfc:	e79f      	b.n	8000b3e <HAL_PCD_Init+0x42>

08000bfe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000bfe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000c00:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d011      	beq.n	8000c2c <HAL_PCD_Start+0x2e>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	2501      	movs	r5, #1
 8000c0c:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000c10:	6800      	ldr	r0, [r0, #0]
 8000c12:	f001 fda1 	bl	8002758 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c16:	4629      	mov	r1, r5
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f003 fc7c 	bl	8004516 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000c1e:	6820      	ldr	r0, [r4, #0]
 8000c20:	f002 f8a5 	bl	8002d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000c2a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	e7fc      	b.n	8000c2a <HAL_PCD_Start+0x2c>

08000c30 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000c30:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d00d      	beq.n	8000c54 <HAL_PCD_SetAddress+0x24>
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000c42:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c46:	6800      	ldr	r0, [r0, #0]
 8000c48:	f002 f88b 	bl	8002d62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000c52:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c54:	2002      	movs	r0, #2
}
 8000c56:	4770      	bx	lr

08000c58 <HAL_PCD_IRQHandler>:
{
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000c60:	6800      	ldr	r0, [r0, #0]
 8000c62:	f002 f888 	bl	8002d76 <USB_ReadInterrupts>
 8000c66:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8000c6a:	f040 809a 	bne.w	8000da2 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f002 f881 	bl	8002d76 <USB_ReadInterrupts>
 8000c74:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8000c78:	f040 842a 	bne.w	80014d0 <HAL_PCD_IRQHandler+0x878>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000c7c:	6820      	ldr	r0, [r4, #0]
 8000c7e:	f002 f87a 	bl	8002d76 <USB_ReadInterrupts>
 8000c82:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8000c86:	d008      	beq.n	8000c9a <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000c88:	6822      	ldr	r2, [r4, #0]
 8000c8a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c92:	041b      	lsls	r3, r3, #16
 8000c94:	0c1b      	lsrs	r3, r3, #16
 8000c96:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000c9a:	6820      	ldr	r0, [r4, #0]
 8000c9c:	f002 f86b 	bl	8002d76 <USB_ReadInterrupts>
 8000ca0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8000ca4:	d008      	beq.n	8000cb8 <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000cac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000cb8:	6820      	ldr	r0, [r4, #0]
 8000cba:	f002 f85c 	bl	8002d76 <USB_ReadInterrupts>
 8000cbe:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000cc2:	f040 8417 	bne.w	80014f4 <HAL_PCD_IRQHandler+0x89c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000cc6:	6820      	ldr	r0, [r4, #0]
 8000cc8:	f002 f855 	bl	8002d76 <USB_ReadInterrupts>
 8000ccc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8000cd0:	d04e      	beq.n	8000d70 <HAL_PCD_IRQHandler+0x118>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000cd2:	6826      	ldr	r6, [r4, #0]
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	f1ad 0202 	sub.w	r2, sp, #2
 8000cda:	f10d 050e 	add.w	r5, sp, #14
 8000cde:	4613      	mov	r3, r2
 8000ce0:	f831 0b04 	ldrh.w	r0, [r1], #4
 8000ce4:	f823 0f02 	strh.w	r0, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 8000ce8:	429d      	cmp	r5, r3
 8000cea:	d1f9      	bne.n	8000ce0 <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000cec:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000cfa:	6821      	ldr	r1, [r4, #0]
 8000cfc:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	0c1b      	lsrs	r3, r3, #16
 8000d08:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000d0c:	6821      	ldr	r1, [r4, #0]
 8000d0e:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8000d12:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000d16:	d0fa      	beq.n	8000d0e <HAL_PCD_IRQHandler+0xb6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d18:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8000d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d20:	041b      	lsls	r3, r3, #16
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 8000d28:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000d2a:	6821      	ldr	r1, [r4, #0]
 8000d2c:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8000d30:	52c8      	strh	r0, [r1, r3]
    for (i = 0U; i < 8U; i++)
 8000d32:	3304      	adds	r3, #4
 8000d34:	2b20      	cmp	r3, #32
 8000d36:	d1f8      	bne.n	8000d2a <HAL_PCD_IRQHandler+0xd2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d38:	6822      	ldr	r2, [r4, #0]
 8000d3a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d48:	6822      	ldr	r2, [r4, #0]
 8000d4a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d52:	041b      	lsls	r3, r3, #16
 8000d54:	0c1b      	lsrs	r3, r3, #16
 8000d56:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000d5a:	6822      	ldr	r2, [r4, #0]
 8000d5c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f003 fb16 	bl	800439c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000d70:	6820      	ldr	r0, [r4, #0]
 8000d72:	f002 f800 	bl	8002d76 <USB_ReadInterrupts>
 8000d76:	f410 7f00 	tst.w	r0, #512	; 0x200
 8000d7a:	f040 83db 	bne.w	8001534 <HAL_PCD_IRQHandler+0x8dc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000d7e:	6820      	ldr	r0, [r4, #0]
 8000d80:	f001 fff9 	bl	8002d76 <USB_ReadInterrupts>
 8000d84:	f410 7f80 	tst.w	r0, #256	; 0x100
 8000d88:	d008      	beq.n	8000d9c <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000d9c:	b004      	add	sp, #16
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000da2:	6820      	ldr	r0, [r4, #0]
 8000da4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000da8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000dac:	f43f af5f 	beq.w	8000c6e <HAL_PCD_IRQHandler+0x16>
 8000db0:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000db2:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000db6:	f24c 0880 	movw	r8, #49280	; 0xc080
 8000dba:	e3d9      	b.n	8001570 <HAL_PCD_IRQHandler+0x918>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dbc:	8803      	ldrh	r3, [r0, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dd4:	6822      	ldr	r2, [r4, #0]
 8000dd6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000de0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000de4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000de8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000df0:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000df2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000df4:	4413      	add	r3, r2
 8000df6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f003 faaa 	bl	8004354 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000e00:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 83ac 	beq.w	8001562 <HAL_PCD_IRQHandler+0x90a>
 8000e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 83a8 	bne.w	8001562 <HAL_PCD_IRQHandler+0x90a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000e12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e16:	6822      	ldr	r2, [r4, #0]
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000e20:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8000e24:	e39d      	b.n	8001562 <HAL_PCD_IRQHandler+0x90a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e38:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e40:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000e44:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000e48:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000e4c:	f002 faf7 	bl	800343e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e50:	6822      	ldr	r2, [r4, #0]
 8000e52:	8813      	ldrh	r3, [r2, #0]
 8000e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e58:	051b      	lsls	r3, r3, #20
 8000e5a:	0d1b      	lsrs	r3, r3, #20
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000e62:	4620      	mov	r0, r4
 8000e64:	f003 fa62 	bl	800432c <HAL_PCD_SetupStageCallback>
 8000e68:	e37b      	b.n	8001562 <HAL_PCD_IRQHandler+0x90a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e6a:	2a3e      	cmp	r2, #62	; 0x3e
 8000e6c:	d808      	bhi.n	8000e80 <HAL_PCD_IRQHandler+0x228>
 8000e6e:	0850      	lsrs	r0, r2, #1
 8000e70:	f012 0f01 	tst.w	r2, #1
 8000e74:	bf18      	it	ne
 8000e76:	3001      	addne	r0, #1
 8000e78:	0282      	lsls	r2, r0, #10
 8000e7a:	b292      	uxth	r2, r2
 8000e7c:	525a      	strh	r2, [r3, r1]
 8000e7e:	e3ce      	b.n	800161e <HAL_PCD_IRQHandler+0x9c6>
 8000e80:	0950      	lsrs	r0, r2, #5
 8000e82:	f012 0f1f 	tst.w	r2, #31
 8000e86:	bf08      	it	eq
 8000e88:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8000e8c:	ea6f 62c0 	mvn.w	r2, r0, lsl #27
 8000e90:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000e94:	b292      	uxth	r2, r2
 8000e96:	525a      	strh	r2, [r3, r1]
 8000e98:	e3c1      	b.n	800161e <HAL_PCD_IRQHandler+0x9c6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000e9a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000e9e:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ea2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ea6:	d14d      	bne.n	8000f44 <HAL_PCD_IRQHandler+0x2ec>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000ea8:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000eac:	f000 8359 	beq.w	8001562 <HAL_PCD_IRQHandler+0x90a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8000ece:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8000ed2:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 8000ed6:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	f000 8188 	beq.w	80011f0 <HAL_PCD_IRQHandler+0x598>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ee0:	6820      	ldr	r0, [r4, #0]
 8000ee2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ee6:	b29b      	uxth	r3, r3
          if (ep->xfer_len > TxByteNbre)
 8000ee8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000eec:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8000ef0:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ef2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000efc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f00:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8000f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f240 8320 	bls.w	800154e <HAL_PCD_IRQHandler+0x8f6>
            ep->xfer_len -= TxByteNbre;
 8000f0e:	1ad2      	subs	r2, r2, r3
 8000f10:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000f14:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8000f18:	640a      	str	r2, [r1, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	f000 831c 	beq.w	8001558 <HAL_PCD_IRQHandler+0x900>
            ep->xfer_buff += TxByteNbre;
 8000f20:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000f24:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8000f28:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000f2a:	4419      	add	r1, r3
 8000f2c:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000f2e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000f30:	440b      	add	r3, r1
 8000f32:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8000f34:	3501      	adds	r5, #1
 8000f36:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f3a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8000f3e:	f001 ff39 	bl	8002db4 <USB_EPStartXfer>
 8000f42:	e30e      	b.n	8001562 <HAL_PCD_IRQHandler+0x90a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000f44:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f4c:	051b      	lsls	r3, r3, #20
 8000f4e:	0d1b      	lsrs	r3, r3, #20
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000f58:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000f5c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8000f60:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d145      	bne.n	8000ff4 <HAL_PCD_IRQHandler+0x39c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f68:	6820      	ldr	r0, [r4, #0]
 8000f6a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000f74:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8000f78:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f86:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8000f8a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8000f8e:	f1ba 0f00 	cmp.w	sl, #0
 8000f92:	d123      	bne.n	8000fdc <HAL_PCD_IRQHandler+0x384>
        ep->xfer_count += count;
 8000f94:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000f98:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8000f9c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000fa0:	4452      	add	r2, sl
 8000fa2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8000fa6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000faa:	4452      	add	r2, sl
 8000fac:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000fb0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000fb4:	b143      	cbz	r3, 8000fc8 <HAL_PCD_IRQHandler+0x370>
 8000fb6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000fba:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8000fbe:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8000fc2:	459a      	cmp	sl, r3
 8000fc4:	f080 810a 	bcs.w	80011dc <HAL_PCD_IRQHandler+0x584>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000fc8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000fcc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8000fd0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f003 f9b1 	bl	800433c <HAL_PCD_DataOutStageCallback>
 8000fda:	e765      	b.n	8000ea8 <HAL_PCD_IRQHandler+0x250>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000fdc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000fe0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8000fe4:	4653      	mov	r3, sl
 8000fe6:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8000fea:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000fee:	f002 fa26 	bl	800343e <USB_ReadPMA>
 8000ff2:	e7cf      	b.n	8000f94 <HAL_PCD_IRQHandler+0x33c>
          if (ep->type == EP_TYPE_BULK)
 8000ff4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000ff8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8000ffc:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8001000:	2b02      	cmp	r3, #2
 8001002:	d037      	beq.n	8001074 <HAL_PCD_IRQHandler+0x41c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001004:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001008:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800100c:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001010:	6821      	ldr	r1, [r4, #0]
 8001012:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001016:	b29b      	uxth	r3, r3
 8001018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800101c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001028:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800102c:	6820      	ldr	r0, [r4, #0]
 800102e:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001032:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001036:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800103a:	f000 80b3 	beq.w	80011a4 <HAL_PCD_IRQHandler+0x54c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800103e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001042:	b29b      	uxth	r3, r3
 8001044:	3302      	adds	r3, #2
 8001046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800104a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800104e:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001052:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001056:	f1ba 0f00 	cmp.w	sl, #0
 800105a:	d09b      	beq.n	8000f94 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800105c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001060:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001064:	4653      	mov	r3, sl
 8001066:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800106a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800106e:	f002 f9e6 	bl	800343e <USB_ReadPMA>
 8001072:	e78f      	b.n	8000f94 <HAL_PCD_IRQHandler+0x33c>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001074:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001078:	d04a      	beq.n	8001110 <HAL_PCD_IRQHandler+0x4b8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800107a:	6822      	ldr	r2, [r4, #0]
 800107c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001080:	b29b      	uxth	r3, r3
 8001082:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001086:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800108a:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 800108e:	3302      	adds	r3, #2
 8001090:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001094:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001098:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 800109c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80010a0:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 80010a4:	4553      	cmp	r3, sl
 80010a6:	f0c0 832d 	bcc.w	8001704 <HAL_PCD_IRQHandler+0xaac>
      ep->xfer_len -= count;
 80010aa:	eba3 030a 	sub.w	r3, r3, sl
 80010ae:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80010b2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80010b6:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8328 	beq.w	8001710 <HAL_PCD_IRQHandler+0xab8>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80010c0:	f019 0f40 	tst.w	r9, #64	; 0x40
 80010c4:	d013      	beq.n	80010ee <HAL_PCD_IRQHandler+0x496>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80010c6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80010ca:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80010ce:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80010d2:	6822      	ldr	r2, [r4, #0]
 80010d4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80010de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010ea:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 80010ee:	f1ba 0f00 	cmp.w	sl, #0
 80010f2:	f43f af4f 	beq.w	8000f94 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80010f6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80010fa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80010fe:	4653      	mov	r3, sl
 8001100:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001104:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001108:	6820      	ldr	r0, [r4, #0]
 800110a:	f002 f998 	bl	800343e <USB_ReadPMA>
 800110e:	e741      	b.n	8000f94 <HAL_PCD_IRQHandler+0x33c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001116:	b29b      	uxth	r3, r3
 8001118:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800111c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001120:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8001124:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001128:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800112c:	f8b3 a40c 	ldrh.w	sl, [r3, #1036]	; 0x40c
 8001130:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001134:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8001138:	4553      	cmp	r3, sl
 800113a:	f0c0 82f6 	bcc.w	800172a <HAL_PCD_IRQHandler+0xad2>
      ep->xfer_len -= count;
 800113e:	eba3 030a 	sub.w	r3, r3, sl
 8001142:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001146:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800114a:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 82f1 	beq.w	8001736 <HAL_PCD_IRQHandler+0xade>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001154:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001158:	d113      	bne.n	8001182 <HAL_PCD_IRQHandler+0x52a>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800115a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800115e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001162:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800116c:	b29b      	uxth	r3, r3
 800116e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800117e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001182:	f1ba 0f00 	cmp.w	sl, #0
 8001186:	f43f af05 	beq.w	8000f94 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800118a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800118e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001192:	4653      	mov	r3, sl
 8001194:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001198:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	f002 f94e 	bl	800343e <USB_ReadPMA>
 80011a2:	e6f7      	b.n	8000f94 <HAL_PCD_IRQHandler+0x33c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	3306      	adds	r3, #6
 80011ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80011b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80011b4:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80011b8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80011bc:	f1ba 0f00 	cmp.w	sl, #0
 80011c0:	f43f aee8 	beq.w	8000f94 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011c4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80011c8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80011cc:	4653      	mov	r3, sl
 80011ce:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80011d2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80011d6:	f002 f932 	bl	800343e <USB_ReadPMA>
 80011da:	e6db      	b.n	8000f94 <HAL_PCD_IRQHandler+0x33c>
        ep = &hpcd->OUT_ep[epindex];
 80011dc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80011e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80011e4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80011e8:	6820      	ldr	r0, [r4, #0]
 80011ea:	f001 fde3 	bl	8002db4 <USB_EPStartXfer>
 80011ee:	e65b      	b.n	8000ea8 <HAL_PCD_IRQHandler+0x250>
        if ((ep->type != EP_TYPE_BULK) ||
 80011f0:	f419 7f80 	tst.w	r9, #256	; 0x100
 80011f4:	f43f ae74 	beq.w	8000ee0 <HAL_PCD_IRQHandler+0x288>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011f8:	f019 0f40 	tst.w	r9, #64	; 0x40
 80011fc:	f000 80b8 	beq.w	8001370 <HAL_PCD_IRQHandler+0x718>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001200:	6821      	ldr	r1, [r4, #0]
 8001202:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001206:	b29b      	uxth	r3, r3
 8001208:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 800120c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001210:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001214:	6c10      	ldr	r0, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001216:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800121a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800121e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8001222:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001226:	4290      	cmp	r0, r2
 8001228:	f240 821d 	bls.w	8001666 <HAL_PCD_IRQHandler+0xa0e>
      ep->xfer_len -= TxByteNbre;
 800122c:	1a80      	subs	r0, r0, r2
 800122e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001232:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001236:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001238:	2800      	cmp	r0, #0
 800123a:	f000 8219 	beq.w	8001670 <HAL_PCD_IRQHandler+0xa18>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800123e:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001242:	d00a      	beq.n	800125a <HAL_PCD_IRQHandler+0x602>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001244:	f831 302c 	ldrh.w	r3, [r1, ip, lsl #2]
 8001248:	b29b      	uxth	r3, r3
 800124a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800124e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001252:	ea48 0303 	orr.w	r3, r8, r3
 8001256:	f821 302c 	strh.w	r3, [r1, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800125a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800125e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001262:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001266:	2b01      	cmp	r3, #1
 8001268:	d00f      	beq.n	800128a <HAL_PCD_IRQHandler+0x632>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800126a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800126e:	6822      	ldr	r2, [r4, #0]
 8001270:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001274:	b29b      	uxth	r3, r3
 8001276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800127a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800127e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001282:	433b      	orrs	r3, r7
 8001284:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001288:	e16b      	b.n	8001562 <HAL_PCD_IRQHandler+0x90a>
        ep->xfer_buff += TxByteNbre;
 800128a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800128e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001292:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001294:	4411      	add	r1, r2
 8001296:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001298:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800129a:	4411      	add	r1, r2
 800129c:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800129e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	4299      	cmp	r1, r3
 80012a4:	d326      	bcc.n	80012f4 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 80012a6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80012aa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80012ae:	1ac9      	subs	r1, r1, r3
 80012b0:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80012b2:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80012b6:	bb9a      	cbnz	r2, 8001320 <HAL_PCD_IRQHandler+0x6c8>
 80012b8:	6821      	ldr	r1, [r4, #0]
 80012ba:	f8b1 c050 	ldrh.w	ip, [r1, #80]	; 0x50
 80012be:	fa1f fc8c 	uxth.w	ip, ip
 80012c2:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80012c6:	0110      	lsls	r0, r2, #4
 80012c8:	f201 4104 	addw	r1, r1, #1028	; 0x404
 80012cc:	4461      	add	r1, ip
 80012ce:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 81bb 	bne.w	800164e <HAL_PCD_IRQHandler+0x9f6>
 80012d8:	5a42      	ldrh	r2, [r0, r1]
 80012da:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80012de:	0412      	lsls	r2, r2, #16
 80012e0:	0c12      	lsrs	r2, r2, #16
 80012e2:	5242      	strh	r2, [r0, r1]
 80012e4:	5a42      	ldrh	r2, [r0, r1]
 80012e6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80012ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80012ee:	b292      	uxth	r2, r2
 80012f0:	5242      	strh	r2, [r0, r1]
 80012f2:	e017      	b.n	8001324 <HAL_PCD_IRQHandler+0x6cc>
        else if (ep->xfer_len_db == 0U)
 80012f4:	b939      	cbnz	r1, 8001306 <HAL_PCD_IRQHandler+0x6ae>
          ep->xfer_fill_db = 0U;
 80012f6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80012fa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80012fe:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8001302:	4613      	mov	r3, r2
 8001304:	e7d5      	b.n	80012b2 <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_fill_db = 0U;
 8001306:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800130a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800130e:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8001312:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001314:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001318:	2a00      	cmp	r2, #0
 800131a:	f000 818c 	beq.w	8001636 <HAL_PCD_IRQHandler+0x9de>
          len = ep->xfer_len_db;
 800131e:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001320:	2a01      	cmp	r2, #1
 8001322:	d018      	beq.n	8001356 <HAL_PCD_IRQHandler+0x6fe>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001324:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001328:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800132c:	4611      	mov	r1, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001332:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f001 fd24 	bl	8002d82 <USB_WritePMA>
 800133a:	e796      	b.n	800126a <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800133c:	0959      	lsrs	r1, r3, #5
 800133e:	f013 0f1f 	tst.w	r3, #31
 8001342:	bf08      	it	eq
 8001344:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001348:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800134c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001350:	b289      	uxth	r1, r1
 8001352:	8011      	strh	r1, [r2, #0]
 8001354:	e7e6      	b.n	8001324 <HAL_PCD_IRQHandler+0x6cc>
 8001356:	6822      	ldr	r2, [r4, #0]
 8001358:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800135c:	b280      	uxth	r0, r0
 800135e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001362:	0109      	lsls	r1, r1, #4
 8001364:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001368:	4402      	add	r2, r0
 800136a:	b298      	uxth	r0, r3
 800136c:	5288      	strh	r0, [r1, r2]
 800136e:	e7d9      	b.n	8001324 <HAL_PCD_IRQHandler+0x6cc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001370:	6820      	ldr	r0, [r4, #0]
 8001372:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001376:	b29b      	uxth	r3, r3
 8001378:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 800137c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001380:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001384:	6c12      	ldr	r2, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001386:	3306      	adds	r3, #6
 8001388:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800138c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001390:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len >= TxByteNbre)
 8001394:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001398:	4562      	cmp	r2, ip
 800139a:	f0c0 8198 	bcc.w	80016ce <HAL_PCD_IRQHandler+0xa76>
      ep->xfer_len -= TxByteNbre;
 800139e:	eba2 020c 	sub.w	r2, r2, ip
 80013a2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80013a6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	f000 8193 	beq.w	80016d8 <HAL_PCD_IRQHandler+0xa80>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80013b2:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80013b6:	d10a      	bne.n	80013ce <HAL_PCD_IRQHandler+0x776>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80013b8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013c6:	ea48 0303 	orr.w	r3, r8, r3
 80013ca:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80013ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80013d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80013d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f47f af45 	bne.w	800126a <HAL_PCD_IRQHandler+0x612>
        ep->xfer_buff += TxByteNbre;
 80013e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80013e4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80013e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ea:	4462      	add	r2, ip
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80013ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013f0:	4462      	add	r2, ip
 80013f2:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80013f4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f8:	4298      	cmp	r0, r3
 80013fa:	d328      	bcc.n	800144e <HAL_PCD_IRQHandler+0x7f6>
          ep->xfer_len_db -= len;
 80013fc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001400:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001404:	1ac0      	subs	r0, r0, r3
 8001406:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	4611      	mov	r1, r2
 800140c:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001410:	f1bc 0f00 	cmp.w	ip, #0
 8001414:	d134      	bne.n	8001480 <HAL_PCD_IRQHandler+0x828>
 8001416:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800141a:	b289      	uxth	r1, r1
 800141c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001420:	440a      	add	r2, r1
 8001422:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001426:	0108      	lsls	r0, r1, #4
 8001428:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 8142 	bne.w	80016b6 <HAL_PCD_IRQHandler+0xa5e>
 8001432:	5a11      	ldrh	r1, [r2, r0]
 8001434:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001438:	0409      	lsls	r1, r1, #16
 800143a:	0c09      	lsrs	r1, r1, #16
 800143c:	5211      	strh	r1, [r2, r0]
 800143e:	5a11      	ldrh	r1, [r2, r0]
 8001440:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001444:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001448:	b289      	uxth	r1, r1
 800144a:	5211      	strh	r1, [r2, r0]
 800144c:	e01b      	b.n	8001486 <HAL_PCD_IRQHandler+0x82e>
        else if (ep->xfer_len_db == 0U)
 800144e:	b938      	cbnz	r0, 8001460 <HAL_PCD_IRQHandler+0x808>
          ep->xfer_fill_db = 0U;
 8001450:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001454:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001458:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 800145c:	4663      	mov	r3, ip
 800145e:	e7d3      	b.n	8001408 <HAL_PCD_IRQHandler+0x7b0>
          ep->xfer_len_db = 0U;
 8001460:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001464:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001468:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800146a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800146e:	6822      	ldr	r2, [r4, #0]
 8001470:	4611      	mov	r1, r2
 8001472:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001476:	f1bc 0f00 	cmp.w	ip, #0
 800147a:	f000 8110 	beq.w	800169e <HAL_PCD_IRQHandler+0xa46>
          len = ep->xfer_len_db;
 800147e:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001480:	f1bc 0f01 	cmp.w	ip, #1
 8001484:	d018      	beq.n	80014b8 <HAL_PCD_IRQHandler+0x860>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001486:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800148a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800148e:	4611      	mov	r1, r2
 8001490:	b29b      	uxth	r3, r3
 8001492:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8001494:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001496:	6820      	ldr	r0, [r4, #0]
 8001498:	f001 fc73 	bl	8002d82 <USB_WritePMA>
 800149c:	e6e5      	b.n	800126a <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800149e:	095a      	lsrs	r2, r3, #5
 80014a0:	f013 0f1f 	tst.w	r3, #31
 80014a4:	bf08      	it	eq
 80014a6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80014aa:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80014ae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80014b2:	b292      	uxth	r2, r2
 80014b4:	800a      	strh	r2, [r1, #0]
 80014b6:	e7e6      	b.n	8001486 <HAL_PCD_IRQHandler+0x82e>
 80014b8:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80014bc:	b280      	uxth	r0, r0
 80014be:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80014c2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80014c6:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80014ca:	b299      	uxth	r1, r3
 80014cc:	5211      	strh	r1, [r2, r0]
 80014ce:	e7da      	b.n	8001486 <HAL_PCD_IRQHandler+0x82e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014d0:	6822      	ldr	r2, [r4, #0]
 80014d2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80014e2:	4620      	mov	r0, r4
 80014e4:	f002 ff47 	bl	8004376 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014e8:	2100      	movs	r1, #0
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fba0 	bl	8000c30 <HAL_PCD_SetAddress>
 80014f0:	f7ff bbc4 	b.w	8000c7c <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800150c:	f023 0308 	bic.w	r3, r3, #8
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001518:	4620      	mov	r0, r4
 800151a:	f002 ff4f 	bl	80043bc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800151e:	6822      	ldr	r2, [r4, #0]
 8001520:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001530:	f7ff bbc9 	b.w	8000cc6 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001534:	6822      	ldr	r2, [r4, #0]
 8001536:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800153a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	0c1b      	lsrs	r3, r3, #16
 8001542:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001546:	4620      	mov	r0, r4
 8001548:	f002 ff0f 	bl	800436a <HAL_PCD_SOFCallback>
 800154c:	e417      	b.n	8000d7e <HAL_PCD_IRQHandler+0x126>
 800154e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001552:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001556:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001558:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800155c:	4620      	mov	r0, r4
 800155e:	f002 fef9 	bl	8004354 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001562:	6820      	ldr	r0, [r4, #0]
 8001564:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001568:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800156c:	f43f ab7f 	beq.w	8000c6e <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 8001570:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8001574:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 8001576:	f015 050f 	ands.w	r5, r5, #15
 800157a:	f47f ac8e 	bne.w	8000e9a <HAL_PCD_IRQHandler+0x242>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800157e:	f013 0f10 	tst.w	r3, #16
 8001582:	f43f ac1b 	beq.w	8000dbc <HAL_PCD_IRQHandler+0x164>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001586:	8803      	ldrh	r3, [r0, #0]
 8001588:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800158a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800158e:	f47f ac4a 	bne.w	8000e26 <HAL_PCD_IRQHandler+0x1ce>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001592:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001596:	d0e4      	beq.n	8001562 <HAL_PCD_IRQHandler+0x90a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001598:	8803      	ldrh	r3, [r0, #0]
 800159a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800159e:	051b      	lsls	r3, r3, #20
 80015a0:	0d1b      	lsrs	r3, r3, #20
 80015a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015a8:	6820      	ldr	r0, [r4, #0]
 80015aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80015b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015bc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80015c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015c8:	b18b      	cbz	r3, 80015ee <HAL_PCD_IRQHandler+0x996>
 80015ca:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80015ce:	b171      	cbz	r1, 80015ee <HAL_PCD_IRQHandler+0x996>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015d0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80015d4:	f001 ff33 	bl	800343e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80015d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80015dc:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 80015e0:	4413      	add	r3, r2
 80015e2:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015e6:	4631      	mov	r1, r6
 80015e8:	4620      	mov	r0, r4
 80015ea:	f002 fea7 	bl	800433c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80015f4:	b289      	uxth	r1, r1
 80015f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015fa:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 80015fe:	2a00      	cmp	r2, #0
 8001600:	f47f ac33 	bne.w	8000e6a <HAL_PCD_IRQHandler+0x212>
 8001604:	5a5a      	ldrh	r2, [r3, r1]
 8001606:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800160a:	0412      	lsls	r2, r2, #16
 800160c:	0c12      	lsrs	r2, r2, #16
 800160e:	525a      	strh	r2, [r3, r1]
 8001610:	5a5a      	ldrh	r2, [r3, r1]
 8001612:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001616:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800161a:	b292      	uxth	r2, r2
 800161c:	525a      	strh	r2, [r3, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	8813      	ldrh	r3, [r2, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800162c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001630:	433b      	orrs	r3, r7
 8001632:	8013      	strh	r3, [r2, #0]
 8001634:	e795      	b.n	8001562 <HAL_PCD_IRQHandler+0x90a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800163c:	b290      	uxth	r0, r2
 800163e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8001642:	4402      	add	r2, r0
 8001644:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
 8001648:	eb02 1203 	add.w	r2, r2, r3, lsl #4
          len = ep->xfer_len_db;
 800164c:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800164e:	2b3e      	cmp	r3, #62	; 0x3e
 8001650:	f63f ae74 	bhi.w	800133c <HAL_PCD_IRQHandler+0x6e4>
 8001654:	0859      	lsrs	r1, r3, #1
 8001656:	f013 0f01 	tst.w	r3, #1
 800165a:	bf18      	it	ne
 800165c:	3101      	addne	r1, #1
 800165e:	0289      	lsls	r1, r1, #10
 8001660:	b289      	uxth	r1, r1
 8001662:	8011      	strh	r1, [r2, #0]
 8001664:	e65e      	b.n	8001324 <HAL_PCD_IRQHandler+0x6cc>
 8001666:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800166a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800166e:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001670:	4661      	mov	r1, ip
 8001672:	4620      	mov	r0, r4
 8001674:	f002 fe6e 	bl	8004354 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001678:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800167c:	f43f adf5 	beq.w	800126a <HAL_PCD_IRQHandler+0x612>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001680:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001684:	6822      	ldr	r2, [r4, #0]
 8001686:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800168a:	b29b      	uxth	r3, r3
 800168c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001694:	ea48 0303 	orr.w	r3, r8, r3
 8001698:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800169c:	e5e5      	b.n	800126a <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800169e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80016a2:	fa1f fc83 	uxth.w	ip, r3
 80016a6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80016aa:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 80016ae:	4463      	add	r3, ip
 80016b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
          len = ep->xfer_len_db;
 80016b4:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016b6:	2b3e      	cmp	r3, #62	; 0x3e
 80016b8:	f63f aef1 	bhi.w	800149e <HAL_PCD_IRQHandler+0x846>
 80016bc:	085a      	lsrs	r2, r3, #1
 80016be:	f013 0f01 	tst.w	r3, #1
 80016c2:	bf18      	it	ne
 80016c4:	3201      	addne	r2, #1
 80016c6:	0292      	lsls	r2, r2, #10
 80016c8:	b292      	uxth	r2, r2
 80016ca:	800a      	strh	r2, [r1, #0]
 80016cc:	e6db      	b.n	8001486 <HAL_PCD_IRQHandler+0x82e>
 80016ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80016d2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80016d6:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016d8:	4620      	mov	r0, r4
 80016da:	f002 fe3b 	bl	8004354 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80016de:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80016e2:	f47f adc2 	bne.w	800126a <HAL_PCD_IRQHandler+0x612>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80016e6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fa:	ea48 0303 	orr.w	r3, r8, r3
 80016fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001702:	e5b2      	b.n	800126a <HAL_PCD_IRQHandler+0x612>
 8001704:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001708:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800170c:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001710:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800171a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001722:	433b      	orrs	r3, r7
 8001724:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001728:	e4ca      	b.n	80010c0 <HAL_PCD_IRQHandler+0x468>
 800172a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800172e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001732:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001736:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800173a:	b29b      	uxth	r3, r3
 800173c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001744:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001748:	433b      	orrs	r3, r7
 800174a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800174e:	e501      	b.n	8001154 <HAL_PCD_IRQHandler+0x4fc>

08001750 <HAL_PCD_EP_Open>:
{
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	4605      	mov	r5, r0
 8001754:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001756:	f011 0f80 	tst.w	r1, #128	; 0x80
 800175a:	d125      	bne.n	80017a8 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800175c:	f001 0007 	and.w	r0, r1, #7
 8001760:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001764:	eb05 06c1 	add.w	r6, r5, r1, lsl #3
 8001768:	f506 71b4 	add.w	r1, r6, #360	; 0x168
    ep->is_in = 0U;
 800176c:	4630      	mov	r0, r6
 800176e:	2600      	movs	r6, #0
 8001770:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001774:	f004 0407 	and.w	r4, r4, #7
 8001778:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 800177a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800177c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800177e:	784a      	ldrb	r2, [r1, #1]
 8001780:	b102      	cbz	r2, 8001784 <HAL_PCD_EP_Open+0x34>
    ep->tx_fifo_num = ep->num;
 8001782:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001784:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001786:	bf04      	itt	eq
 8001788:	2300      	moveq	r3, #0
 800178a:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800178c:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8001790:	2b01      	cmp	r3, #1
 8001792:	d013      	beq.n	80017bc <HAL_PCD_EP_Open+0x6c>
 8001794:	2301      	movs	r3, #1
 8001796:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800179a:	6828      	ldr	r0, [r5, #0]
 800179c:	f001 f804 	bl	80027a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a8:	f001 0007 	and.w	r0, r1, #7
 80017ac:	3001      	adds	r0, #1
 80017ae:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80017b2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 80017b6:	2601      	movs	r6, #1
 80017b8:	704e      	strb	r6, [r1, #1]
 80017ba:	e7db      	b.n	8001774 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 80017bc:	2002      	movs	r0, #2
 80017be:	e7f2      	b.n	80017a6 <HAL_PCD_EP_Open+0x56>

080017c0 <HAL_PCD_EP_Close>:
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80017c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80017ca:	d11f      	bne.n	800180c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017cc:	f001 0207 	and.w	r2, r1, #7
 80017d0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80017d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80017d8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80017dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017e0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80017e4:	2000      	movs	r0, #0
 80017e6:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80017f0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d013      	beq.n	8001820 <HAL_PCD_EP_Close+0x60>
 80017f8:	2301      	movs	r3, #1
 80017fa:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017fe:	6820      	ldr	r0, [r4, #0]
 8001800:	f001 f94f 	bl	8002aa2 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001804:	2000      	movs	r0, #0
 8001806:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800180a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180c:	f001 0207 	and.w	r2, r1, #7
 8001810:	3201      	adds	r2, #1
 8001812:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001816:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800181a:	2001      	movs	r0, #1
 800181c:	7048      	strb	r0, [r1, #1]
 800181e:	e7e4      	b.n	80017ea <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8001820:	2002      	movs	r0, #2
 8001822:	e7f2      	b.n	800180a <HAL_PCD_EP_Close+0x4a>

08001824 <HAL_PCD_EP_Receive>:
{
 8001824:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001826:	f001 0407 	and.w	r4, r1, #7
 800182a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800182e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001832:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 8001836:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800183a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800183e:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8001842:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 800184c:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001850:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001854:	6800      	ldr	r0, [r0, #0]
 8001856:	f001 faad 	bl	8002db4 <USB_EPStartXfer>
}
 800185a:	2000      	movs	r0, #0
 800185c:	bd38      	pop	{r3, r4, r5, pc}

0800185e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800185e:	f001 0107 	and.w	r1, r1, #7
 8001862:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001866:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800186a:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800186e:	4770      	bx	lr

08001870 <HAL_PCD_EP_Transmit>:
{
 8001870:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001872:	f001 0407 	and.w	r4, r1, #7
 8001876:	1c61      	adds	r1, r4, #1
 8001878:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800187c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8001880:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8001884:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8001888:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 800188a:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800188c:	2201      	movs	r2, #1
 800188e:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  ep->xfer_len_db = len;
 8001892:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_count = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8001898:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800189c:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018a0:	6800      	ldr	r0, [r0, #0]
 80018a2:	f001 fa87 	bl	8002db4 <USB_EPStartXfer>
}
 80018a6:	2000      	movs	r0, #0
 80018a8:	bd38      	pop	{r3, r4, r5, pc}

080018aa <HAL_PCD_EP_SetStall>:
{
 80018aa:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018ac:	f001 0507 	and.w	r5, r1, #7
 80018b0:	6842      	ldr	r2, [r0, #4]
 80018b2:	4295      	cmp	r5, r2
 80018b4:	d831      	bhi.n	800191a <HAL_PCD_EP_SetStall+0x70>
 80018b6:	4604      	mov	r4, r0
 80018b8:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80018ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018be:	d11e      	bne.n	80018fe <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80018c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80018c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80018c8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80018cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018d0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80018da:	2301      	movs	r3, #1
 80018dc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018de:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80018e0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d01a      	beq.n	800191e <HAL_PCD_EP_SetStall+0x74>
 80018e8:	2301      	movs	r3, #1
 80018ea:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018ee:	6820      	ldr	r0, [r4, #0]
 80018f0:	f001 f9c1 	bl	8002c76 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018f4:	b15d      	cbz	r5, 800190e <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80018fc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018fe:	1c6b      	adds	r3, r5, #1
 8001900:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001904:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001908:	2201      	movs	r2, #1
 800190a:	704a      	strb	r2, [r1, #1]
 800190c:	e7e5      	b.n	80018da <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800190e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001912:	6820      	ldr	r0, [r4, #0]
 8001914:	f001 fa33 	bl	8002d7e <USB_EP0_OutStart>
 8001918:	e7ed      	b.n	80018f6 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
 800191c:	e7ee      	b.n	80018fc <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 800191e:	2002      	movs	r0, #2
 8001920:	e7ec      	b.n	80018fc <HAL_PCD_EP_SetStall+0x52>

08001922 <HAL_PCD_EP_ClrStall>:
{
 8001922:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001924:	f001 010f 	and.w	r1, r1, #15
 8001928:	6842      	ldr	r2, [r0, #4]
 800192a:	4291      	cmp	r1, r2
 800192c:	d830      	bhi.n	8001990 <HAL_PCD_EP_ClrStall+0x6e>
{
 800192e:	b510      	push	{r4, lr}
 8001930:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001932:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001936:	d121      	bne.n	800197c <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001938:	f003 0207 	and.w	r2, r3, #7
 800193c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001940:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001944:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001948:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800194c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001950:	2000      	movs	r0, #0
 8001952:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8001956:	2200      	movs	r2, #0
 8001958:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001960:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001964:	2b01      	cmp	r3, #1
 8001966:	d015      	beq.n	8001994 <HAL_PCD_EP_ClrStall+0x72>
 8001968:	2301      	movs	r3, #1
 800196a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800196e:	6820      	ldr	r0, [r4, #0]
 8001970:	f001 f9a6 	bl	8002cc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001974:	2000      	movs	r0, #0
 8001976:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800197a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197c:	f003 0207 	and.w	r2, r3, #7
 8001980:	3201      	adds	r2, #1
 8001982:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001986:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800198a:	2001      	movs	r0, #1
 800198c:	7048      	strb	r0, [r1, #1]
 800198e:	e7e2      	b.n	8001956 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8001990:	2001      	movs	r0, #1
}
 8001992:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001994:	2002      	movs	r0, #2
 8001996:	e7f0      	b.n	800197a <HAL_PCD_EP_ClrStall+0x58>

08001998 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001998:	f011 0f80 	tst.w	r1, #128	; 0x80
 800199c:	d00b      	beq.n	80019b6 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199e:	f001 0107 	and.w	r1, r1, #7
 80019a2:	3101      	adds	r1, #1
 80019a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80019a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80019ac:	b952      	cbnz	r2, 80019c4 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80019ae:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80019b0:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80019b2:	2000      	movs	r0, #0
 80019b4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80019b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80019ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80019be:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80019c2:	e7f3      	b.n	80019ac <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80019c4:	2201      	movs	r2, #1
 80019c6:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80019c8:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	814b      	strh	r3, [r1, #10]
 80019ce:	e7f0      	b.n	80019b2 <HAL_PCDEx_PMAConfig+0x1a>

080019d0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d0:	2800      	cmp	r0, #0
 80019d2:	f000 8201 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x408>
{
 80019d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	6803      	ldr	r3, [r0, #0]
 80019e0:	f013 0f01 	tst.w	r3, #1
 80019e4:	d02c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e6:	4baa      	ldr	r3, [pc, #680]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d01d      	beq.n	8001a2e <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f2:	4ba7      	ldr	r3, [pc, #668]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d012      	beq.n	8001a24 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	6863      	ldr	r3, [r4, #4]
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a04:	d041      	beq.n	8001a8a <HAL_RCC_OscConfig+0xba>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d155      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xe6>
 8001a0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a0e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e037      	b.n	8001a94 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a24:	4b9a      	ldr	r3, [pc, #616]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a2c:	d0e7      	beq.n	80019fe <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	4b98      	ldr	r3, [pc, #608]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a36:	d003      	beq.n	8001a40 <HAL_RCC_OscConfig+0x70>
 8001a38:	6863      	ldr	r3, [r4, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 81ce 	beq.w	8001ddc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	f013 0f02 	tst.w	r3, #2
 8001a46:	d075      	beq.n	8001b34 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a48:	4b91      	ldr	r3, [pc, #580]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f013 0f0c 	tst.w	r3, #12
 8001a50:	d05f      	beq.n	8001b12 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a52:	4b8f      	ldr	r3, [pc, #572]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d054      	beq.n	8001b08 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5e:	6923      	ldr	r3, [r4, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8089 	beq.w	8001b78 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a66:	4b8b      	ldr	r3, [pc, #556]	; (8001c94 <HAL_RCC_OscConfig+0x2c4>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7fe fdec 	bl	8000648 <HAL_GetTick>
 8001a70:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4e87      	ldr	r6, [pc, #540]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001a74:	6833      	ldr	r3, [r6, #0]
 8001a76:	f013 0f02 	tst.w	r3, #2
 8001a7a:	d174      	bne.n	8001b66 <HAL_RCC_OscConfig+0x196>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7fe fde4 	bl	8000648 <HAL_GetTick>
 8001a80:	1b40      	subs	r0, r0, r5
 8001a82:	2802      	cmp	r0, #2
 8001a84:	d9f6      	bls.n	8001a74 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8001a86:	2003      	movs	r0, #3
 8001a88:	e1ad      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	4a81      	ldr	r2, [pc, #516]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001a8c:	6813      	ldr	r3, [r2, #0]
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	6863      	ldr	r3, [r4, #4]
 8001a96:	b343      	cbz	r3, 8001aea <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8001a98:	f7fe fdd6 	bl	8000648 <HAL_GetTick>
 8001a9c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4e7c      	ldr	r6, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001aa0:	6833      	ldr	r3, [r6, #0]
 8001aa2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001aa6:	d1cb      	bne.n	8001a40 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7fe fdce 	bl	8000648 <HAL_GetTick>
 8001aac:	1b40      	subs	r0, r0, r5
 8001aae:	2864      	cmp	r0, #100	; 0x64
 8001ab0:	d9f6      	bls.n	8001aa0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	e197      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aba:	d009      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x100>
 8001abc:	4b74      	ldr	r3, [pc, #464]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e7e1      	b.n	8001a94 <HAL_RCC_OscConfig+0xc4>
 8001ad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ad4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e7d4      	b.n	8001a94 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8001aea:	f7fe fdad 	bl	8000648 <HAL_GetTick>
 8001aee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af0:	4e67      	ldr	r6, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001af2:	6833      	ldr	r3, [r6, #0]
 8001af4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001af8:	d0a2      	beq.n	8001a40 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afa:	f7fe fda5 	bl	8000648 <HAL_GetTick>
 8001afe:	1b40      	subs	r0, r0, r5
 8001b00:	2864      	cmp	r0, #100	; 0x64
 8001b02:	d9f6      	bls.n	8001af2 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8001b04:	2003      	movs	r0, #3
 8001b06:	e16e      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b08:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b10:	d1a5      	bne.n	8001a5e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f013 0f02 	tst.w	r3, #2
 8001b1a:	d003      	beq.n	8001b24 <HAL_RCC_OscConfig+0x154>
 8001b1c:	6923      	ldr	r3, [r4, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 815e 	bne.w	8001de0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001b26:	6813      	ldr	r3, [r2, #0]
 8001b28:	6961      	ldr	r1, [r4, #20]
 8001b2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b32:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	f013 0f08 	tst.w	r3, #8
 8001b3a:	d03c      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3c:	69a3      	ldr	r3, [r4, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04f      	beq.n	8001be2 <HAL_RCC_OscConfig+0x212>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b42:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HAL_RCC_OscConfig+0x2c8>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7fe fd7e 	bl	8000648 <HAL_GetTick>
 8001b4c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	4e50      	ldr	r6, [pc, #320]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001b50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b52:	f013 0f02 	tst.w	r3, #2
 8001b56:	d121      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7fe fd76 	bl	8000648 <HAL_GetTick>
 8001b5c:	1b40      	subs	r0, r0, r5
 8001b5e:	2802      	cmp	r0, #2
 8001b60:	d9f6      	bls.n	8001b50 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 8001b62:	2003      	movs	r0, #3
 8001b64:	e13f      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4a4a      	ldr	r2, [pc, #296]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001b68:	6813      	ldr	r3, [r2, #0]
 8001b6a:	6961      	ldr	r1, [r4, #20]
 8001b6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e7dd      	b.n	8001b34 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001b78:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCC_OscConfig+0x2c4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fd63 	bl	8000648 <HAL_GetTick>
 8001b82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b84:	4e42      	ldr	r6, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001b86:	6833      	ldr	r3, [r6, #0]
 8001b88:	f013 0f02 	tst.w	r3, #2
 8001b8c:	d0d2      	beq.n	8001b34 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7fe fd5b 	bl	8000648 <HAL_GetTick>
 8001b92:	1b40      	subs	r0, r0, r5
 8001b94:	2802      	cmp	r0, #2
 8001b96:	d9f6      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001b98:	2003      	movs	r0, #3
 8001b9a:	e124      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_OscConfig+0x2cc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a3f      	ldr	r2, [pc, #252]	; (8001ca0 <HAL_RCC_OscConfig+0x2d0>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a5b      	lsrs	r3, r3, #9
 8001ba8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001baa:	bf00      	nop
  }
  while (Delay --);
 8001bac:	9b01      	ldr	r3, [sp, #4]
 8001bae:	1e5a      	subs	r2, r3, #1
 8001bb0:	9201      	str	r2, [sp, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f9      	bne.n	8001baa <HAL_RCC_OscConfig+0x1da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	f013 0f04 	tst.w	r3, #4
 8001bbc:	f000 809c 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001bc8:	d11d      	bne.n	8001c06 <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd2:	61da      	str	r2, [r3, #28]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001bde:	2501      	movs	r5, #1
 8001be0:	e012      	b.n	8001c08 <HAL_RCC_OscConfig+0x238>
      __HAL_RCC_LSI_DISABLE();
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_RCC_OscConfig+0x2c8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001be8:	f7fe fd2e 	bl	8000648 <HAL_GetTick>
 8001bec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bee:	4e28      	ldr	r6, [pc, #160]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001bf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001bf2:	f013 0f02 	tst.w	r3, #2
 8001bf6:	d0de      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7fe fd26 	bl	8000648 <HAL_GetTick>
 8001bfc:	1b40      	subs	r0, r0, r5
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	d9f6      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x220>
          return HAL_TIMEOUT;
 8001c02:	2003      	movs	r0, #3
 8001c04:	e0ef      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_RCC_OscConfig+0x2d4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c10:	d011      	beq.n	8001c36 <HAL_RCC_OscConfig+0x266>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	68e3      	ldr	r3, [r4, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d022      	beq.n	8001c5e <HAL_RCC_OscConfig+0x28e>
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d145      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2d8>
 8001c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c20:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c24:	6a1a      	ldr	r2, [r3, #32]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	621a      	str	r2, [r3, #32]
 8001c2c:	6a1a      	ldr	r2, [r3, #32]
 8001c2e:	f022 0204 	bic.w	r2, r2, #4
 8001c32:	621a      	str	r2, [r3, #32]
 8001c34:	e018      	b.n	8001c68 <HAL_RCC_OscConfig+0x298>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x2d4>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c40:	f7fe fd02 	bl	8000648 <HAL_GetTick>
 8001c44:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4f17      	ldr	r7, [pc, #92]	; (8001ca4 <HAL_RCC_OscConfig+0x2d4>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c4e:	d1e0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7fe fcfa 	bl	8000648 <HAL_GetTick>
 8001c54:	1b80      	subs	r0, r0, r6
 8001c56:	2864      	cmp	r0, #100	; 0x64
 8001c58:	d9f6      	bls.n	8001c48 <HAL_RCC_OscConfig+0x278>
          return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	e0c3      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
 8001c60:	6a13      	ldr	r3, [r2, #32]
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c68:	68e3      	ldr	r3, [r4, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d032      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fceb 	bl	8000648 <HAL_GetTick>
 8001c72:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4f06      	ldr	r7, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x2c0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	f013 0f02 	tst.w	r3, #2
 8001c80:	d139      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe fce1 	bl	8000648 <HAL_GetTick>
 8001c86:	1b80      	subs	r0, r0, r6
 8001c88:	4540      	cmp	r0, r8
 8001c8a:	d9f6      	bls.n	8001c7a <HAL_RCC_OscConfig+0x2aa>
          return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e0aa      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
 8001c90:	40021000 	.word	0x40021000
 8001c94:	42420000 	.word	0x42420000
 8001c98:	42420480 	.word	0x42420480
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	10624dd3 	.word	0x10624dd3
 8001ca4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
 8001cac:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	621a      	str	r2, [r3, #32]
 8001cb6:	6a1a      	ldr	r2, [r3, #32]
 8001cb8:	f022 0204 	bic.w	r2, r2, #4
 8001cbc:	621a      	str	r2, [r3, #32]
 8001cbe:	e7d3      	b.n	8001c68 <HAL_RCC_OscConfig+0x298>
 8001cc0:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	f042 0204 	orr.w	r2, r2, #4
 8001cc8:	621a      	str	r2, [r3, #32]
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	621a      	str	r2, [r3, #32]
 8001cd2:	e7c9      	b.n	8001c68 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8001cd4:	f7fe fcb8 	bl	8000648 <HAL_GetTick>
 8001cd8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cda:	4f46      	ldr	r7, [pc, #280]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f013 0f02 	tst.w	r3, #2
 8001ce6:	d006      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7fe fcae 	bl	8000648 <HAL_GetTick>
 8001cec:	1b80      	subs	r0, r0, r6
 8001cee:	4540      	cmp	r0, r8
 8001cf0:	d9f6      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	e077      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8001cf6:	b9e5      	cbnz	r5, 8001d32 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf8:	69e3      	ldr	r3, [r4, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d072      	beq.n	8001de4 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfe:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001d00:	6852      	ldr	r2, [r2, #4]
 8001d02:	f002 020c 	and.w	r2, r2, #12
 8001d06:	2a08      	cmp	r2, #8
 8001d08:	d056      	beq.n	8001db8 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d017      	beq.n	8001d3e <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x428>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d14:	f7fe fc98 	bl	8000648 <HAL_GetTick>
 8001d18:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	4d36      	ldr	r5, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d22:	d047      	beq.n	8001db4 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe fc90 	bl	8000648 <HAL_GetTick>
 8001d28:	1b00      	subs	r0, r0, r4
 8001d2a:	2802      	cmp	r0, #2
 8001d2c:	d9f6      	bls.n	8001d1c <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8001d2e:	2003      	movs	r0, #3
 8001d30:	e059      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001d34:	69d3      	ldr	r3, [r2, #28]
 8001d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	61d3      	str	r3, [r2, #28]
 8001d3c:	e7dc      	b.n	8001cf8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <HAL_RCC_OscConfig+0x428>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d44:	f7fe fc80 	bl	8000648 <HAL_GetTick>
 8001d48:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	4e2a      	ldr	r6, [pc, #168]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001d4c:	6833      	ldr	r3, [r6, #0]
 8001d4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d52:	d006      	beq.n	8001d62 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe fc78 	bl	8000648 <HAL_GetTick>
 8001d58:	1b40      	subs	r0, r0, r5
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	d9f6      	bls.n	8001d4c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8001d5e:	2003      	movs	r0, #3
 8001d60:	e041      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d62:	6a23      	ldr	r3, [r4, #32]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d01a      	beq.n	8001da0 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6a:	4922      	ldr	r1, [pc, #136]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001d6c:	684a      	ldr	r2, [r1, #4]
 8001d6e:	6a23      	ldr	r3, [r4, #32]
 8001d70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d72:	4303      	orrs	r3, r0
 8001d74:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_RCC_OscConfig+0x428>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d82:	f7fe fc61 	bl	8000648 <HAL_GetTick>
 8001d86:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	4d1a      	ldr	r5, [pc, #104]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001d8a:	682b      	ldr	r3, [r5, #0]
 8001d8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d90:	d10e      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe fc59 	bl	8000648 <HAL_GetTick>
 8001d96:	1b00      	subs	r0, r0, r4
 8001d98:	2802      	cmp	r0, #2
 8001d9a:	d9f6      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	e022      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001da2:	6853      	ldr	r3, [r2, #4]
 8001da4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001da8:	68a1      	ldr	r1, [r4, #8]
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6053      	str	r3, [r2, #4]
 8001dae:	e7dc      	b.n	8001d6a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001db0:	2000      	movs	r0, #0
 8001db2:	e018      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
 8001db4:	2000      	movs	r0, #0
 8001db6:	e016      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d017      	beq.n	8001dec <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_RCC_OscConfig+0x424>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001dc4:	6a22      	ldr	r2, [r4, #32]
 8001dc6:	4291      	cmp	r1, r2
 8001dc8:	d112      	bne.n	8001df0 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dca:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001dd0:	1a18      	subs	r0, r3, r0
 8001dd2:	bf18      	it	ne
 8001dd4:	2001      	movne	r0, #1
 8001dd6:	e006      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
}
 8001dda:	4770      	bx	lr
        return HAL_ERROR;
 8001ddc:	2001      	movs	r0, #1
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8001de0:	2001      	movs	r0, #1
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001de4:	2000      	movs	r0, #0
}
 8001de6:	b002      	add	sp, #8
 8001de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001dec:	2001      	movs	r0, #1
 8001dee:	e7fa      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8001df0:	2001      	movs	r0, #1
 8001df2:	e7f8      	b.n	8001de6 <HAL_RCC_OscConfig+0x416>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	42420060 	.word	0x42420060

08001dfc <HAL_RCC_GetSysClockFreq>:
{
 8001dfc:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e02:	f10d 0c18 	add.w	ip, sp, #24
 8001e06:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e0a:	f240 2301 	movw	r3, #513	; 0x201
 8001e0e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x60>)
 8001e14:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	2a08      	cmp	r2, #8
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001e1e:	4810      	ldr	r0, [pc, #64]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001e20:	b006      	add	sp, #24
 8001e22:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e24:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001e28:	4462      	add	r2, ip
 8001e2a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x60>)
 8001e36:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e3a:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e3e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001e42:	4463      	add	r3, ip
 8001e44:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e48:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e4c:	e7e8      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x68>)
 8001e50:	fb00 f002 	mul.w	r0, r0, r2
 8001e54:	e7e4      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x24>
 8001e56:	bf00      	nop
 8001e58:	080045bc 	.word	0x080045bc
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	007a1200 	.word	0x007a1200
 8001e64:	003d0900 	.word	0x003d0900

08001e68 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	f000 80a2 	beq.w	8001fb2 <HAL_RCC_ClockConfig+0x14a>
{
 8001e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e72:	460d      	mov	r5, r1
 8001e74:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e76:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x15c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	428b      	cmp	r3, r1
 8001e80:	d20b      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4a50      	ldr	r2, [pc, #320]	; (8001fc4 <HAL_RCC_ClockConfig+0x15c>)
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	f023 0307 	bic.w	r3, r3, #7
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	428b      	cmp	r3, r1
 8001e96:	f040 808e 	bne.w	8001fb6 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	f013 0f02 	tst.w	r3, #2
 8001ea0:	d017      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	f013 0f04 	tst.w	r3, #4
 8001ea6:	d004      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea8:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001eaa:	6853      	ldr	r3, [r2, #4]
 8001eac:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb0:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	f013 0f08 	tst.w	r3, #8
 8001eb8:	d004      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eba:	4a43      	ldr	r2, [pc, #268]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001ebc:	6853      	ldr	r3, [r2, #4]
 8001ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ec2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4a40      	ldr	r2, [pc, #256]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001ec6:	6853      	ldr	r3, [r2, #4]
 8001ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ecc:	68a1      	ldr	r1, [r4, #8]
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	f013 0f01 	tst.w	r3, #1
 8001ed8:	d031      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eda:	6862      	ldr	r2, [r4, #4]
 8001edc:	2a01      	cmp	r2, #1
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee0:	2a02      	cmp	r2, #2
 8001ee2:	d025      	beq.n	8001f30 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f013 0f02 	tst.w	r3, #2
 8001eec:	d065      	beq.n	8001fba <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001ef0:	684b      	ldr	r3, [r1, #4]
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001efa:	f7fe fba5 	bl	8000648 <HAL_GetTick>
 8001efe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f00:	4f31      	ldr	r7, [pc, #196]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f02:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	6862      	ldr	r2, [r4, #4]
 8001f0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f12:	d014      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe fb98 	bl	8000648 <HAL_GetTick>
 8001f18:	1b80      	subs	r0, r0, r6
 8001f1a:	4540      	cmp	r0, r8
 8001f1c:	d9f3      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001f1e:	2003      	movs	r0, #3
 8001f20:	e045      	b.n	8001fae <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f2a:	d1e0      	bne.n	8001eee <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	e03e      	b.n	8001fae <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f38:	d1d9      	bne.n	8001eee <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	e037      	b.n	8001fae <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_ClockConfig+0x15c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	42ab      	cmp	r3, r5
 8001f48:	d90a      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_RCC_ClockConfig+0x15c>)
 8001f4c:	6813      	ldr	r3, [r2, #0]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	432b      	orrs	r3, r5
 8001f54:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	42ab      	cmp	r3, r5
 8001f5e:	d12e      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	f013 0f04 	tst.w	r3, #4
 8001f66:	d006      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001f6a:	6853      	ldr	r3, [r2, #4]
 8001f6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f70:	68e1      	ldr	r1, [r4, #12]
 8001f72:	430b      	orrs	r3, r1
 8001f74:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	f013 0f08 	tst.w	r3, #8
 8001f7c:	d007      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001f80:	6853      	ldr	r3, [r2, #4]
 8001f82:	6921      	ldr	r1, [r4, #16]
 8001f84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f8c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8e:	f7ff ff35 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_RCC_ClockConfig+0x160>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_ClockConfig+0x164>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	40d8      	lsrs	r0, r3
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x168>)
 8001fa2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x16c>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f7fe fb0a 	bl	80005c0 <HAL_InitTick>
  return HAL_OK;
 8001fac:	2000      	movs	r0, #0
}
 8001fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001fb2:	2001      	movs	r0, #1
}
 8001fb4:	4770      	bx	lr
    return HAL_ERROR;
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	e7f9      	b.n	8001fae <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8001fba:	2001      	movs	r0, #1
 8001fbc:	e7f7      	b.n	8001fae <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	e7f5      	b.n	8001fae <HAL_RCC_ClockConfig+0x146>
 8001fc2:	bf00      	nop
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	080045a4 	.word	0x080045a4
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000008 	.word	0x20000008

08001fd8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fe6:	6810      	ldr	r0, [r2, #0]
}
 8001fe8:	40d8      	lsrs	r0, r3
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	080045b4 	.word	0x080045b4
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002006:	6810      	ldr	r0, [r2, #0]
}
 8002008:	40d8      	lsrs	r0, r3
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	080045b4 	.word	0x080045b4
 8002014:	20000000 	.word	0x20000000

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002020:	6803      	ldr	r3, [r0, #0]
 8002022:	f013 0f01 	tst.w	r3, #1
 8002026:	d034      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002030:	d147      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800203a:	61da      	str	r2, [r3, #28]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002046:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002050:	d039      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002056:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800205a:	d011      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800205c:	6862      	ldr	r2, [r4, #4]
 800205e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002062:	429a      	cmp	r2, r3
 8002064:	d00c      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002066:	4a2f      	ldr	r2, [pc, #188]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002068:	6a13      	ldr	r3, [r2, #32]
 800206a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	492f      	ldr	r1, [pc, #188]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002070:	2601      	movs	r6, #1
 8002072:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002074:	2600      	movs	r6, #0
 8002076:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002078:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800207a:	f013 0f01 	tst.w	r3, #1
 800207e:	d136      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002080:	4a28      	ldr	r2, [pc, #160]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002082:	6a13      	ldr	r3, [r2, #32]
 8002084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002088:	6861      	ldr	r1, [r4, #4]
 800208a:	430b      	orrs	r3, r1
 800208c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800208e:	2d00      	cmp	r5, #0
 8002090:	d13e      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	f013 0f02 	tst.w	r3, #2
 8002098:	d006      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800209a:	4a22      	ldr	r2, [pc, #136]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800209c:	6853      	ldr	r3, [r2, #4]
 800209e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020a2:	68a1      	ldr	r1, [r4, #8]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	f013 0f10 	tst.w	r3, #16
 80020ae:	d034      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80020b2:	6853      	ldr	r3, [r2, #4]
 80020b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020b8:	68e1      	ldr	r1, [r4, #12]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020be:	2000      	movs	r0, #0
 80020c0:	e02c      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x104>
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2500      	movs	r5, #0
 80020c4:	e7c0      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80020c8:	6813      	ldr	r3, [r2, #0]
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80020d0:	f7fe faba 	bl	8000648 <HAL_GetTick>
 80020d4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4f14      	ldr	r7, [pc, #80]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020de:	d1b8      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe fab2 	bl	8000648 <HAL_GetTick>
 80020e4:	1b80      	subs	r0, r0, r6
 80020e6:	2864      	cmp	r0, #100	; 0x64
 80020e8:	d9f6      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80020ea:	2003      	movs	r0, #3
 80020ec:	e016      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x104>
        tickstart = HAL_GetTick();
 80020ee:	f7fe faab 	bl	8000648 <HAL_GetTick>
 80020f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	4f0b      	ldr	r7, [pc, #44]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f013 0f02 	tst.w	r3, #2
 8002100:	d1be      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe faa1 	bl	8000648 <HAL_GetTick>
 8002106:	1b80      	subs	r0, r0, r6
 8002108:	4540      	cmp	r0, r8
 800210a:	d9f6      	bls.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
 800210c:	2003      	movs	r0, #3
 800210e:	e005      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	69d3      	ldr	r3, [r2, #28]
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	e7bb      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 800211a:	2000      	movs	r0, #0
}
 800211c:	b002      	add	sp, #8
 800211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	42420440 	.word	0x42420440

08002130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002130:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002132:	6a03      	ldr	r3, [r0, #32]
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800213c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800213e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002140:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002144:	680d      	ldr	r5, [r1, #0]
 8002146:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002148:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800214c:	688d      	ldr	r5, [r1, #8]
 800214e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002150:	4d0b      	ldr	r5, [pc, #44]	; (8002180 <TIM_OC1_SetConfig+0x50>)
 8002152:	42a8      	cmp	r0, r5
 8002154:	d006      	beq.n	8002164 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002156:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002158:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800215a:	684a      	ldr	r2, [r1, #4]
 800215c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800215e:	6203      	str	r3, [r0, #32]
}
 8002160:	bc70      	pop	{r4, r5, r6}
 8002162:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002164:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002168:	68cd      	ldr	r5, [r1, #12]
 800216a:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800216c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002170:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002174:	694d      	ldr	r5, [r1, #20]
 8002176:	698e      	ldr	r6, [r1, #24]
 8002178:	4335      	orrs	r5, r6
 800217a:	432c      	orrs	r4, r5
 800217c:	e7eb      	b.n	8002156 <TIM_OC1_SetConfig+0x26>
 800217e:	bf00      	nop
 8002180:	40012c00 	.word	0x40012c00

08002184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002184:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002186:	6a03      	ldr	r3, [r0, #32]
 8002188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002190:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002192:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002194:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002198:	680d      	ldr	r5, [r1, #0]
 800219a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800219c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021a0:	688d      	ldr	r5, [r1, #8]
 80021a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021a6:	4d0c      	ldr	r5, [pc, #48]	; (80021d8 <TIM_OC3_SetConfig+0x54>)
 80021a8:	42a8      	cmp	r0, r5
 80021aa:	d006      	beq.n	80021ba <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021b0:	684a      	ldr	r2, [r1, #4]
 80021b2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b4:	6203      	str	r3, [r0, #32]
}
 80021b6:	bc70      	pop	{r4, r5, r6}
 80021b8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80021ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021be:	68cd      	ldr	r5, [r1, #12]
 80021c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80021c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021c8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021cc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021ce:	698e      	ldr	r6, [r1, #24]
 80021d0:	4335      	orrs	r5, r6
 80021d2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80021d6:	e7e9      	b.n	80021ac <TIM_OC3_SetConfig+0x28>
 80021d8:	40012c00 	.word	0x40012c00

080021dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021de:	6a03      	ldr	r3, [r0, #32]
 80021e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021ec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021f0:	680d      	ldr	r5, [r1, #0]
 80021f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021fa:	688d      	ldr	r5, [r1, #8]
 80021fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002200:	4d07      	ldr	r5, [pc, #28]	; (8002220 <TIM_OC4_SetConfig+0x44>)
 8002202:	42a8      	cmp	r0, r5
 8002204:	d006      	beq.n	8002214 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002206:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002208:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800220a:	684a      	ldr	r2, [r1, #4]
 800220c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220e:	6203      	str	r3, [r0, #32]
}
 8002210:	bc30      	pop	{r4, r5}
 8002212:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002214:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002218:	694d      	ldr	r5, [r1, #20]
 800221a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800221e:	e7f2      	b.n	8002206 <TIM_OC4_SetConfig+0x2a>
 8002220:	40012c00 	.word	0x40012c00

08002224 <HAL_TIM_PWM_MspInit>:
}
 8002224:	4770      	bx	lr
	...

08002228 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002228:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <TIM_Base_SetConfig+0x98>)
 800222c:	4290      	cmp	r0, r2
 800222e:	d014      	beq.n	800225a <TIM_Base_SetConfig+0x32>
 8002230:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002234:	d02b      	beq.n	800228e <TIM_Base_SetConfig+0x66>
 8002236:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800223a:	4290      	cmp	r0, r2
 800223c:	d022      	beq.n	8002284 <TIM_Base_SetConfig+0x5c>
 800223e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002242:	4290      	cmp	r0, r2
 8002244:	d037      	beq.n	80022b6 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224a:	694a      	ldr	r2, [r1, #20]
 800224c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800224e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	688b      	ldr	r3, [r1, #8]
 8002252:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002254:	680b      	ldr	r3, [r1, #0]
 8002256:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002258:	e02a      	b.n	80022b0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800225e:	684a      	ldr	r2, [r1, #4]
 8002260:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002266:	68ca      	ldr	r2, [r1, #12]
 8002268:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800226a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800226e:	694a      	ldr	r2, [r1, #20]
 8002270:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002272:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002274:	688b      	ldr	r3, [r1, #8]
 8002276:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002278:	680b      	ldr	r3, [r1, #0]
 800227a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800227c:	690a      	ldr	r2, [r1, #16]
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <TIM_Base_SetConfig+0x98>)
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
 8002282:	e015      	b.n	80022b0 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002288:	684a      	ldr	r2, [r1, #4]
 800228a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228c:	e003      	b.n	8002296 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002292:	684a      	ldr	r2, [r1, #4]
 8002294:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229a:	68ca      	ldr	r2, [r1, #12]
 800229c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800229e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a2:	694a      	ldr	r2, [r1, #20]
 80022a4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80022a6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a8:	688b      	ldr	r3, [r1, #8]
 80022aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022ac:	680b      	ldr	r3, [r1, #0]
 80022ae:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80022b0:	2301      	movs	r3, #1
 80022b2:	6143      	str	r3, [r0, #20]
}
 80022b4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022ba:	684a      	ldr	r2, [r1, #4]
 80022bc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	e7ea      	b.n	8002296 <TIM_Base_SetConfig+0x6e>
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80022c4:	b340      	cbz	r0, 8002318 <HAL_TIM_Base_Init+0x54>
{
 80022c6:	b510      	push	{r4, lr}
 80022c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80022ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022ce:	b1f3      	cbz	r3, 800230e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	2302      	movs	r3, #2
 80022d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d6:	4621      	mov	r1, r4
 80022d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80022dc:	f7ff ffa4 	bl	8002228 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80022ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80022ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80022f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002306:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800230a:	2000      	movs	r0, #0
}
 800230c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800230e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002312:	f7fe f84d 	bl	80003b0 <HAL_TIM_Base_MspInit>
 8002316:	e7db      	b.n	80022d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
}
 800231a:	4770      	bx	lr

0800231c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800231c:	b340      	cbz	r0, 8002370 <HAL_TIM_PWM_Init+0x54>
{
 800231e:	b510      	push	{r4, lr}
 8002320:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002322:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002326:	b1f3      	cbz	r3, 8002366 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	2302      	movs	r3, #2
 800232a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232e:	4621      	mov	r1, r4
 8002330:	f851 0b04 	ldr.w	r0, [r1], #4
 8002334:	f7ff ff78 	bl	8002228 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002338:	2301      	movs	r3, #1
 800233a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002342:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002346:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800234a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002356:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800235a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800235e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002362:	2000      	movs	r0, #0
}
 8002364:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002366:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800236a:	f7ff ff5b 	bl	8002224 <HAL_TIM_PWM_MspInit>
 800236e:	e7db      	b.n	8002328 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002370:	2001      	movs	r0, #1
}
 8002372:	4770      	bx	lr

08002374 <TIM_OC2_SetConfig>:
{
 8002374:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002376:	6a03      	ldr	r3, [r0, #32]
 8002378:	f023 0310 	bic.w	r3, r3, #16
 800237c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800237e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002380:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002382:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002384:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002388:	680d      	ldr	r5, [r1, #0]
 800238a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800238e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002392:	688d      	ldr	r5, [r1, #8]
 8002394:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002398:	4d0c      	ldr	r5, [pc, #48]	; (80023cc <TIM_OC2_SetConfig+0x58>)
 800239a:	42a8      	cmp	r0, r5
 800239c:	d006      	beq.n	80023ac <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800239e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80023a0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80023a2:	684a      	ldr	r2, [r1, #4]
 80023a4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80023a6:	6203      	str	r3, [r0, #32]
}
 80023a8:	bc70      	pop	{r4, r5, r6}
 80023aa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80023ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023b0:	68cd      	ldr	r5, [r1, #12]
 80023b2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80023b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023ba:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023be:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023c0:	698e      	ldr	r6, [r1, #24]
 80023c2:	4335      	orrs	r5, r6
 80023c4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80023c8:	e7e9      	b.n	800239e <TIM_OC2_SetConfig+0x2a>
 80023ca:	bf00      	nop
 80023cc:	40012c00 	.word	0x40012c00

080023d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80023d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80023d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d060      	beq.n	800249c <HAL_TIM_PWM_ConfigChannel+0xcc>
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
 80023de:	2301      	movs	r3, #1
 80023e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80023e4:	2a0c      	cmp	r2, #12
 80023e6:	d81a      	bhi.n	800241e <HAL_TIM_PWM_ConfigChannel+0x4e>
 80023e8:	e8df f002 	tbb	[pc, r2]
 80023ec:	19191907 	.word	0x19191907
 80023f0:	1919191d 	.word	0x1919191d
 80023f4:	19191931 	.word	0x19191931
 80023f8:	44          	.byte	0x44
 80023f9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023fa:	6800      	ldr	r0, [r0, #0]
 80023fc:	f7ff fe98 	bl	8002130 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002400:	6822      	ldr	r2, [r4, #0]
 8002402:	6993      	ldr	r3, [r2, #24]
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	6993      	ldr	r3, [r2, #24]
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	6993      	ldr	r3, [r2, #24]
 8002418:	6929      	ldr	r1, [r5, #16]
 800241a:	430b      	orrs	r3, r1
 800241c:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800241e:	2000      	movs	r0, #0
 8002420:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002424:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002426:	6800      	ldr	r0, [r0, #0]
 8002428:	f7ff ffa4 	bl	8002374 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	6993      	ldr	r3, [r2, #24]
 8002430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002434:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002436:	6822      	ldr	r2, [r4, #0]
 8002438:	6993      	ldr	r3, [r2, #24]
 800243a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800243e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002440:	6822      	ldr	r2, [r4, #0]
 8002442:	6993      	ldr	r3, [r2, #24]
 8002444:	6929      	ldr	r1, [r5, #16]
 8002446:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800244a:	6193      	str	r3, [r2, #24]
      break;
 800244c:	e7e7      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800244e:	6800      	ldr	r0, [r0, #0]
 8002450:	f7ff fe98 	bl	8002184 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	69d3      	ldr	r3, [r2, #28]
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800245e:	6822      	ldr	r2, [r4, #0]
 8002460:	69d3      	ldr	r3, [r2, #28]
 8002462:	f023 0304 	bic.w	r3, r3, #4
 8002466:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002468:	6822      	ldr	r2, [r4, #0]
 800246a:	69d3      	ldr	r3, [r2, #28]
 800246c:	6929      	ldr	r1, [r5, #16]
 800246e:	430b      	orrs	r3, r1
 8002470:	61d3      	str	r3, [r2, #28]
      break;
 8002472:	e7d4      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002474:	6800      	ldr	r0, [r0, #0]
 8002476:	f7ff feb1 	bl	80021dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800247a:	6822      	ldr	r2, [r4, #0]
 800247c:	69d3      	ldr	r3, [r2, #28]
 800247e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002482:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002484:	6822      	ldr	r2, [r4, #0]
 8002486:	69d3      	ldr	r3, [r2, #28]
 8002488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	69d3      	ldr	r3, [r2, #28]
 8002492:	6929      	ldr	r1, [r5, #16]
 8002494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002498:	61d3      	str	r3, [r2, #28]
      break;
 800249a:	e7c0      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 800249c:	2002      	movs	r0, #2
 800249e:	e7c1      	b.n	8002424 <HAL_TIM_PWM_ConfigChannel+0x54>

080024a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024a0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a8:	430a      	orrs	r2, r1
 80024aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80024ae:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b0:	6082      	str	r2, [r0, #8]
}
 80024b2:	bc10      	pop	{r4}
 80024b4:	4770      	bx	lr

080024b6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80024b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f000 809c 	beq.w	80025f8 <HAL_TIM_ConfigClockSource+0x142>
{
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80024c4:	2301      	movs	r3, #1
 80024c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80024d0:	6802      	ldr	r2, [r0, #0]
 80024d2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80024dc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80024de:	680b      	ldr	r3, [r1, #0]
 80024e0:	2b60      	cmp	r3, #96	; 0x60
 80024e2:	d054      	beq.n	800258e <HAL_TIM_ConfigClockSource+0xd8>
 80024e4:	d836      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x9e>
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d06c      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0x10e>
 80024ea:	d91b      	bls.n	8002524 <HAL_TIM_ConfigClockSource+0x6e>
 80024ec:	2b50      	cmp	r3, #80	; 0x50
 80024ee:	d12a      	bne.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f0:	6803      	ldr	r3, [r0, #0]
 80024f2:	6848      	ldr	r0, [r1, #4]
 80024f4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80024f6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f8:	6a1d      	ldr	r5, [r3, #32]
 80024fa:	f025 0501 	bic.w	r5, r5, #1
 80024fe:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002500:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002502:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002506:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800250a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800250e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002512:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002514:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002516:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800251c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002520:	6093      	str	r3, [r2, #8]
}
 8002522:	e010      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8002524:	2b20      	cmp	r3, #32
 8002526:	d002      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x78>
 8002528:	d90a      	bls.n	8002540 <HAL_TIM_ConfigClockSource+0x8a>
 800252a:	2b30      	cmp	r3, #48	; 0x30
 800252c:	d10b      	bne.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002530:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002532:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002536:	4313      	orrs	r3, r2
 8002538:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800253c:	608b      	str	r3, [r1, #8]
}
 800253e:	e002      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8002540:	f033 0210 	bics.w	r2, r3, #16
 8002544:	d0f3      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 8002546:	2301      	movs	r3, #1
 8002548:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800254c:	2000      	movs	r0, #0
 800254e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002552:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002554:	2b70      	cmp	r3, #112	; 0x70
 8002556:	d00e      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0xc0>
 8002558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255c:	d1f3      	bne.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	684a      	ldr	r2, [r1, #4]
 8002562:	6889      	ldr	r1, [r1, #8]
 8002564:	6800      	ldr	r0, [r0, #0]
 8002566:	f7ff ff9b 	bl	80024a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800256a:	6822      	ldr	r2, [r4, #0]
 800256c:	6893      	ldr	r3, [r2, #8]
 800256e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002572:	6093      	str	r3, [r2, #8]
      break;
 8002574:	e7e7      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8002576:	68cb      	ldr	r3, [r1, #12]
 8002578:	684a      	ldr	r2, [r1, #4]
 800257a:	6889      	ldr	r1, [r1, #8]
 800257c:	6800      	ldr	r0, [r0, #0]
 800257e:	f7ff ff8f 	bl	80024a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002586:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800258a:	6093      	str	r3, [r2, #8]
      break;
 800258c:	e7db      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800258e:	6803      	ldr	r3, [r0, #0]
 8002590:	684d      	ldr	r5, [r1, #4]
 8002592:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002594:	6a18      	ldr	r0, [r3, #32]
 8002596:	f020 0010 	bic.w	r0, r0, #16
 800259a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800259e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025a0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025a4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80025b0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b2:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025b4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80025b6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025bc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80025c0:	6093      	str	r3, [r2, #8]
}
 80025c2:	e7c0      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c4:	6803      	ldr	r3, [r0, #0]
 80025c6:	6848      	ldr	r0, [r1, #4]
 80025c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80025ca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025cc:	6a1d      	ldr	r5, [r3, #32]
 80025ce:	f025 0501 	bic.w	r5, r5, #1
 80025d2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025da:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025de:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80025e2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80025e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025e8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80025ea:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80025f4:	6093      	str	r3, [r2, #8]
}
 80025f6:	e7a6      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 80025f8:	2002      	movs	r0, #2
}
 80025fa:	4770      	bx	lr

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002600:	2b01      	cmp	r3, #1
 8002602:	d02b      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8002604:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002606:	2301      	movs	r3, #1
 8002608:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002612:	6804      	ldr	r4, [r0, #0]
 8002614:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002616:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800261c:	680d      	ldr	r5, [r1, #0]
 800261e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002620:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002622:	6803      	ldr	r3, [r0, #0]
 8002624:	4c0e      	ldr	r4, [pc, #56]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002626:	42a3      	cmp	r3, r4
 8002628:	d00a      	beq.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800262a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262e:	d007      	beq.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002630:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002634:	42a3      	cmp	r3, r4
 8002636:	d003      	beq.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002638:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800263c:	42a3      	cmp	r3, r4
 800263e:	d104      	bne.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002644:	6849      	ldr	r1, [r1, #4]
 8002646:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800264a:	2301      	movs	r3, #1
 800264c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002650:	2300      	movs	r3, #0
 8002652:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002656:	4618      	mov	r0, r3
}
 8002658:	bc30      	pop	{r4, r5}
 800265a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800265c:	2002      	movs	r0, #2
}
 800265e:	4770      	bx	lr
 8002660:	40012c00 	.word	0x40012c00

08002664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	b510      	push	{r4, lr}
 8002666:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002668:	6802      	ldr	r2, [r0, #0]
 800266a:	6913      	ldr	r3, [r2, #16]
 800266c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002670:	68c1      	ldr	r1, [r0, #12]
 8002672:	430b      	orrs	r3, r1
 8002674:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8002676:	6801      	ldr	r1, [r0, #0]
 8002678:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800267a:	6883      	ldr	r3, [r0, #8]
 800267c:	6900      	ldr	r0, [r0, #16]
 800267e:	4303      	orrs	r3, r0
 8002680:	6960      	ldr	r0, [r4, #20]
 8002682:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002684:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002688:	f022 020c 	bic.w	r2, r2, #12
 800268c:	4313      	orrs	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	6953      	ldr	r3, [r2, #20]
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	69a1      	ldr	r1, [r4, #24]
 800269a:	430b      	orrs	r3, r1
 800269c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <UART_SetConfig+0x80>)
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d01a      	beq.n	80026dc <UART_SetConfig+0x78>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026a6:	f7ff fc97 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	6824      	ldr	r4, [r4, #0]
 80026bc:	480a      	ldr	r0, [pc, #40]	; (80026e8 <UART_SetConfig+0x84>)
 80026be:	fba0 2103 	umull	r2, r1, r0, r3
 80026c2:	0949      	lsrs	r1, r1, #5
 80026c4:	2264      	movs	r2, #100	; 0x64
 80026c6:	fb02 3311 	mls	r3, r2, r1, r3
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	3332      	adds	r3, #50	; 0x32
 80026ce:	fba0 2303 	umull	r2, r3, r0, r3
 80026d2:	0109      	lsls	r1, r1, #4
 80026d4:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 80026d8:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 80026da:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80026dc:	f7ff fc8c 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 80026e0:	e7e3      	b.n	80026aa <UART_SetConfig+0x46>
 80026e2:	bf00      	nop
 80026e4:	40013800 	.word	0x40013800
 80026e8:	51eb851f 	.word	0x51eb851f

080026ec <HAL_UART_Init>:
  if (huart == NULL)
 80026ec:	b358      	cbz	r0, 8002746 <HAL_UART_Init+0x5a>
{
 80026ee:	b510      	push	{r4, lr}
 80026f0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80026f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026f6:	b30b      	cbz	r3, 800273c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	2324      	movs	r3, #36	; 0x24
 80026fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80026fe:	6822      	ldr	r2, [r4, #0]
 8002700:	68d3      	ldr	r3, [r2, #12]
 8002702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002706:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff ffab 	bl	8002664 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	6913      	ldr	r3, [r2, #16]
 8002712:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002716:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	6953      	ldr	r3, [r2, #20]
 800271c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002720:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002722:	6822      	ldr	r2, [r4, #0]
 8002724:	68d3      	ldr	r3, [r2, #12]
 8002726:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800272a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	2000      	movs	r0, #0
 800272e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002730:	2320      	movs	r3, #32
 8002732:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002736:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800273a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800273c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002740:	f7fd feae 	bl	80004a0 <HAL_UART_MspInit>
 8002744:	e7d8      	b.n	80026f8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002746:	2001      	movs	r0, #1
}
 8002748:	4770      	bx	lr

0800274a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800274a:	b084      	sub	sp, #16
 800274c:	a801      	add	r0, sp, #4
 800274e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002752:	2000      	movs	r0, #0
 8002754:	b004      	add	sp, #16
 8002756:	4770      	bx	lr

08002758 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002758:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800275a:	2000      	movs	r0, #0
 800275c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002760:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8002764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8002768:	4770      	bx	lr

0800276a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800276a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800276e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002772:	045b      	lsls	r3, r3, #17
 8002774:	0c5b      	lsrs	r3, r3, #17
 8002776:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800277a:	2000      	movs	r0, #0
 800277c:	4770      	bx	lr

0800277e <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800277e:	2000      	movs	r0, #0
 8002780:	4770      	bx	lr

08002782 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002782:	b084      	sub	sp, #16
 8002784:	b410      	push	{r4}
 8002786:	4604      	mov	r4, r0
 8002788:	a802      	add	r0, sp, #8
 800278a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800278e:	2301      	movs	r3, #1
 8002790:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002794:	2000      	movs	r0, #0
 8002796:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800279a:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800279e:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80027a2:	bc10      	pop	{r4}
 80027a4:	b004      	add	sp, #16
 80027a6:	4770      	bx	lr

080027a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027a8:	b470      	push	{r4, r5, r6}
 80027aa:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80027ac:	780d      	ldrb	r5, [r1, #0]
 80027ae:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80027b2:	b292      	uxth	r2, r2
 80027b4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80027b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027bc:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 80027be:	78c8      	ldrb	r0, [r1, #3]
 80027c0:	2803      	cmp	r0, #3
 80027c2:	d85b      	bhi.n	800287c <USB_ActivateEndpoint+0xd4>
 80027c4:	e8df f000 	tbb	[pc, r0]
 80027c8:	5202564f 	.word	0x5202564f
 80027cc:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80027ce:	f248 0480 	movw	r4, #32896	; 0x8080
 80027d2:	4322      	orrs	r2, r4
 80027d4:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80027d8:	780d      	ldrb	r5, [r1, #0]
 80027da:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80027de:	b292      	uxth	r2, r2
 80027e0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027e8:	432a      	orrs	r2, r5
 80027ea:	4322      	orrs	r2, r4
 80027ec:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 80027f0:	7b0a      	ldrb	r2, [r1, #12]
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	f040 80a3 	bne.w	800293e <USB_ActivateEndpoint+0x196>
  {
    if (ep->is_in != 0U)
 80027f8:	784a      	ldrb	r2, [r1, #1]
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d040      	beq.n	8002880 <USB_ActivateEndpoint+0xd8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80027fe:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002802:	b2ad      	uxth	r5, r5
 8002804:	780a      	ldrb	r2, [r1, #0]
 8002806:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800280a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800280e:	88cc      	ldrh	r4, [r1, #6]
 8002810:	0864      	lsrs	r4, r4, #1
 8002812:	0064      	lsls	r4, r4, #1
 8002814:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002816:	780c      	ldrb	r4, [r1, #0]
 8002818:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800281c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002820:	d00c      	beq.n	800283c <USB_ActivateEndpoint+0x94>
 8002822:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002826:	b292      	uxth	r2, r2
 8002828:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800282c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002834:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002838:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800283c:	78ca      	ldrb	r2, [r1, #3]
 800283e:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002840:	7809      	ldrb	r1, [r1, #0]
 8002842:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002846:	b292      	uxth	r2, r2
 8002848:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800284c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002850:	bf18      	it	ne
 8002852:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800285a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800285e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002862:	bc70      	pop	{r4, r5, r6}
 8002864:	4770      	bx	lr
      wEpRegVal |= USB_EP_CONTROL;
 8002866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800286a:	e7b0      	b.n	80027ce <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 800286c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002870:	2000      	movs	r0, #0
      break;
 8002872:	e7ac      	b.n	80027ce <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8002878:	2000      	movs	r0, #0
      break;
 800287a:	e7a8      	b.n	80027ce <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 800287c:	2001      	movs	r0, #1
 800287e:	e7a6      	b.n	80027ce <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002880:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002884:	b2ad      	uxth	r5, r5
 8002886:	780a      	ldrb	r2, [r1, #0]
 8002888:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800288c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002890:	88cc      	ldrh	r4, [r1, #6]
 8002892:	0864      	lsrs	r4, r4, #1
 8002894:	0064      	lsls	r4, r4, #1
 8002896:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002898:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800289c:	b2ad      	uxth	r5, r5
 800289e:	780a      	ldrb	r2, [r1, #0]
 80028a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80028a4:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80028a8:	690c      	ldr	r4, [r1, #16]
 80028aa:	bb84      	cbnz	r4, 800290e <USB_ActivateEndpoint+0x166>
 80028ac:	5b54      	ldrh	r4, [r2, r5]
 80028ae:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80028b2:	0424      	lsls	r4, r4, #16
 80028b4:	0c24      	lsrs	r4, r4, #16
 80028b6:	5354      	strh	r4, [r2, r5]
 80028b8:	5b54      	ldrh	r4, [r2, r5]
 80028ba:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80028be:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80028c2:	b2a4      	uxth	r4, r4
 80028c4:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028c6:	780c      	ldrb	r4, [r1, #0]
 80028c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028cc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80028d0:	d00c      	beq.n	80028ec <USB_ActivateEndpoint+0x144>
 80028d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028d6:	b292      	uxth	r2, r2
 80028d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80028dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80028e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028ec:	7809      	ldrb	r1, [r1, #0]
 80028ee:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80028f2:	b292      	uxth	r2, r2
 80028f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028fc:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002904:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002908:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800290c:	e7a9      	b.n	8002862 <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800290e:	2c3e      	cmp	r4, #62	; 0x3e
 8002910:	d808      	bhi.n	8002924 <USB_ActivateEndpoint+0x17c>
 8002912:	0866      	lsrs	r6, r4, #1
 8002914:	f014 0f01 	tst.w	r4, #1
 8002918:	bf18      	it	ne
 800291a:	3601      	addne	r6, #1
 800291c:	02b6      	lsls	r6, r6, #10
 800291e:	b2b6      	uxth	r6, r6
 8002920:	5356      	strh	r6, [r2, r5]
 8002922:	e7d0      	b.n	80028c6 <USB_ActivateEndpoint+0x11e>
 8002924:	0966      	lsrs	r6, r4, #5
 8002926:	f014 0f1f 	tst.w	r4, #31
 800292a:	bf08      	it	eq
 800292c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002930:	ea6f 64c6 	mvn.w	r4, r6, lsl #27
 8002934:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002938:	b2a4      	uxth	r4, r4
 800293a:	5354      	strh	r4, [r2, r5]
 800293c:	e7c3      	b.n	80028c6 <USB_ActivateEndpoint+0x11e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800293e:	780c      	ldrb	r4, [r1, #0]
 8002940:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002944:	b292      	uxth	r2, r2
 8002946:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800294a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800294e:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002956:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800295a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800295e:	b2ad      	uxth	r5, r5
 8002960:	780a      	ldrb	r2, [r1, #0]
 8002962:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800296a:	890c      	ldrh	r4, [r1, #8]
 800296c:	0864      	lsrs	r4, r4, #1
 800296e:	0064      	lsls	r4, r4, #1
 8002970:	5354      	strh	r4, [r2, r5]
 8002972:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002976:	b2ad      	uxth	r5, r5
 8002978:	780a      	ldrb	r2, [r1, #0]
 800297a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800297e:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002982:	894c      	ldrh	r4, [r1, #10]
 8002984:	0864      	lsrs	r4, r4, #1
 8002986:	0064      	lsls	r4, r4, #1
 8002988:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 800298a:	784a      	ldrb	r2, [r1, #1]
 800298c:	2a00      	cmp	r2, #0
 800298e:	d140      	bne.n	8002a12 <USB_ActivateEndpoint+0x26a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002990:	780c      	ldrb	r4, [r1, #0]
 8002992:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002996:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800299a:	d00c      	beq.n	80029b6 <USB_ActivateEndpoint+0x20e>
 800299c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029a0:	b292      	uxth	r2, r2
 80029a2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80029a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029b6:	780c      	ldrb	r4, [r1, #0]
 80029b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80029c0:	d00c      	beq.n	80029dc <USB_ActivateEndpoint+0x234>
 80029c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029c6:	b292      	uxth	r2, r2
 80029c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80029cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80029d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029dc:	780d      	ldrb	r5, [r1, #0]
 80029de:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80029e2:	b292      	uxth	r2, r2
 80029e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029ec:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80029f0:	f248 0480 	movw	r4, #32896	; 0x8080
 80029f4:	4322      	orrs	r2, r4
 80029f6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029fa:	7809      	ldrb	r1, [r1, #0]
 80029fc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002a00:	b292      	uxth	r2, r2
 8002a02:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0a:	4322      	orrs	r2, r4
 8002a0c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002a10:	e727      	b.n	8002862 <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a12:	780c      	ldrb	r4, [r1, #0]
 8002a14:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a18:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002a1c:	d00c      	beq.n	8002a38 <USB_ActivateEndpoint+0x290>
 8002a1e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a22:	b292      	uxth	r2, r2
 8002a24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a2c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a34:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a38:	780c      	ldrb	r4, [r1, #0]
 8002a3a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a3e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a42:	d00c      	beq.n	8002a5e <USB_ActivateEndpoint+0x2b6>
 8002a44:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a56:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002a5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002a5e:	78ca      	ldrb	r2, [r1, #3]
 8002a60:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a62:	780c      	ldrb	r4, [r1, #0]
 8002a64:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a72:	bf18      	it	ne
 8002a74:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a84:	7809      	ldrb	r1, [r1, #0]
 8002a86:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a9c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002aa0:	e6df      	b.n	8002862 <USB_ActivateEndpoint+0xba>

08002aa2 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002aa2:	7b0b      	ldrb	r3, [r1, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d146      	bne.n	8002b36 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8002aa8:	784b      	ldrb	r3, [r1, #1]
 8002aaa:	b313      	cbz	r3, 8002af2 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002aac:	780a      	ldrb	r2, [r1, #0]
 8002aae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ab2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ab6:	d00c      	beq.n	8002ad2 <USB_DeactivateEndpoint+0x30>
 8002ab8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ace:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ad2:	780a      	ldrb	r2, [r1, #0]
 8002ad4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002aee:	2000      	movs	r0, #0
 8002af0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002af2:	780a      	ldrb	r2, [r1, #0]
 8002af4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002af8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002afc:	d00c      	beq.n	8002b18 <USB_DeactivateEndpoint+0x76>
 8002afe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b18:	780a      	ldrb	r2, [r1, #0]
 8002b1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002b34:	e7db      	b.n	8002aee <USB_DeactivateEndpoint+0x4c>
{
 8002b36:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8002b38:	784b      	ldrb	r3, [r1, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d14e      	bne.n	8002bdc <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b3e:	780a      	ldrb	r2, [r1, #0]
 8002b40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b44:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002b48:	d00c      	beq.n	8002b64 <USB_DeactivateEndpoint+0xc2>
 8002b4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b60:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b64:	780a      	ldrb	r2, [r1, #0]
 8002b66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b6e:	d00c      	beq.n	8002b8a <USB_DeactivateEndpoint+0xe8>
 8002b70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002b8a:	780a      	ldrb	r2, [r1, #0]
 8002b8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ba2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ba6:	780c      	ldrb	r4, [r1, #0]
 8002ba8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	f248 0280 	movw	r2, #32896	; 0x8080
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bc0:	7809      	ldrb	r1, [r1, #0]
 8002bc2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bc10      	pop	{r4}
 8002bda:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bdc:	780a      	ldrb	r2, [r1, #0]
 8002bde:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002be2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002be6:	d00c      	beq.n	8002c02 <USB_DeactivateEndpoint+0x160>
 8002be8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c02:	780a      	ldrb	r2, [r1, #0]
 8002c04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c0c:	d00c      	beq.n	8002c28 <USB_DeactivateEndpoint+0x186>
 8002c0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002c28:	780a      	ldrb	r2, [r1, #0]
 8002c2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c44:	780c      	ldrb	r4, [r1, #0]
 8002c46:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c54:	f248 0280 	movw	r2, #32896	; 0x8080
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c5e:	7809      	ldrb	r1, [r1, #0]
 8002c60:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002c74:	e7af      	b.n	8002bd6 <USB_DeactivateEndpoint+0x134>

08002c76 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002c76:	784b      	ldrb	r3, [r1, #1]
 8002c78:	b18b      	cbz	r3, 8002c9e <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002c7a:	780a      	ldrb	r2, [r1, #0]
 8002c7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8a:	f083 0310 	eor.w	r3, r3, #16
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002c9e:	780a      	ldrb	r2, [r1, #0]
 8002ca0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002cbe:	e7ec      	b.n	8002c9a <USB_EPSetStall+0x24>

08002cc0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002cc0:	7b0b      	ldrb	r3, [r1, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d14b      	bne.n	8002d5e <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8002cc6:	784b      	ldrb	r3, [r1, #1]
 8002cc8:	b333      	cbz	r3, 8002d18 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cca:	780a      	ldrb	r2, [r1, #0]
 8002ccc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002cd4:	d00c      	beq.n	8002cf0 <USB_EPClearStall+0x30>
 8002cd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002cf0:	78cb      	ldrb	r3, [r1, #3]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d033      	beq.n	8002d5e <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002cf6:	780a      	ldrb	r2, [r1, #0]
 8002cf8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d06:	f083 0320 	eor.w	r3, r3, #32
 8002d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d12:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002d16:	e022      	b.n	8002d5e <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d18:	780a      	ldrb	r2, [r1, #0]
 8002d1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d1e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002d22:	d00c      	beq.n	8002d3e <USB_EPClearStall+0x7e>
 8002d24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d3e:	780a      	ldrb	r2, [r1, #0]
 8002d40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002d5e:	2000      	movs	r0, #0
 8002d60:	4770      	bx	lr

08002d62 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002d62:	b911      	cbnz	r1, 8002d6a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	4770      	bx	lr

08002d6e <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002d6e:	2000      	movs	r0, #0
 8002d70:	4770      	bx	lr

08002d72 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002d72:	2000      	movs	r0, #0
 8002d74:	4770      	bx	lr

08002d76 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002d76:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002d7a:	b280      	uxth	r0, r0
 8002d7c:	4770      	bx	lr

08002d7e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d7e:	2000      	movs	r0, #0
 8002d80:	4770      	bx	lr

08002d82 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002d82:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002d84:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d86:	eb00 0442 	add.w	r4, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	d010      	beq.n	8002db0 <USB_WritePMA+0x2e>
 8002d8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d92:	4622      	mov	r2, r4
 8002d94:	3102      	adds	r1, #2
 8002d96:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002d9a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 8002d9e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 8002da2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002da6:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 8002daa:	3102      	adds	r1, #2
 8002dac:	4294      	cmp	r4, r2
 8002dae:	d1f4      	bne.n	8002d9a <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002db0:	bc10      	pop	{r4}
 8002db2:	4770      	bx	lr

08002db4 <USB_EPStartXfer>:
{
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	4605      	mov	r5, r0
 8002db8:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8002dba:	784b      	ldrb	r3, [r1, #1]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d035      	beq.n	8002e2c <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 8002dc0:	7b0a      	ldrb	r2, [r1, #12]
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	f040 821b 	bne.w	80031fe <USB_EPStartXfer+0x44a>
      if (ep->xfer_len > ep->maxpacket)
 8002dc8:	698a      	ldr	r2, [r1, #24]
 8002dca:	690b      	ldr	r3, [r1, #16]
 8002dcc:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8002dce:	bf86      	itte	hi
 8002dd0:	1ad1      	subhi	r1, r2, r3
        len = ep->maxpacket;
 8002dd2:	461a      	movhi	r2, r3
        ep->xfer_len = 0U;
 8002dd4:	2100      	movls	r1, #0
 8002dd6:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002dd8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002de2:	4418      	add	r0, r3
 8002de4:	7823      	ldrb	r3, [r4, #0]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	f040 81f0 	bne.w	80031ce <USB_EPStartXfer+0x41a>
 8002dee:	5ac2      	ldrh	r2, [r0, r3]
 8002df0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002df4:	0412      	lsls	r2, r2, #16
 8002df6:	0c12      	lsrs	r2, r2, #16
 8002df8:	52c2      	strh	r2, [r0, r3]
 8002dfa:	5ac2      	ldrh	r2, [r0, r3]
 8002dfc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002e00:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e04:	b292      	uxth	r2, r2
 8002e06:	52c2      	strh	r2, [r0, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e08:	7822      	ldrb	r2, [r4, #0]
 8002e0a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e18:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e24:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002e28:	2000      	movs	r0, #0
}
 8002e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8002e2c:	690a      	ldr	r2, [r1, #16]
 8002e2e:	698e      	ldr	r6, [r1, #24]
 8002e30:	4296      	cmp	r6, r2
 8002e32:	bf28      	it	cs
 8002e34:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8002e36:	7b0b      	ldrb	r3, [r1, #12]
 8002e38:	b35b      	cbz	r3, 8002e92 <USB_EPStartXfer+0xde>
      if (ep->type == EP_TYPE_BULK)
 8002e3a:	78cb      	ldrb	r3, [r1, #3]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d049      	beq.n	8002ed4 <USB_EPStartXfer+0x120>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002e40:	780b      	ldrb	r3, [r1, #0]
 8002e42:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e46:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e4a:	f000 81a3 	beq.w	8003194 <USB_EPStartXfer+0x3e0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e4e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e52:	b291      	uxth	r1, r2
 8002e54:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002e58:	440a      	add	r2, r1
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	b2b1      	uxth	r1, r6
 8002e5e:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr1;
 8002e60:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e62:	b2b3      	uxth	r3, r6
 8002e64:	6961      	ldr	r1, [r4, #20]
 8002e66:	4628      	mov	r0, r5
 8002e68:	f7ff ff8b 	bl	8002d82 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002e6c:	7863      	ldrb	r3, [r4, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 819b 	bne.w	80031aa <USB_EPStartXfer+0x3f6>
 8002e74:	7822      	ldrb	r2, [r4, #0]
 8002e76:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e8c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002e90:	e00e      	b.n	8002eb0 <USB_EPStartXfer+0xfc>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002e92:	b2b6      	uxth	r6, r6
 8002e94:	4633      	mov	r3, r6
 8002e96:	88ca      	ldrh	r2, [r1, #6]
 8002e98:	6949      	ldr	r1, [r1, #20]
 8002e9a:	f7ff ff72 	bl	8002d82 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002e9e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002ea2:	b299      	uxth	r1, r3
 8002ea4:	7822      	ldrb	r2, [r4, #0]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8002eac:	440b      	add	r3, r1
 8002eae:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002eb0:	7822      	ldrb	r2, [r4, #0]
 8002eb2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ecc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	e7aa      	b.n	8002e2a <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 8002ed4:	6a0b      	ldr	r3, [r1, #32]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f080 813e 	bcs.w	8003158 <USB_EPStartXfer+0x3a4>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002edc:	780a      	ldrb	r2, [r1, #0]
 8002ede:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8002ef8:	6a0b      	ldr	r3, [r1, #32]
 8002efa:	1b9b      	subs	r3, r3, r6
 8002efc:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002efe:	780b      	ldrb	r3, [r1, #0]
 8002f00:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f08:	f000 8093 	beq.w	8003032 <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f0c:	784a      	ldrb	r2, [r1, #1]
 8002f0e:	bb6a      	cbnz	r2, 8002f6c <USB_EPStartXfer+0x1b8>
 8002f10:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f14:	b292      	uxth	r2, r2
 8002f16:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8002f1a:	4411      	add	r1, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	b96e      	cbnz	r6, 8002f3c <USB_EPStartXfer+0x188>
 8002f20:	5aca      	ldrh	r2, [r1, r3]
 8002f22:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002f26:	0412      	lsls	r2, r2, #16
 8002f28:	0c12      	lsrs	r2, r2, #16
 8002f2a:	52ca      	strh	r2, [r1, r3]
 8002f2c:	5aca      	ldrh	r2, [r1, r3]
 8002f2e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002f32:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002f36:	b292      	uxth	r2, r2
 8002f38:	52ca      	strh	r2, [r1, r3]
 8002f3a:	e019      	b.n	8002f70 <USB_EPStartXfer+0x1bc>
 8002f3c:	2e3e      	cmp	r6, #62	; 0x3e
 8002f3e:	d808      	bhi.n	8002f52 <USB_EPStartXfer+0x19e>
 8002f40:	0872      	lsrs	r2, r6, #1
 8002f42:	f016 0f01 	tst.w	r6, #1
 8002f46:	bf18      	it	ne
 8002f48:	3201      	addne	r2, #1
 8002f4a:	0292      	lsls	r2, r2, #10
 8002f4c:	b292      	uxth	r2, r2
 8002f4e:	52ca      	strh	r2, [r1, r3]
 8002f50:	e00e      	b.n	8002f70 <USB_EPStartXfer+0x1bc>
 8002f52:	0972      	lsrs	r2, r6, #5
 8002f54:	f016 0f1f 	tst.w	r6, #31
 8002f58:	bf08      	it	eq
 8002f5a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002f5e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002f62:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002f66:	b292      	uxth	r2, r2
 8002f68:	52ca      	strh	r2, [r1, r3]
 8002f6a:	e001      	b.n	8002f70 <USB_EPStartXfer+0x1bc>
 8002f6c:	2a01      	cmp	r2, #1
 8002f6e:	d02a      	beq.n	8002fc6 <USB_EPStartXfer+0x212>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002f70:	b2b3      	uxth	r3, r6
 8002f72:	8962      	ldrh	r2, [r4, #10]
 8002f74:	6961      	ldr	r1, [r4, #20]
 8002f76:	4628      	mov	r0, r5
 8002f78:	f7ff ff03 	bl	8002d82 <USB_WritePMA>
            ep->xfer_buff += len;
 8002f7c:	6963      	ldr	r3, [r4, #20]
 8002f7e:	4433      	add	r3, r6
 8002f80:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002f82:	6a23      	ldr	r3, [r4, #32]
 8002f84:	6922      	ldr	r2, [r4, #16]
 8002f86:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8002f88:	bf86      	itte	hi
 8002f8a:	1b9a      	subhi	r2, r3, r6
 8002f8c:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8002f8e:	2200      	movls	r2, #0
 8002f90:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002f92:	7862      	ldrb	r2, [r4, #1]
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	d138      	bne.n	800300a <USB_EPStartXfer+0x256>
 8002f98:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	7820      	ldrb	r0, [r4, #0]
 8002fa0:	0100      	lsls	r0, r0, #4
 8002fa2:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8002fa6:	440a      	add	r2, r1
 8002fa8:	b9bb      	cbnz	r3, 8002fda <USB_EPStartXfer+0x226>
 8002faa:	5a81      	ldrh	r1, [r0, r2]
 8002fac:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002fb0:	0409      	lsls	r1, r1, #16
 8002fb2:	0c09      	lsrs	r1, r1, #16
 8002fb4:	5281      	strh	r1, [r0, r2]
 8002fb6:	5a81      	ldrh	r1, [r0, r2]
 8002fb8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002fbc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002fc0:	b289      	uxth	r1, r1
 8002fc2:	5281      	strh	r1, [r0, r2]
 8002fc4:	e023      	b.n	800300e <USB_EPStartXfer+0x25a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002fc6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002fca:	b291      	uxth	r1, r2
 8002fcc:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002fd0:	440a      	add	r2, r1
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	b2b1      	uxth	r1, r6
 8002fd6:	52d1      	strh	r1, [r2, r3]
 8002fd8:	e7ca      	b.n	8002f70 <USB_EPStartXfer+0x1bc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002fda:	2b3e      	cmp	r3, #62	; 0x3e
 8002fdc:	d808      	bhi.n	8002ff0 <USB_EPStartXfer+0x23c>
 8002fde:	0859      	lsrs	r1, r3, #1
 8002fe0:	f013 0f01 	tst.w	r3, #1
 8002fe4:	bf18      	it	ne
 8002fe6:	3101      	addne	r1, #1
 8002fe8:	0289      	lsls	r1, r1, #10
 8002fea:	b289      	uxth	r1, r1
 8002fec:	5281      	strh	r1, [r0, r2]
 8002fee:	e00e      	b.n	800300e <USB_EPStartXfer+0x25a>
 8002ff0:	0959      	lsrs	r1, r3, #5
 8002ff2:	f013 0f1f 	tst.w	r3, #31
 8002ff6:	bf08      	it	eq
 8002ff8:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002ffc:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003000:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003004:	b289      	uxth	r1, r1
 8003006:	5281      	strh	r1, [r0, r2]
 8003008:	e001      	b.n	800300e <USB_EPStartXfer+0x25a>
 800300a:	2a01      	cmp	r2, #1
 800300c:	d006      	beq.n	800301c <USB_EPStartXfer+0x268>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800300e:	b29b      	uxth	r3, r3
 8003010:	8922      	ldrh	r2, [r4, #8]
 8003012:	6961      	ldr	r1, [r4, #20]
 8003014:	4628      	mov	r0, r5
 8003016:	f7ff feb4 	bl	8002d82 <USB_WritePMA>
 800301a:	e749      	b.n	8002eb0 <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800301c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003020:	b290      	uxth	r0, r2
 8003022:	7821      	ldrb	r1, [r4, #0]
 8003024:	0109      	lsls	r1, r1, #4
 8003026:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800302a:	4402      	add	r2, r0
 800302c:	b298      	uxth	r0, r3
 800302e:	5288      	strh	r0, [r1, r2]
 8003030:	e7ed      	b.n	800300e <USB_EPStartXfer+0x25a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003032:	784a      	ldrb	r2, [r1, #1]
 8003034:	bb6a      	cbnz	r2, 8003092 <USB_EPStartXfer+0x2de>
 8003036:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800303a:	b292      	uxth	r2, r2
 800303c:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8003040:	4411      	add	r1, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	b96e      	cbnz	r6, 8003062 <USB_EPStartXfer+0x2ae>
 8003046:	5aca      	ldrh	r2, [r1, r3]
 8003048:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800304c:	0412      	lsls	r2, r2, #16
 800304e:	0c12      	lsrs	r2, r2, #16
 8003050:	52ca      	strh	r2, [r1, r3]
 8003052:	5aca      	ldrh	r2, [r1, r3]
 8003054:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003058:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800305c:	b292      	uxth	r2, r2
 800305e:	52ca      	strh	r2, [r1, r3]
 8003060:	e019      	b.n	8003096 <USB_EPStartXfer+0x2e2>
 8003062:	2e3e      	cmp	r6, #62	; 0x3e
 8003064:	d808      	bhi.n	8003078 <USB_EPStartXfer+0x2c4>
 8003066:	0872      	lsrs	r2, r6, #1
 8003068:	f016 0f01 	tst.w	r6, #1
 800306c:	bf18      	it	ne
 800306e:	3201      	addne	r2, #1
 8003070:	0292      	lsls	r2, r2, #10
 8003072:	b292      	uxth	r2, r2
 8003074:	52ca      	strh	r2, [r1, r3]
 8003076:	e00e      	b.n	8003096 <USB_EPStartXfer+0x2e2>
 8003078:	0972      	lsrs	r2, r6, #5
 800307a:	f016 0f1f 	tst.w	r6, #31
 800307e:	bf08      	it	eq
 8003080:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003084:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003088:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800308c:	b292      	uxth	r2, r2
 800308e:	52ca      	strh	r2, [r1, r3]
 8003090:	e001      	b.n	8003096 <USB_EPStartXfer+0x2e2>
 8003092:	2a01      	cmp	r2, #1
 8003094:	d02a      	beq.n	80030ec <USB_EPStartXfer+0x338>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003096:	b2b3      	uxth	r3, r6
 8003098:	8922      	ldrh	r2, [r4, #8]
 800309a:	6961      	ldr	r1, [r4, #20]
 800309c:	4628      	mov	r0, r5
 800309e:	f7ff fe70 	bl	8002d82 <USB_WritePMA>
            ep->xfer_buff += len;
 80030a2:	6963      	ldr	r3, [r4, #20]
 80030a4:	4433      	add	r3, r6
 80030a6:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80030a8:	6a23      	ldr	r3, [r4, #32]
 80030aa:	6922      	ldr	r2, [r4, #16]
 80030ac:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 80030ae:	bf86      	itte	hi
 80030b0:	1b9a      	subhi	r2, r3, r6
 80030b2:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 80030b4:	2200      	movls	r2, #0
 80030b6:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80030b8:	7862      	ldrb	r2, [r4, #1]
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d138      	bne.n	8003130 <USB_EPStartXfer+0x37c>
 80030be:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80030c2:	b292      	uxth	r2, r2
 80030c4:	7820      	ldrb	r0, [r4, #0]
 80030c6:	0100      	lsls	r0, r0, #4
 80030c8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80030cc:	440a      	add	r2, r1
 80030ce:	b9bb      	cbnz	r3, 8003100 <USB_EPStartXfer+0x34c>
 80030d0:	5a81      	ldrh	r1, [r0, r2]
 80030d2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80030d6:	0409      	lsls	r1, r1, #16
 80030d8:	0c09      	lsrs	r1, r1, #16
 80030da:	5281      	strh	r1, [r0, r2]
 80030dc:	5a81      	ldrh	r1, [r0, r2]
 80030de:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80030e2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80030e6:	b289      	uxth	r1, r1
 80030e8:	5281      	strh	r1, [r0, r2]
 80030ea:	e023      	b.n	8003134 <USB_EPStartXfer+0x380>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80030ec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80030f0:	b291      	uxth	r1, r2
 80030f2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80030f6:	440a      	add	r2, r1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	b2b1      	uxth	r1, r6
 80030fc:	52d1      	strh	r1, [r2, r3]
 80030fe:	e7ca      	b.n	8003096 <USB_EPStartXfer+0x2e2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003100:	2b3e      	cmp	r3, #62	; 0x3e
 8003102:	d808      	bhi.n	8003116 <USB_EPStartXfer+0x362>
 8003104:	0859      	lsrs	r1, r3, #1
 8003106:	f013 0f01 	tst.w	r3, #1
 800310a:	bf18      	it	ne
 800310c:	3101      	addne	r1, #1
 800310e:	0289      	lsls	r1, r1, #10
 8003110:	b289      	uxth	r1, r1
 8003112:	5281      	strh	r1, [r0, r2]
 8003114:	e00e      	b.n	8003134 <USB_EPStartXfer+0x380>
 8003116:	0959      	lsrs	r1, r3, #5
 8003118:	f013 0f1f 	tst.w	r3, #31
 800311c:	bf08      	it	eq
 800311e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003122:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003126:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800312a:	b289      	uxth	r1, r1
 800312c:	5281      	strh	r1, [r0, r2]
 800312e:	e001      	b.n	8003134 <USB_EPStartXfer+0x380>
 8003130:	2a01      	cmp	r2, #1
 8003132:	d006      	beq.n	8003142 <USB_EPStartXfer+0x38e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003134:	b29b      	uxth	r3, r3
 8003136:	8962      	ldrh	r2, [r4, #10]
 8003138:	6961      	ldr	r1, [r4, #20]
 800313a:	4628      	mov	r0, r5
 800313c:	f7ff fe21 	bl	8002d82 <USB_WritePMA>
 8003140:	e6b6      	b.n	8002eb0 <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003142:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003146:	b290      	uxth	r0, r2
 8003148:	7821      	ldrb	r1, [r4, #0]
 800314a:	0109      	lsls	r1, r1, #4
 800314c:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003150:	4402      	add	r2, r0
 8003152:	b298      	uxth	r0, r3
 8003154:	5288      	strh	r0, [r1, r2]
 8003156:	e7ed      	b.n	8003134 <USB_EPStartXfer+0x380>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003158:	7809      	ldrb	r1, [r1, #0]
 800315a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800315e:	b292      	uxth	r2, r2
 8003160:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003164:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003170:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003174:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003178:	b290      	uxth	r0, r2
 800317a:	7821      	ldrb	r1, [r4, #0]
 800317c:	0109      	lsls	r1, r1, #4
 800317e:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003182:	4402      	add	r2, r0
 8003184:	b29b      	uxth	r3, r3
 8003186:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003188:	8922      	ldrh	r2, [r4, #8]
 800318a:	6961      	ldr	r1, [r4, #20]
 800318c:	4628      	mov	r0, r5
 800318e:	f7ff fdf8 	bl	8002d82 <USB_WritePMA>
 8003192:	e68d      	b.n	8002eb0 <USB_EPStartXfer+0xfc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003194:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003198:	b291      	uxth	r1, r2
 800319a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800319e:	440a      	add	r2, r1
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	b2b1      	uxth	r1, r6
 80031a4:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr0;
 80031a6:	8922      	ldrh	r2, [r4, #8]
 80031a8:	e65b      	b.n	8002e62 <USB_EPStartXfer+0xae>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f47f ae80 	bne.w	8002eb0 <USB_EPStartXfer+0xfc>
 80031b0:	7822      	ldrb	r2, [r4, #0]
 80031b2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80031cc:	e670      	b.n	8002eb0 <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80031ce:	2a3e      	cmp	r2, #62	; 0x3e
 80031d0:	d808      	bhi.n	80031e4 <USB_EPStartXfer+0x430>
 80031d2:	0851      	lsrs	r1, r2, #1
 80031d4:	f012 0f01 	tst.w	r2, #1
 80031d8:	bf18      	it	ne
 80031da:	3101      	addne	r1, #1
 80031dc:	0289      	lsls	r1, r1, #10
 80031de:	b289      	uxth	r1, r1
 80031e0:	52c1      	strh	r1, [r0, r3]
 80031e2:	e611      	b.n	8002e08 <USB_EPStartXfer+0x54>
 80031e4:	0951      	lsrs	r1, r2, #5
 80031e6:	f012 0f1f 	tst.w	r2, #31
 80031ea:	bf08      	it	eq
 80031ec:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80031f0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80031f4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80031f8:	b289      	uxth	r1, r1
 80031fa:	52c1      	strh	r1, [r0, r3]
 80031fc:	e604      	b.n	8002e08 <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 80031fe:	78ca      	ldrb	r2, [r1, #3]
 8003200:	2a02      	cmp	r2, #2
 8003202:	d03f      	beq.n	8003284 <USB_EPStartXfer+0x4d0>
      else if (ep->type == EP_TYPE_ISOC)
 8003204:	2a01      	cmp	r2, #1
 8003206:	f040 8118 	bne.w	800343a <USB_EPStartXfer+0x686>
        if (ep->xfer_len > ep->maxpacket)
 800320a:	698a      	ldr	r2, [r1, #24]
 800320c:	6909      	ldr	r1, [r1, #16]
 800320e:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 8003210:	bf86      	itte	hi
 8003212:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 8003214:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 8003216:	2000      	movls	r0, #0
 8003218:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800321a:	2b00      	cmp	r3, #0
 800321c:	f47f adf4 	bne.w	8002e08 <USB_EPStartXfer+0x54>
 8003220:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003224:	b29b      	uxth	r3, r3
 8003226:	7826      	ldrb	r6, [r4, #0]
 8003228:	0136      	lsls	r6, r6, #4
 800322a:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800322e:	4418      	add	r0, r3
 8003230:	2a00      	cmp	r2, #0
 8003232:	f040 80b7 	bne.w	80033a4 <USB_EPStartXfer+0x5f0>
 8003236:	5a33      	ldrh	r3, [r6, r0]
 8003238:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	5233      	strh	r3, [r6, r0]
 8003242:	5a33      	ldrh	r3, [r6, r0]
 8003244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324c:	b29b      	uxth	r3, r3
 800324e:	5233      	strh	r3, [r6, r0]
 8003250:	7863      	ldrb	r3, [r4, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 80e3 	bne.w	800341e <USB_EPStartXfer+0x66a>
 8003258:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800325c:	b293      	uxth	r3, r2
 800325e:	7821      	ldrb	r1, [r4, #0]
 8003260:	0109      	lsls	r1, r1, #4
 8003262:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003266:	441a      	add	r2, r3
 8003268:	5a8b      	ldrh	r3, [r1, r2]
 800326a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	528b      	strh	r3, [r1, r2]
 8003274:	5a8b      	ldrh	r3, [r1, r2]
 8003276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800327e:	b29b      	uxth	r3, r3
 8003280:	528b      	strh	r3, [r1, r2]
 8003282:	e5c1      	b.n	8002e08 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003284:	2b00      	cmp	r3, #0
 8003286:	d132      	bne.n	80032ee <USB_EPStartXfer+0x53a>
 8003288:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	780a      	ldrb	r2, [r1, #0]
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8003296:	440b      	add	r3, r1
 8003298:	6921      	ldr	r1, [r4, #16]
 800329a:	2900      	cmp	r1, #0
 800329c:	d145      	bne.n	800332a <USB_EPStartXfer+0x576>
 800329e:	5ad1      	ldrh	r1, [r2, r3]
 80032a0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80032a4:	0409      	lsls	r1, r1, #16
 80032a6:	0c09      	lsrs	r1, r1, #16
 80032a8:	52d1      	strh	r1, [r2, r3]
 80032aa:	5ad1      	ldrh	r1, [r2, r3]
 80032ac:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80032b0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80032b4:	b289      	uxth	r1, r1
 80032b6:	52d1      	strh	r1, [r2, r3]
 80032b8:	7863      	ldrb	r3, [r4, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d165      	bne.n	800338a <USB_EPStartXfer+0x5d6>
 80032be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	7822      	ldrb	r2, [r4, #0]
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80032cc:	440b      	add	r3, r1
 80032ce:	6921      	ldr	r1, [r4, #16]
 80032d0:	2900      	cmp	r1, #0
 80032d2:	d142      	bne.n	800335a <USB_EPStartXfer+0x5a6>
 80032d4:	5ad1      	ldrh	r1, [r2, r3]
 80032d6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80032da:	0409      	lsls	r1, r1, #16
 80032dc:	0c09      	lsrs	r1, r1, #16
 80032de:	52d1      	strh	r1, [r2, r3]
 80032e0:	5ad1      	ldrh	r1, [r2, r3]
 80032e2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80032e6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80032ea:	b289      	uxth	r1, r1
 80032ec:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 80032ee:	69e3      	ldr	r3, [r4, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f43f ad89 	beq.w	8002e08 <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80032f6:	7822      	ldrb	r2, [r4, #0]
 80032f8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80032fc:	f244 0340 	movw	r3, #16448	; 0x4040
 8003300:	ea03 0001 	and.w	r0, r3, r1
 8003304:	438b      	bics	r3, r1
 8003306:	d002      	beq.n	800330e <USB_EPStartXfer+0x55a>
 8003308:	2800      	cmp	r0, #0
 800330a:	f47f ad7d 	bne.w	8002e08 <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800330e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003324:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003328:	e56e      	b.n	8002e08 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800332a:	293e      	cmp	r1, #62	; 0x3e
 800332c:	d808      	bhi.n	8003340 <USB_EPStartXfer+0x58c>
 800332e:	0848      	lsrs	r0, r1, #1
 8003330:	f011 0f01 	tst.w	r1, #1
 8003334:	bf18      	it	ne
 8003336:	3001      	addne	r0, #1
 8003338:	0281      	lsls	r1, r0, #10
 800333a:	b289      	uxth	r1, r1
 800333c:	52d1      	strh	r1, [r2, r3]
 800333e:	e7bb      	b.n	80032b8 <USB_EPStartXfer+0x504>
 8003340:	0948      	lsrs	r0, r1, #5
 8003342:	f011 0f1f 	tst.w	r1, #31
 8003346:	bf08      	it	eq
 8003348:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800334c:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8003350:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003354:	b289      	uxth	r1, r1
 8003356:	52d1      	strh	r1, [r2, r3]
 8003358:	e7ae      	b.n	80032b8 <USB_EPStartXfer+0x504>
 800335a:	293e      	cmp	r1, #62	; 0x3e
 800335c:	d808      	bhi.n	8003370 <USB_EPStartXfer+0x5bc>
 800335e:	0848      	lsrs	r0, r1, #1
 8003360:	f011 0f01 	tst.w	r1, #1
 8003364:	bf18      	it	ne
 8003366:	3001      	addne	r0, #1
 8003368:	0281      	lsls	r1, r0, #10
 800336a:	b289      	uxth	r1, r1
 800336c:	52d1      	strh	r1, [r2, r3]
 800336e:	e7be      	b.n	80032ee <USB_EPStartXfer+0x53a>
 8003370:	0948      	lsrs	r0, r1, #5
 8003372:	f011 0f1f 	tst.w	r1, #31
 8003376:	bf08      	it	eq
 8003378:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800337c:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8003380:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003384:	b289      	uxth	r1, r1
 8003386:	52d1      	strh	r1, [r2, r3]
 8003388:	e7b1      	b.n	80032ee <USB_EPStartXfer+0x53a>
 800338a:	2b01      	cmp	r3, #1
 800338c:	d1af      	bne.n	80032ee <USB_EPStartXfer+0x53a>
 800338e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003392:	b299      	uxth	r1, r3
 8003394:	7822      	ldrb	r2, [r4, #0]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 800339c:	440b      	add	r3, r1
 800339e:	8a21      	ldrh	r1, [r4, #16]
 80033a0:	52d1      	strh	r1, [r2, r3]
 80033a2:	e7a4      	b.n	80032ee <USB_EPStartXfer+0x53a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80033a4:	2a3e      	cmp	r2, #62	; 0x3e
 80033a6:	d817      	bhi.n	80033d8 <USB_EPStartXfer+0x624>
 80033a8:	0851      	lsrs	r1, r2, #1
 80033aa:	f012 0701 	ands.w	r7, r2, #1
 80033ae:	bf14      	ite	ne
 80033b0:	1c4b      	addne	r3, r1, #1
 80033b2:	460b      	moveq	r3, r1
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	5233      	strh	r3, [r6, r0]
 80033ba:	7863      	ldrb	r3, [r4, #1]
 80033bc:	bb7b      	cbnz	r3, 800341e <USB_EPStartXfer+0x66a>
 80033be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 80033c8:	4413      	add	r3, r2
 80033ca:	7822      	ldrb	r2, [r4, #0]
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	bb17      	cbnz	r7, 8003416 <USB_EPStartXfer+0x662>
 80033d0:	0289      	lsls	r1, r1, #10
 80033d2:	b289      	uxth	r1, r1
 80033d4:	5299      	strh	r1, [r3, r2]
 80033d6:	e517      	b.n	8002e08 <USB_EPStartXfer+0x54>
 80033d8:	0951      	lsrs	r1, r2, #5
 80033da:	f012 071f 	ands.w	r7, r2, #31
 80033de:	bf0c      	ite	eq
 80033e0:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80033e4:	460b      	movne	r3, r1
 80033e6:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80033ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	5233      	strh	r3, [r6, r0]
 80033f2:	7863      	ldrb	r3, [r4, #1]
 80033f4:	b99b      	cbnz	r3, 800341e <USB_EPStartXfer+0x66a>
 80033f6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003400:	441a      	add	r2, r3
 8003402:	7820      	ldrb	r0, [r4, #0]
 8003404:	0100      	lsls	r0, r0, #4
 8003406:	b147      	cbz	r7, 800341a <USB_EPStartXfer+0x666>
 8003408:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800340c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003410:	b29b      	uxth	r3, r3
 8003412:	5213      	strh	r3, [r2, r0]
 8003414:	e4f8      	b.n	8002e08 <USB_EPStartXfer+0x54>
 8003416:	3101      	adds	r1, #1
 8003418:	e7da      	b.n	80033d0 <USB_EPStartXfer+0x61c>
 800341a:	3901      	subs	r1, #1
 800341c:	e7f4      	b.n	8003408 <USB_EPStartXfer+0x654>
 800341e:	2b01      	cmp	r3, #1
 8003420:	f47f acf2 	bne.w	8002e08 <USB_EPStartXfer+0x54>
 8003424:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003428:	b29b      	uxth	r3, r3
 800342a:	7821      	ldrb	r1, [r4, #0]
 800342c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003430:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003434:	b292      	uxth	r2, r2
 8003436:	52ea      	strh	r2, [r5, r3]
 8003438:	e4e6      	b.n	8002e08 <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 800343a:	2001      	movs	r0, #1
 800343c:	e4f5      	b.n	8002e2a <USB_EPStartXfer+0x76>

0800343e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800343e:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003440:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003444:	f500 6680 	add.w	r6, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003448:	085f      	lsrs	r7, r3, #1
 800344a:	d011      	beq.n	8003470 <USB_ReadPMA+0x32>
 800344c:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800344e:	4635      	mov	r5, r6
  for (i = n; i != 0U; i--)
 8003450:	463c      	mov	r4, r7
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003452:	f835 2b04 	ldrh.w	r2, [r5], #4
 8003456:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003458:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800345c:	0a12      	lsrs	r2, r2, #8
 800345e:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 8003462:	3002      	adds	r0, #2
 8003464:	3c01      	subs	r4, #1
 8003466:	d1f4      	bne.n	8003452 <USB_ReadPMA+0x14>
 8003468:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800346c:	eb06 0687 	add.w	r6, r6, r7, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003470:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 8003474:	bf1c      	itt	ne
 8003476:	8833      	ldrhne	r3, [r6, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003478:	700b      	strbne	r3, [r1, #0]
  }
}
 800347a:	bcf0      	pop	{r4, r5, r6, r7}
 800347c:	4770      	bx	lr

0800347e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800347e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003482:	b183      	cbz	r3, 80034a6 <USBD_CDC_EP0_RxReady+0x28>
{
 8003484:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003486:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800348a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800348e:	28ff      	cmp	r0, #255	; 0xff
 8003490:	d007      	beq.n	80034a2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003498:	4621      	mov	r1, r4
 800349a:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800349c:	23ff      	movs	r3, #255	; 0xff
 800349e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80034a2:	2000      	movs	r0, #0
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	2000      	movs	r0, #0
 80034a8:	4770      	bx	lr
	...

080034ac <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80034ac:	2343      	movs	r3, #67	; 0x43
 80034ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80034b0:	4800      	ldr	r0, [pc, #0]	; (80034b4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80034b2:	4770      	bx	lr
 80034b4:	20000044 	.word	0x20000044

080034b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80034b8:	2343      	movs	r3, #67	; 0x43
 80034ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80034bc:	4800      	ldr	r0, [pc, #0]	; (80034c0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80034be:	4770      	bx	lr
 80034c0:	20000088 	.word	0x20000088

080034c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80034c4:	2343      	movs	r3, #67	; 0x43
 80034c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80034c8:	4800      	ldr	r0, [pc, #0]	; (80034cc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80034ca:	4770      	bx	lr
 80034cc:	200000d8 	.word	0x200000d8

080034d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80034d0:	230a      	movs	r3, #10
 80034d2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80034d4:	4800      	ldr	r0, [pc, #0]	; (80034d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80034d6:	4770      	bx	lr
 80034d8:	200000cc 	.word	0x200000cc

080034dc <USBD_CDC_DataOut>:
{
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80034e0:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80034e4:	f001 f80c 	bl	8004500 <USBD_LL_GetRxDataSize>
 80034e8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80034ec:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80034f0:	b14b      	cbz	r3, 8003506 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80034f2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80034fc:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003500:	4798      	blx	r3
    return USBD_OK;
 8003502:	2000      	movs	r0, #0
}
 8003504:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003506:	2002      	movs	r0, #2
 8003508:	e7fc      	b.n	8003504 <USBD_CDC_DataOut+0x28>

0800350a <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800350a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800350e:	b312      	cbz	r2, 8003556 <USBD_CDC_DataIn+0x4c>
{
 8003510:	b538      	push	{r3, r4, r5, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003512:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003516:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	b15b      	cbz	r3, 8003536 <USBD_CDC_DataIn+0x2c>
 800351e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003522:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8003526:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800352a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800352c:	fbb3 f4f5 	udiv	r4, r3, r5
 8003530:	fb05 3314 	mls	r3, r5, r4, r3
 8003534:	b11b      	cbz	r3, 800353e <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8003536:	2000      	movs	r0, #0
 8003538:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 800353c:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800353e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003542:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003546:	2400      	movs	r4, #0
 8003548:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800354a:	4623      	mov	r3, r4
 800354c:	4622      	mov	r2, r4
 800354e:	f000 ffc7 	bl	80044e0 <USBD_LL_Transmit>
    return USBD_OK;
 8003552:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003554:	e7f2      	b.n	800353c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003556:	2002      	movs	r0, #2
}
 8003558:	4770      	bx	lr

0800355a <USBD_CDC_Setup>:
{
 800355a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355c:	b083      	sub	sp, #12
 800355e:	4606      	mov	r6, r0
 8003560:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003562:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800356c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003570:	780b      	ldrb	r3, [r1, #0]
 8003572:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8003576:	d027      	beq.n	80035c8 <USBD_CDC_Setup+0x6e>
 8003578:	2d20      	cmp	r5, #32
 800357a:	d153      	bne.n	8003624 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 800357c:	88ca      	ldrh	r2, [r1, #6]
 800357e:	b1da      	cbz	r2, 80035b8 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8003580:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003584:	d00c      	beq.n	80035a0 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003586:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4639      	mov	r1, r7
 800358e:	7860      	ldrb	r0, [r4, #1]
 8003590:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003592:	88e2      	ldrh	r2, [r4, #6]
 8003594:	4639      	mov	r1, r7
 8003596:	4630      	mov	r0, r6
 8003598:	f000 fd63 	bl	8004062 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800359c:	2500      	movs	r5, #0
 800359e:	e044      	b.n	800362a <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80035a0:	784b      	ldrb	r3, [r1, #1]
 80035a2:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80035a6:	88cb      	ldrh	r3, [r1, #6]
 80035a8:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80035ac:	88ca      	ldrh	r2, [r1, #6]
 80035ae:	4639      	mov	r1, r7
 80035b0:	f000 fd6c 	bl	800408c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80035b4:	2500      	movs	r5, #0
 80035b6:	e038      	b.n	800362a <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80035b8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2200      	movs	r2, #0
 80035c0:	7848      	ldrb	r0, [r1, #1]
 80035c2:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80035c4:	2500      	movs	r5, #0
 80035c6:	e030      	b.n	800362a <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 80035c8:	784f      	ldrb	r7, [r1, #1]
 80035ca:	2f0a      	cmp	r7, #10
 80035cc:	d014      	beq.n	80035f8 <USBD_CDC_Setup+0x9e>
 80035ce:	2f0b      	cmp	r7, #11
 80035d0:	d020      	beq.n	8003614 <USBD_CDC_Setup+0xba>
 80035d2:	b11f      	cbz	r7, 80035dc <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 80035d4:	f000 fa58 	bl	8003a88 <USBD_CtlError>
          ret = USBD_FAIL;
 80035d8:	2502      	movs	r5, #2
          break;
 80035da:	e026      	b.n	800362a <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80035dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d003      	beq.n	80035ec <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 80035e4:	f000 fa50 	bl	8003a88 <USBD_CtlError>
            ret = USBD_FAIL;
 80035e8:	2502      	movs	r5, #2
 80035ea:	e01e      	b.n	800362a <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80035ec:	2202      	movs	r2, #2
 80035ee:	a901      	add	r1, sp, #4
 80035f0:	f000 fd37 	bl	8004062 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80035f4:	463d      	mov	r5, r7
 80035f6:	e018      	b.n	800362a <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80035f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d003      	beq.n	8003608 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003600:	f000 fa42 	bl	8003a88 <USBD_CtlError>
            ret = USBD_FAIL;
 8003604:	2502      	movs	r5, #2
 8003606:	e010      	b.n	800362a <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003608:	2201      	movs	r2, #1
 800360a:	f10d 0107 	add.w	r1, sp, #7
 800360e:	f000 fd28 	bl	8004062 <USBD_CtlSendData>
 8003612:	e00a      	b.n	800362a <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003614:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003618:	2b03      	cmp	r3, #3
 800361a:	d006      	beq.n	800362a <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 800361c:	f000 fa34 	bl	8003a88 <USBD_CtlError>
            ret = USBD_FAIL;
 8003620:	2502      	movs	r5, #2
 8003622:	e002      	b.n	800362a <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8003624:	f000 fa30 	bl	8003a88 <USBD_CtlError>
      ret = USBD_FAIL;
 8003628:	2502      	movs	r5, #2
}
 800362a:	4628      	mov	r0, r5
 800362c:	b003      	add	sp, #12
 800362e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003630 <USBD_CDC_DeInit>:
{
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003634:	2181      	movs	r1, #129	; 0x81
 8003636:	f000 ff1c 	bl	8004472 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800363a:	2500      	movs	r5, #0
 800363c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800363e:	2101      	movs	r1, #1
 8003640:	4620      	mov	r0, r4
 8003642:	f000 ff16 	bl	8004472 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003646:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800364a:	2182      	movs	r1, #130	; 0x82
 800364c:	4620      	mov	r0, r4
 800364e:	f000 ff10 	bl	8004472 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003652:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003654:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003658:	b14b      	cbz	r3, 800366e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800365a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003662:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003666:	f000 ff55 	bl	8004514 <USBD_static_free>
    pdev->pClassData = NULL;
 800366a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800366e:	2000      	movs	r0, #0
 8003670:	bd38      	pop	{r3, r4, r5, pc}

08003672 <USBD_CDC_Init>:
{
 8003672:	b570      	push	{r4, r5, r6, lr}
 8003674:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003676:	7c03      	ldrb	r3, [r0, #16]
 8003678:	bbab      	cbnz	r3, 80036e6 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800367a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367e:	2202      	movs	r2, #2
 8003680:	2181      	movs	r1, #129	; 0x81
 8003682:	f000 feeb 	bl	800445c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003686:	2501      	movs	r5, #1
 8003688:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800368a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800368e:	2202      	movs	r2, #2
 8003690:	4629      	mov	r1, r5
 8003692:	4620      	mov	r0, r4
 8003694:	f000 fee2 	bl	800445c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003698:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800369c:	2308      	movs	r3, #8
 800369e:	2203      	movs	r2, #3
 80036a0:	2182      	movs	r1, #130	; 0x82
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 feda 	bl	800445c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80036a8:	2301      	movs	r3, #1
 80036aa:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80036ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80036b0:	f000 ff2c 	bl	800450c <USBD_static_malloc>
 80036b4:	4605      	mov	r5, r0
 80036b6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80036ba:	b368      	cbz	r0, 8003718 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80036bc:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4798      	blx	r3
    hcdc->TxState = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80036ca:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80036ce:	7c26      	ldrb	r6, [r4, #16]
 80036d0:	b9ce      	cbnz	r6, 8003706 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80036d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80036da:	2101      	movs	r1, #1
 80036dc:	4620      	mov	r0, r4
 80036de:	f000 ff07 	bl	80044f0 <USBD_LL_PrepareReceive>
}
 80036e2:	4630      	mov	r0, r6
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80036e6:	2340      	movs	r3, #64	; 0x40
 80036e8:	2202      	movs	r2, #2
 80036ea:	2181      	movs	r1, #129	; 0x81
 80036ec:	f000 feb6 	bl	800445c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80036f0:	2501      	movs	r5, #1
 80036f2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80036f4:	2340      	movs	r3, #64	; 0x40
 80036f6:	2202      	movs	r2, #2
 80036f8:	4629      	mov	r1, r5
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 feae 	bl	800445c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003700:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8003704:	e7ca      	b.n	800369c <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800370c:	2101      	movs	r1, #1
 800370e:	4620      	mov	r0, r4
 8003710:	f000 feee 	bl	80044f0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003714:	2600      	movs	r6, #0
 8003716:	e7e4      	b.n	80036e2 <USBD_CDC_Init+0x70>
    ret = 1U;
 8003718:	2601      	movs	r6, #1
 800371a:	e7e2      	b.n	80036e2 <USBD_CDC_Init+0x70>

0800371c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800371c:	b119      	cbz	r1, 8003726 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800371e:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003722:	2000      	movs	r0, #0
 8003724:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003726:	2002      	movs	r0, #2
  }

  return ret;
}
 8003728:	4770      	bx	lr

0800372a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800372a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 800372e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003732:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8003736:	2000      	movs	r0, #0
 8003738:	4770      	bx	lr

0800373a <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800373a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 800373e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8003742:	2000      	movs	r0, #0
 8003744:	4770      	bx	lr

08003746 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003746:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 800374a:	b1a2      	cbz	r2, 8003776 <USBD_CDC_TransmitPacket+0x30>
{
 800374c:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 800374e:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003752:	b10b      	cbz	r3, 8003758 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003754:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003756:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8003758:	2301      	movs	r3, #1
 800375a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800375e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003762:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003764:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003768:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800376c:	2181      	movs	r1, #129	; 0x81
 800376e:	f000 feb7 	bl	80044e0 <USBD_LL_Transmit>
      return USBD_OK;
 8003772:	2000      	movs	r0, #0
 8003774:	e7ef      	b.n	8003756 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8003776:	2002      	movs	r0, #2
}
 8003778:	4770      	bx	lr

0800377a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800377a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800377c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003780:	b192      	cbz	r2, 80037a8 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003782:	7c04      	ldrb	r4, [r0, #16]
 8003784:	b944      	cbnz	r4, 8003798 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800378e:	2101      	movs	r1, #1
 8003790:	f000 feae 	bl	80044f0 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003794:	4620      	mov	r0, r4
 8003796:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003798:	2340      	movs	r3, #64	; 0x40
 800379a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800379e:	2101      	movs	r1, #1
 80037a0:	f000 fea6 	bl	80044f0 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80037a4:	2400      	movs	r4, #0
 80037a6:	e7f5      	b.n	8003794 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80037a8:	2402      	movs	r4, #2
 80037aa:	e7f3      	b.n	8003794 <USBD_CDC_ReceivePacket+0x1a>

080037ac <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80037ac:	b198      	cbz	r0, 80037d6 <USBD_Init+0x2a>
{
 80037ae:	b508      	push	{r3, lr}
 80037b0:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80037b2:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 80037b6:	b110      	cbz	r0, 80037be <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80037b8:	2000      	movs	r0, #0
 80037ba:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80037be:	b109      	cbz	r1, 80037c4 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80037c0:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80037c4:	2101      	movs	r1, #1
 80037c6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80037ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fdfb 	bl	80043c8 <USBD_LL_Init>

  return USBD_OK;
 80037d2:	2000      	movs	r0, #0
}
 80037d4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80037d6:	2002      	movs	r0, #2
}
 80037d8:	4770      	bx	lr

080037da <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80037da:	b119      	cbz	r1, 80037e4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80037dc:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80037e0:	2000      	movs	r0, #0
 80037e2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80037e4:	2002      	movs	r0, #2
  }

  return status;
}
 80037e6:	4770      	bx	lr

080037e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80037e8:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80037ea:	f000 fe2f 	bl	800444c <USBD_LL_Start>

  return USBD_OK;
}
 80037ee:	2000      	movs	r0, #0
 80037f0:	bd08      	pop	{r3, pc}

080037f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80037f2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80037f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80037f8:	b12b      	cbz	r3, 8003806 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 80037fe:	2800      	cmp	r0, #0
 8003800:	bf18      	it	ne
 8003802:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003804:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003806:	2002      	movs	r0, #2
 8003808:	e7fc      	b.n	8003804 <USBD_SetClassConfig+0x12>

0800380a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800380a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800380c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4798      	blx	r3

  return USBD_OK;
}
 8003814:	2000      	movs	r0, #0
 8003816:	bd08      	pop	{r3, pc}

08003818 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800381c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003820:	4628      	mov	r0, r5
 8003822:	f000 f91d 	bl	8003a60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003826:	2301      	movs	r3, #1
 8003828:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800382c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003830:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003834:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8003838:	f001 031f 	and.w	r3, r1, #31
 800383c:	2b01      	cmp	r3, #1
 800383e:	d00e      	beq.n	800385e <USBD_LL_SetupStage+0x46>
 8003840:	2b02      	cmp	r3, #2
 8003842:	d011      	beq.n	8003868 <USBD_LL_SetupStage+0x50>
 8003844:	b12b      	cbz	r3, 8003852 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003846:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800384a:	4620      	mov	r0, r4
 800384c:	f000 fe19 	bl	8004482 <USBD_LL_StallEP>
      break;
 8003850:	e003      	b.n	800385a <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003852:	4629      	mov	r1, r5
 8003854:	4620      	mov	r0, r4
 8003856:	f000 f921 	bl	8003a9c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800385a:	2000      	movs	r0, #0
 800385c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800385e:	4629      	mov	r1, r5
 8003860:	4620      	mov	r0, r4
 8003862:	f000 fad5 	bl	8003e10 <USBD_StdItfReq>
      break;
 8003866:	e7f8      	b.n	800385a <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003868:	4629      	mov	r1, r5
 800386a:	4620      	mov	r0, r4
 800386c:	f000 fb00 	bl	8003e70 <USBD_StdEPReq>
      break;
 8003870:	e7f3      	b.n	800385a <USBD_LL_SetupStage+0x42>

08003872 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003872:	b538      	push	{r3, r4, r5, lr}
 8003874:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003876:	460d      	mov	r5, r1
 8003878:	bb81      	cbnz	r1, 80038dc <USBD_LL_DataOutStage+0x6a>
 800387a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800387c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003880:	2a03      	cmp	r2, #3
 8003882:	d003      	beq.n	800388c <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003884:	2a05      	cmp	r2, #5
 8003886:	d022      	beq.n	80038ce <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003888:	4608      	mov	r0, r1
 800388a:	e031      	b.n	80038f0 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 800388c:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8003890:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003894:	4291      	cmp	r1, r2
 8003896:	d90b      	bls.n	80038b0 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8003898:	1a89      	subs	r1, r1, r2
 800389a:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800389e:	428a      	cmp	r2, r1
 80038a0:	bf8c      	ite	hi
 80038a2:	b28a      	uxthhi	r2, r1
 80038a4:	b292      	uxthls	r2, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	f000 fbff 	bl	80040aa <USBD_CtlContinueRx>
  return USBD_OK;
 80038ac:	4628      	mov	r0, r5
 80038ae:	e01f      	b.n	80038f0 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80038b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	b11b      	cbz	r3, 80038c0 <USBD_LL_DataOutStage+0x4e>
 80038b8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80038bc:	2a03      	cmp	r2, #3
 80038be:	d004      	beq.n	80038ca <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 fbfa 	bl	80040ba <USBD_CtlSendStatus>
  return USBD_OK;
 80038c6:	4628      	mov	r0, r5
 80038c8:	e012      	b.n	80038f0 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 80038ca:	4798      	blx	r3
 80038cc:	e7f8      	b.n	80038c0 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 80038ce:	2100      	movs	r1, #0
 80038d0:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80038d4:	f000 fdd5 	bl	8004482 <USBD_LL_StallEP>
  return USBD_OK;
 80038d8:	4628      	mov	r0, r5
 80038da:	e009      	b.n	80038f0 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 80038dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	b133      	cbz	r3, 80038f2 <USBD_LL_DataOutStage+0x80>
 80038e4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80038e8:	2a03      	cmp	r2, #3
 80038ea:	d104      	bne.n	80038f6 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 80038ec:	4798      	blx	r3
  return USBD_OK;
 80038ee:	2000      	movs	r0, #0
}
 80038f0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80038f2:	2002      	movs	r0, #2
 80038f4:	e7fc      	b.n	80038f0 <USBD_LL_DataOutStage+0x7e>
 80038f6:	2002      	movs	r0, #2
 80038f8:	e7fa      	b.n	80038f0 <USBD_LL_DataOutStage+0x7e>

080038fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80038fa:	b538      	push	{r3, r4, r5, lr}
 80038fc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80038fe:	460d      	mov	r5, r1
 8003900:	2900      	cmp	r1, #0
 8003902:	d152      	bne.n	80039aa <USBD_LL_DataInStage+0xb0>
 8003904:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003906:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800390a:	2a02      	cmp	r2, #2
 800390c:	d00b      	beq.n	8003926 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800390e:	f032 0304 	bics.w	r3, r2, #4
 8003912:	d102      	bne.n	800391a <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	f000 fdb4 	bl	8004482 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800391a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d03e      	beq.n	80039a0 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003922:	4628      	mov	r0, r5
}
 8003924:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003926:	6a01      	ldr	r1, [r0, #32]
 8003928:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800392a:	4291      	cmp	r1, r2
 800392c:	d81b      	bhi.n	8003966 <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800392e:	69c1      	ldr	r1, [r0, #28]
 8003930:	fbb1 f3f2 	udiv	r3, r1, r2
 8003934:	fb02 1313 	mls	r3, r2, r3, r1
 8003938:	b92b      	cbnz	r3, 8003946 <USBD_LL_DataInStage+0x4c>
 800393a:	428a      	cmp	r2, r1
 800393c:	d803      	bhi.n	8003946 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 800393e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003942:	4299      	cmp	r1, r3
 8003944:	d31c      	bcc.n	8003980 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003946:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	b11b      	cbz	r3, 8003956 <USBD_LL_DataInStage+0x5c>
 800394e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003952:	2a03      	cmp	r2, #3
 8003954:	d021      	beq.n	800399a <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	4620      	mov	r0, r4
 800395a:	f000 fd92 	bl	8004482 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800395e:	4620      	mov	r0, r4
 8003960:	f000 fbb6 	bl	80040d0 <USBD_CtlReceiveStatus>
 8003964:	e7d9      	b.n	800391a <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8003966:	1a8a      	subs	r2, r1, r2
 8003968:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800396a:	b292      	uxth	r2, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f000 fb85 	bl	800407c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003972:	2300      	movs	r3, #0
 8003974:	461a      	mov	r2, r3
 8003976:	4619      	mov	r1, r3
 8003978:	4620      	mov	r0, r4
 800397a:	f000 fdb9 	bl	80044f0 <USBD_LL_PrepareReceive>
 800397e:	e7cc      	b.n	800391a <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003980:	2200      	movs	r2, #0
 8003982:	4611      	mov	r1, r2
 8003984:	f000 fb7a 	bl	800407c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003988:	2100      	movs	r1, #0
 800398a:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800398e:	460b      	mov	r3, r1
 8003990:	460a      	mov	r2, r1
 8003992:	4620      	mov	r0, r4
 8003994:	f000 fdac 	bl	80044f0 <USBD_LL_PrepareReceive>
 8003998:	e7bf      	b.n	800391a <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 800399a:	4620      	mov	r0, r4
 800399c:	4798      	blx	r3
 800399e:	e7da      	b.n	8003956 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80039a6:	4628      	mov	r0, r5
 80039a8:	e7bc      	b.n	8003924 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 80039aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	b133      	cbz	r3, 80039c0 <USBD_LL_DataInStage+0xc6>
 80039b2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80039b6:	2a03      	cmp	r2, #3
 80039b8:	d104      	bne.n	80039c4 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 80039ba:	4798      	blx	r3
  return USBD_OK;
 80039bc:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80039be:	e7b1      	b.n	8003924 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 80039c0:	2002      	movs	r0, #2
 80039c2:	e7af      	b.n	8003924 <USBD_LL_DataInStage+0x2a>
 80039c4:	2002      	movs	r0, #2
 80039c6:	e7ad      	b.n	8003924 <USBD_LL_DataInStage+0x2a>

080039c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80039cc:	2340      	movs	r3, #64	; 0x40
 80039ce:	2200      	movs	r2, #0
 80039d0:	4611      	mov	r1, r2
 80039d2:	f000 fd43 	bl	800445c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80039d6:	2501      	movs	r5, #1
 80039d8:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80039dc:	2640      	movs	r6, #64	; 0x40
 80039de:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80039e2:	4633      	mov	r3, r6
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	; 0x80
 80039e8:	4620      	mov	r0, r4
 80039ea:	f000 fd37 	bl	800445c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80039ee:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80039f0:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80039f2:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80039fc:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80039fe:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8003a02:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003a06:	b12b      	cbz	r3, 8003a14 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003a08:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4620      	mov	r0, r4
 8003a12:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003a14:	2000      	movs	r0, #0
 8003a16:	bd70      	pop	{r4, r5, r6, pc}

08003a18 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003a18:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	4770      	bx	lr

08003a1e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003a1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003a22:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003a26:	2304      	movs	r3, #4
 8003a28:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	4770      	bx	lr

08003a30 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003a30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003a34:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003a36:	bf04      	itt	eq
 8003a38:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003a3c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003a40:	2000      	movs	r0, #0
 8003a42:	4770      	bx	lr

08003a44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003a44:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a46:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d001      	beq.n	8003a52 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8003a4e:	2000      	movs	r0, #0
 8003a50:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8003a52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f8      	beq.n	8003a4e <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8003a5c:	4798      	blx	r3
 8003a5e:	e7f6      	b.n	8003a4e <USBD_LL_SOF+0xa>

08003a60 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8003a60:	780b      	ldrb	r3, [r1, #0]
 8003a62:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003a64:	784b      	ldrb	r3, [r1, #1]
 8003a66:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003a68:	78ca      	ldrb	r2, [r1, #3]
 8003a6a:	788b      	ldrb	r3, [r1, #2]
 8003a6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a70:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003a72:	794a      	ldrb	r2, [r1, #5]
 8003a74:	790b      	ldrb	r3, [r1, #4]
 8003a76:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a7a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003a7c:	79ca      	ldrb	r2, [r1, #7]
 8003a7e:	798b      	ldrb	r3, [r1, #6]
 8003a80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a84:	80c3      	strh	r3, [r0, #6]

}
 8003a86:	4770      	bx	lr

08003a88 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	f000 fcf8 	bl	8004482 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003a92:	2100      	movs	r1, #0
 8003a94:	4620      	mov	r0, r4
 8003a96:	f000 fcf4 	bl	8004482 <USBD_LL_StallEP>
}
 8003a9a:	bd10      	pop	{r4, pc}

08003a9c <USBD_StdDevReq>:
{
 8003a9c:	b530      	push	{r4, r5, lr}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003aa4:	780b      	ldrb	r3, [r1, #0]
 8003aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d005      	beq.n	8003aba <USBD_StdDevReq+0x1e>
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d003      	beq.n	8003aba <USBD_StdDevReq+0x1e>
 8003ab2:	b15b      	cbz	r3, 8003acc <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8003ab4:	f7ff ffe8 	bl	8003a88 <USBD_CtlError>
      break;
 8003ab8:	e005      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8003aba:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	4798      	blx	r3
}
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	b003      	add	sp, #12
 8003aca:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8003acc:	784b      	ldrb	r3, [r1, #1]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	f200 8198 	bhi.w	8003e04 <USBD_StdDevReq+0x368>
 8003ad4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003ad8:	0184015f 	.word	0x0184015f
 8003adc:	017b0196 	.word	0x017b0196
 8003ae0:	00c90196 	.word	0x00c90196
 8003ae4:	0196000a 	.word	0x0196000a
 8003ae8:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003af2:	884a      	ldrh	r2, [r1, #2]
 8003af4:	0a13      	lsrs	r3, r2, #8
 8003af6:	3b01      	subs	r3, #1
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	f200 80a4 	bhi.w	8003c46 <USBD_StdDevReq+0x1aa>
 8003afe:	e8df f003 	tbb	[pc, r3]
 8003b02:	1804      	.short	0x1804
 8003b04:	86a2a22c 	.word	0x86a2a22c
 8003b08:	93          	.byte	0x93
 8003b09:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003b0a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f10d 0106 	add.w	r1, sp, #6
 8003b14:	7c00      	ldrb	r0, [r0, #16]
 8003b16:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003b18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003b1c:	2a00      	cmp	r2, #0
 8003b1e:	f000 809f 	beq.w	8003c60 <USBD_StdDevReq+0x1c4>
 8003b22:	88e3      	ldrh	r3, [r4, #6]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 8092 	bne.w	8003c4e <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f000 fac5 	bl	80040ba <USBD_CtlSendStatus>
 8003b30:	e7c9      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b32:	7c03      	ldrb	r3, [r0, #16]
 8003b34:	b943      	cbnz	r3, 8003b48 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003b36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f10d 0006 	add.w	r0, sp, #6
 8003b40:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003b42:	2302      	movs	r3, #2
 8003b44:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003b46:	e7e7      	b.n	8003b18 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003b48:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f10d 0006 	add.w	r0, sp, #6
 8003b52:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003b54:	2302      	movs	r3, #2
 8003b56:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003b58:	e7de      	b.n	8003b18 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	2a05      	cmp	r2, #5
 8003b5e:	d852      	bhi.n	8003c06 <USBD_StdDevReq+0x16a>
 8003b60:	e8df f002 	tbb	[pc, r2]
 8003b64:	2a1d1003 	.word	0x2a1d1003
 8003b68:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003b6a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	b123      	cbz	r3, 8003b7c <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003b72:	f10d 0106 	add.w	r1, sp, #6
 8003b76:	7c00      	ldrb	r0, [r0, #16]
 8003b78:	4798      	blx	r3
  if (err != 0U)
 8003b7a:	e7cd      	b.n	8003b18 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	f7ff ff83 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003b82:	e7a0      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003b84:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	b123      	cbz	r3, 8003b96 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003b8c:	f10d 0106 	add.w	r1, sp, #6
 8003b90:	7c00      	ldrb	r0, [r0, #16]
 8003b92:	4798      	blx	r3
  if (err != 0U)
 8003b94:	e7c0      	b.n	8003b18 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003b96:	4621      	mov	r1, r4
 8003b98:	f7ff ff76 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003b9c:	e793      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003b9e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	b123      	cbz	r3, 8003bb0 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003ba6:	f10d 0106 	add.w	r1, sp, #6
 8003baa:	7c00      	ldrb	r0, [r0, #16]
 8003bac:	4798      	blx	r3
  if (err != 0U)
 8003bae:	e7b3      	b.n	8003b18 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	f7ff ff69 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003bb6:	e786      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003bb8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	b123      	cbz	r3, 8003bca <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003bc0:	f10d 0106 	add.w	r1, sp, #6
 8003bc4:	7c00      	ldrb	r0, [r0, #16]
 8003bc6:	4798      	blx	r3
  if (err != 0U)
 8003bc8:	e7a6      	b.n	8003b18 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003bca:	4621      	mov	r1, r4
 8003bcc:	f7ff ff5c 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003bd0:	e779      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003bd2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	b123      	cbz	r3, 8003be4 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003bda:	f10d 0106 	add.w	r1, sp, #6
 8003bde:	7c00      	ldrb	r0, [r0, #16]
 8003be0:	4798      	blx	r3
  if (err != 0U)
 8003be2:	e799      	b.n	8003b18 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003be4:	4621      	mov	r1, r4
 8003be6:	f7ff ff4f 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003bea:	e76c      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003bec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	b123      	cbz	r3, 8003bfe <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003bf4:	f10d 0106 	add.w	r1, sp, #6
 8003bf8:	7c00      	ldrb	r0, [r0, #16]
 8003bfa:	4798      	blx	r3
  if (err != 0U)
 8003bfc:	e78c      	b.n	8003b18 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003bfe:	4621      	mov	r1, r4
 8003c00:	f7ff ff42 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003c04:	e75f      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8003c06:	4621      	mov	r1, r4
 8003c08:	f7ff ff3e 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003c0c:	e75b      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c0e:	7c03      	ldrb	r3, [r0, #16]
 8003c10:	b933      	cbnz	r3, 8003c20 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003c12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	f10d 0006 	add.w	r0, sp, #6
 8003c1c:	4798      	blx	r3
  if (err != 0U)
 8003c1e:	e77b      	b.n	8003b18 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8003c20:	4621      	mov	r1, r4
 8003c22:	f7ff ff31 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003c26:	e74e      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c28:	7c03      	ldrb	r3, [r0, #16]
 8003c2a:	b943      	cbnz	r3, 8003c3e <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003c2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f10d 0006 	add.w	r0, sp, #6
 8003c36:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003c38:	2307      	movs	r3, #7
 8003c3a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003c3c:	e76c      	b.n	8003b18 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8003c3e:	4621      	mov	r1, r4
 8003c40:	f7ff ff22 	bl	8003a88 <USBD_CtlError>
  if (err != 0U)
 8003c44:	e73f      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8003c46:	4621      	mov	r1, r4
 8003c48:	f7ff ff1e 	bl	8003a88 <USBD_CtlError>
    return;
 8003c4c:	e73b      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	bf28      	it	cs
 8003c52:	461a      	movcs	r2, r3
 8003c54:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003c58:	4601      	mov	r1, r0
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 fa01 	bl	8004062 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003c60:	88e3      	ldrh	r3, [r4, #6]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f47f af2f 	bne.w	8003ac6 <USBD_StdDevReq+0x2a>
 8003c68:	e75f      	b.n	8003b2a <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003c6a:	888b      	ldrh	r3, [r1, #4]
 8003c6c:	b9eb      	cbnz	r3, 8003caa <USBD_StdDevReq+0x20e>
 8003c6e:	88cb      	ldrh	r3, [r1, #6]
 8003c70:	b9db      	cbnz	r3, 8003caa <USBD_StdDevReq+0x20e>
 8003c72:	884b      	ldrh	r3, [r1, #2]
 8003c74:	2b7f      	cmp	r3, #127	; 0x7f
 8003c76:	d818      	bhi.n	8003caa <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c78:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c7c:	2a03      	cmp	r2, #3
 8003c7e:	d00d      	beq.n	8003c9c <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003c80:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8003c82:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003c86:	4621      	mov	r1, r4
 8003c88:	f000 fc22 	bl	80044d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 fa14 	bl	80040ba <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003c92:	b134      	cbz	r4, 8003ca2 <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003c94:	2302      	movs	r3, #2
 8003c96:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8003c9a:	e714      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8003c9c:	f7ff fef4 	bl	8003a88 <USBD_CtlError>
 8003ca0:	e711      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8003ca8:	e70d      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8003caa:	4621      	mov	r1, r4
 8003cac:	4628      	mov	r0, r5
 8003cae:	f7ff feeb 	bl	8003a88 <USBD_CtlError>
 8003cb2:	e708      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8003cb4:	788b      	ldrb	r3, [r1, #2]
 8003cb6:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <USBD_StdDevReq+0x370>)
 8003cb8:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d80d      	bhi.n	8003cda <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 8003cbe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003cc2:	2a02      	cmp	r2, #2
 8003cc4:	d00c      	beq.n	8003ce0 <USBD_StdDevReq+0x244>
 8003cc6:	2a03      	cmp	r2, #3
 8003cc8:	d020      	beq.n	8003d0c <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8003cca:	f7ff fedd 	bl	8003a88 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003cce:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <USBD_StdDevReq+0x370>)
 8003cd0:	7819      	ldrb	r1, [r3, #0]
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f7ff fd99 	bl	800380a <USBD_ClrClassConfig>
        break;
 8003cd8:	e6f5      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8003cda:	f7ff fed5 	bl	8003a88 <USBD_CtlError>
 8003cde:	e6f2      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8003ce0:	b18b      	cbz	r3, 8003d06 <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003cec:	f7ff fd81 	bl	80037f2 <USBD_SetClassConfig>
 8003cf0:	2802      	cmp	r0, #2
 8003cf2:	d003      	beq.n	8003cfc <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f000 f9e0 	bl	80040ba <USBD_CtlSendStatus>
 8003cfa:	e6e4      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7ff fec2 	bl	8003a88 <USBD_CtlError>
            return;
 8003d04:	e6df      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8003d06:	f000 f9d8 	bl	80040ba <USBD_CtlSendStatus>
 8003d0a:	e6dc      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8003d0c:	b18b      	cbz	r3, 8003d32 <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8003d0e:	6841      	ldr	r1, [r0, #4]
 8003d10:	2901      	cmp	r1, #1
 8003d12:	d01e      	beq.n	8003d52 <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003d14:	b2c9      	uxtb	r1, r1
 8003d16:	f7ff fd78 	bl	800380a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003d1a:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <USBD_StdDevReq+0x370>)
 8003d1c:	7819      	ldrb	r1, [r3, #0]
 8003d1e:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003d20:	4628      	mov	r0, r5
 8003d22:	f7ff fd66 	bl	80037f2 <USBD_SetClassConfig>
 8003d26:	2802      	cmp	r0, #2
 8003d28:	d00e      	beq.n	8003d48 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f000 f9c5 	bl	80040ba <USBD_CtlSendStatus>
 8003d30:	e6c9      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003d32:	2302      	movs	r3, #2
 8003d34:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8003d38:	2100      	movs	r1, #0
 8003d3a:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003d3c:	f7ff fd65 	bl	800380a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003d40:	4628      	mov	r0, r5
 8003d42:	f000 f9ba 	bl	80040ba <USBD_CtlSendStatus>
 8003d46:	e6be      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7ff fe9c 	bl	8003a88 <USBD_CtlError>
            return;
 8003d50:	e6b9      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8003d52:	f000 f9b2 	bl	80040ba <USBD_CtlSendStatus>
 8003d56:	e6b6      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 8003d58:	88cb      	ldrh	r3, [r1, #6]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d109      	bne.n	8003d72 <USBD_StdDevReq+0x2d6>
    switch (pdev->dev_state)
 8003d5e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d808      	bhi.n	8003d78 <USBD_StdDevReq+0x2dc>
 8003d66:	b973      	cbnz	r3, 8003d86 <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f7ff fe8c 	bl	8003a88 <USBD_CtlError>
        break;
 8003d70:	e6a9      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8003d72:	f7ff fe89 	bl	8003a88 <USBD_CtlError>
 8003d76:	e6a6      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d1f5      	bne.n	8003d68 <USBD_StdDevReq+0x2cc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	1d01      	adds	r1, r0, #4
 8003d80:	f000 f96f 	bl	8004062 <USBD_CtlSendData>
        break;
 8003d84:	e69f      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8003d86:	4601      	mov	r1, r0
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f000 f967 	bl	8004062 <USBD_CtlSendData>
        break;
 8003d94:	e697      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8003d96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d813      	bhi.n	8003dc8 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 8003da0:	88cb      	ldrh	r3, [r1, #6]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d10d      	bne.n	8003dc2 <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003da6:	2301      	movs	r3, #1
 8003da8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003daa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003dae:	b10b      	cbz	r3, 8003db4 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003db0:	2303      	movs	r3, #3
 8003db2:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003db4:	2202      	movs	r2, #2
 8003db6:	f105 010c 	add.w	r1, r5, #12
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f951 	bl	8004062 <USBD_CtlSendData>
      break;
 8003dc0:	e681      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8003dc2:	f7ff fe61 	bl	8003a88 <USBD_CtlError>
        break;
 8003dc6:	e67e      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8003dc8:	f7ff fe5e 	bl	8003a88 <USBD_CtlError>
      break;
 8003dcc:	e67b      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003dce:	884b      	ldrh	r3, [r1, #2]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f47f ae78 	bne.w	8003ac6 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8003dd6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8003dda:	f000 f96e 	bl	80040ba <USBD_CtlSendStatus>
 8003dde:	e672      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8003de0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003de4:	3b01      	subs	r3, #1
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d809      	bhi.n	8003dfe <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003dea:	884b      	ldrh	r3, [r1, #2]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	f47f ae6a 	bne.w	8003ac6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8003df8:	f000 f95f 	bl	80040ba <USBD_CtlSendStatus>
 8003dfc:	e663      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8003dfe:	f7ff fe43 	bl	8003a88 <USBD_CtlError>
      break;
 8003e02:	e660      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8003e04:	f7ff fe40 	bl	8003a88 <USBD_CtlError>
          break;
 8003e08:	e65d      	b.n	8003ac6 <USBD_StdDevReq+0x2a>
 8003e0a:	bf00      	nop
 8003e0c:	200001dc 	.word	0x200001dc

08003e10 <USBD_StdItfReq>:
{
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4605      	mov	r5, r0
 8003e14:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e16:	780b      	ldrb	r3, [r1, #0]
 8003e18:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003e1c:	2a40      	cmp	r2, #64	; 0x40
 8003e1e:	d006      	beq.n	8003e2e <USBD_StdItfReq+0x1e>
 8003e20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e24:	d003      	beq.n	8003e2e <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8003e26:	f7ff fe2f 	bl	8003a88 <USBD_CtlError>
}
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8003e2e:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8003e32:	3b01      	subs	r3, #1
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d816      	bhi.n	8003e66 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003e38:	7923      	ldrb	r3, [r4, #4]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d80e      	bhi.n	8003e5c <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e3e:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4621      	mov	r1, r4
 8003e46:	4628      	mov	r0, r5
 8003e48:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003e4a:	88e3      	ldrh	r3, [r4, #6]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ec      	bne.n	8003e2a <USBD_StdItfReq+0x1a>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d1ea      	bne.n	8003e2a <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8003e54:	4628      	mov	r0, r5
 8003e56:	f000 f930 	bl	80040ba <USBD_CtlSendStatus>
 8003e5a:	e7e6      	b.n	8003e2a <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7ff fe12 	bl	8003a88 <USBD_CtlError>
 8003e64:	e7e1      	b.n	8003e2a <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f7ff fe0d 	bl	8003a88 <USBD_CtlError>
          break;
 8003e6e:	e7dc      	b.n	8003e2a <USBD_StdItfReq+0x1a>

08003e70 <USBD_StdEPReq>:
{
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e74:	780b      	ldrb	r3, [r1, #0]
 8003e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d005      	beq.n	8003e8a <USBD_StdEPReq+0x1a>
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d003      	beq.n	8003e8a <USBD_StdEPReq+0x1a>
 8003e82:	b14b      	cbz	r3, 8003e98 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8003e84:	f7ff fe00 	bl	8003a88 <USBD_CtlError>
      break;
 8003e88:	e004      	b.n	8003e94 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 8003e8a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4620      	mov	r0, r4
 8003e92:	4798      	blx	r3
}
 8003e94:	2000      	movs	r0, #0
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8003e98:	888a      	ldrh	r2, [r1, #4]
 8003e9a:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8003e9c:	784b      	ldrb	r3, [r1, #1]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d031      	beq.n	8003f06 <USBD_StdEPReq+0x96>
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d005      	beq.n	8003eb2 <USBD_StdEPReq+0x42>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d056      	beq.n	8003f58 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f7ff fdec 	bl	8003a88 <USBD_CtlError>
          break;
 8003eb0:	e7f0      	b.n	8003e94 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8003eb2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d005      	beq.n	8003ec6 <USBD_StdEPReq+0x56>
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d013      	beq.n	8003ee6 <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff fde2 	bl	8003a88 <USBD_CtlError>
              break;
 8003ec4:	e7e6      	b.n	8003e94 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ec6:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003eca:	d008      	beq.n	8003ede <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8003ecc:	4601      	mov	r1, r0
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 fad7 	bl	8004482 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f000 fad3 	bl	8004482 <USBD_LL_StallEP>
 8003edc:	e7da      	b.n	8003e94 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7ff fdd2 	bl	8003a88 <USBD_CtlError>
 8003ee4:	e7d6      	b.n	8003e94 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003ee6:	884b      	ldrh	r3, [r1, #2]
 8003ee8:	b923      	cbnz	r3, 8003ef4 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8003eea:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003eee:	d001      	beq.n	8003ef4 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003ef0:	88cb      	ldrh	r3, [r1, #6]
 8003ef2:	b11b      	cbz	r3, 8003efc <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f000 f8e0 	bl	80040ba <USBD_CtlSendStatus>
              break;
 8003efa:	e7cb      	b.n	8003e94 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003efc:	4601      	mov	r1, r0
 8003efe:	4620      	mov	r0, r4
 8003f00:	f000 fabf 	bl	8004482 <USBD_LL_StallEP>
 8003f04:	e7f6      	b.n	8003ef4 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 8003f06:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d005      	beq.n	8003f1a <USBD_StdEPReq+0xaa>
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d013      	beq.n	8003f3a <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff fdb8 	bl	8003a88 <USBD_CtlError>
              break;
 8003f18:	e7bc      	b.n	8003e94 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f1a:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003f1e:	d008      	beq.n	8003f32 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8003f20:	4601      	mov	r1, r0
 8003f22:	4620      	mov	r0, r4
 8003f24:	f000 faad 	bl	8004482 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 faa9 	bl	8004482 <USBD_LL_StallEP>
 8003f30:	e7b0      	b.n	8003e94 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff fda8 	bl	8003a88 <USBD_CtlError>
 8003f38:	e7ac      	b.n	8003e94 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003f3a:	884b      	ldrh	r3, [r1, #2]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1a9      	bne.n	8003e94 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003f40:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003f44:	d103      	bne.n	8003f4e <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 8003f46:	4620      	mov	r0, r4
 8003f48:	f000 f8b7 	bl	80040ba <USBD_CtlSendStatus>
 8003f4c:	e7a2      	b.n	8003e94 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003f4e:	4601      	mov	r1, r0
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 fa9e 	bl	8004492 <USBD_LL_ClearStallEP>
 8003f56:	e7f6      	b.n	8003f46 <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 8003f58:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d005      	beq.n	8003f6c <USBD_StdEPReq+0xfc>
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d018      	beq.n	8003f96 <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7ff fd8f 	bl	8003a88 <USBD_CtlError>
              break;
 8003f6a:	e793      	b.n	8003e94 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f6c:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003f70:	d003      	beq.n	8003f7a <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8003f72:	4620      	mov	r0, r4
 8003f74:	f7ff fd88 	bl	8003a88 <USBD_CtlError>
                break;
 8003f78:	e78c      	b.n	8003e94 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f7a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f7e:	bf14      	ite	ne
 8003f80:	f104 0114 	addne.w	r1, r4, #20
 8003f84:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f000 f867 	bl	8004062 <USBD_CtlSendData>
              break;
 8003f94:	e77e      	b.n	8003e94 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 8003f96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f9a:	d11b      	bne.n	8003fd4 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003f9c:	f000 030f 	and.w	r3, r0, #15
 8003fa0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fa8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003fac:	b333      	cbz	r3, 8003ffc <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003fae:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fb6:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8003fba:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003fbe:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003fc2:	d11f      	bne.n	8004004 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003fc8:	2202      	movs	r2, #2
 8003fca:	4629      	mov	r1, r5
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f000 f848 	bl	8004062 <USBD_CtlSendData>
              break;
 8003fd2:	e75f      	b.n	8003e94 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003fd4:	f000 030f 	and.w	r3, r0, #15
 8003fd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	b13b      	cbz	r3, 8003ff4 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fe4:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8003fe8:	3501      	adds	r5, #1
 8003fea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003fee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003ff2:	e7e4      	b.n	8003fbe <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff fd47 	bl	8003a88 <USBD_CtlError>
                  break;
 8003ffa:	e74b      	b.n	8003e94 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff fd43 	bl	8003a88 <USBD_CtlError>
                  break;
 8004002:	e747      	b.n	8003e94 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004004:	4601      	mov	r1, r0
 8004006:	4620      	mov	r0, r4
 8004008:	f000 fa4b 	bl	80044a2 <USBD_LL_IsStallEP>
 800400c:	b110      	cbz	r0, 8004014 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 800400e:	2301      	movs	r3, #1
 8004010:	602b      	str	r3, [r5, #0]
 8004012:	e7d9      	b.n	8003fc8 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 8004014:	2300      	movs	r3, #0
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	e7d6      	b.n	8003fc8 <USBD_StdEPReq+0x158>

0800401a <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800401a:	b308      	cbz	r0, 8004060 <USBD_GetString+0x46>
{
 800401c:	b470      	push	{r4, r5, r6}
 800401e:	4604      	mov	r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004020:	7803      	ldrb	r3, [r0, #0]
 8004022:	b13b      	cbz	r3, 8004034 <USBD_GetString+0x1a>
 8004024:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 8004028:	1983      	adds	r3, r0, r6
 800402a:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 800402c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004030:	2d00      	cmp	r5, #0
 8004032:	d1f9      	bne.n	8004028 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004034:	3301      	adds	r3, #1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800403a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800403c:	2303      	movs	r3, #3
 800403e:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8004040:	7820      	ldrb	r0, [r4, #0]
 8004042:	b158      	cbz	r0, 800405c <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004044:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8004046:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 800404e:	3302      	adds	r3, #2
 8004050:	b2db      	uxtb	r3, r3
 8004052:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8004054:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004058:	2800      	cmp	r0, #0
 800405a:	d1f5      	bne.n	8004048 <USBD_GetString+0x2e>
}
 800405c:	bc70      	pop	{r4, r5, r6}
 800405e:	4770      	bx	lr
 8004060:	4770      	bx	lr

08004062 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004062:	b510      	push	{r4, lr}
 8004064:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004066:	2202      	movs	r2, #2
 8004068:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800406c:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800406e:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004070:	460a      	mov	r2, r1
 8004072:	2100      	movs	r1, #0
 8004074:	f000 fa34 	bl	80044e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004078:	2000      	movs	r0, #0
 800407a:	bd10      	pop	{r4, pc}

0800407c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800407c:	b508      	push	{r3, lr}
 800407e:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004080:	460a      	mov	r2, r1
 8004082:	2100      	movs	r1, #0
 8004084:	f000 fa2c 	bl	80044e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004088:	2000      	movs	r0, #0
 800408a:	bd08      	pop	{r3, pc}

0800408c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800408c:	b510      	push	{r4, lr}
 800408e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004090:	2203      	movs	r2, #3
 8004092:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004096:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800409a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800409e:	460a      	mov	r2, r1
 80040a0:	2100      	movs	r1, #0
 80040a2:	f000 fa25 	bl	80044f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040a6:	2000      	movs	r0, #0
 80040a8:	bd10      	pop	{r4, pc}

080040aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80040aa:	b508      	push	{r3, lr}
 80040ac:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80040ae:	460a      	mov	r2, r1
 80040b0:	2100      	movs	r1, #0
 80040b2:	f000 fa1d 	bl	80044f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040b6:	2000      	movs	r0, #0
 80040b8:	bd08      	pop	{r3, pc}

080040ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80040ba:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80040bc:	2304      	movs	r3, #4
 80040be:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80040c2:	2300      	movs	r3, #0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	f000 fa0a 	bl	80044e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80040cc:	2000      	movs	r0, #0
 80040ce:	bd08      	pop	{r3, pc}

080040d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80040d0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80040d2:	2305      	movs	r3, #5
 80040d4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80040d8:	2300      	movs	r3, #0
 80040da:	461a      	mov	r2, r3
 80040dc:	4619      	mov	r1, r3
 80040de:	f000 fa07 	bl	80044f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80040e2:	2000      	movs	r0, #0
 80040e4:	bd08      	pop	{r3, pc}
	...

080040e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80040e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80040ea:	2200      	movs	r2, #0
 80040ec:	490f      	ldr	r1, [pc, #60]	; (800412c <MX_USB_DEVICE_Init+0x44>)
 80040ee:	4810      	ldr	r0, [pc, #64]	; (8004130 <MX_USB_DEVICE_Init+0x48>)
 80040f0:	f7ff fb5c 	bl	80037ac <USBD_Init>
 80040f4:	b970      	cbnz	r0, 8004114 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80040f6:	490f      	ldr	r1, [pc, #60]	; (8004134 <MX_USB_DEVICE_Init+0x4c>)
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <MX_USB_DEVICE_Init+0x48>)
 80040fa:	f7ff fb6e 	bl	80037da <USBD_RegisterClass>
 80040fe:	b960      	cbnz	r0, 800411a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004100:	490d      	ldr	r1, [pc, #52]	; (8004138 <MX_USB_DEVICE_Init+0x50>)
 8004102:	480b      	ldr	r0, [pc, #44]	; (8004130 <MX_USB_DEVICE_Init+0x48>)
 8004104:	f7ff fb0a 	bl	800371c <USBD_CDC_RegisterInterface>
 8004108:	b950      	cbnz	r0, 8004120 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800410a:	4809      	ldr	r0, [pc, #36]	; (8004130 <MX_USB_DEVICE_Init+0x48>)
 800410c:	f7ff fb6c 	bl	80037e8 <USBD_Start>
 8004110:	b948      	cbnz	r0, 8004126 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004112:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004114:	f7fc f928 	bl	8000368 <Error_Handler>
 8004118:	e7ed      	b.n	80040f6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800411a:	f7fc f925 	bl	8000368 <Error_Handler>
 800411e:	e7ef      	b.n	8004100 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004120:	f7fc f922 	bl	8000368 <Error_Handler>
 8004124:	e7f1      	b.n	800410a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004126:	f7fc f91f 	bl	8000368 <Error_Handler>
}
 800412a:	e7f2      	b.n	8004112 <MX_USB_DEVICE_Init+0x2a>
 800412c:	2000012c 	.word	0x2000012c
 8004130:	20000fe4 	.word	0x20000fe4
 8004134:	2000000c 	.word	0x2000000c
 8004138:	2000011c 	.word	0x2000011c

0800413c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800413c:	2000      	movs	r0, #0
 800413e:	4770      	bx	lr

08004140 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004140:	2000      	movs	r0, #0
 8004142:	4770      	bx	lr

08004144 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	4604      	mov	r4, r0
 800414a:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800414c:	4d10      	ldr	r5, [pc, #64]	; (8004190 <CDC_Receive_FS+0x4c>)
 800414e:	4601      	mov	r1, r0
 8004150:	4628      	mov	r0, r5
 8004152:	f7ff faf2 	bl	800373a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004156:	4628      	mov	r0, r5
 8004158:	f7ff fb0f 	bl	800377a <USBD_CDC_ReceivePacket>

  dataInBuffer = 0;
 800415c:	4f0d      	ldr	r7, [pc, #52]	; (8004194 <CDC_Receive_FS+0x50>)
 800415e:	2500      	movs	r5, #0
 8004160:	603d      	str	r5, [r7, #0]
  memset (buffer, '\0', 1024);  // clear the buffer
 8004162:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8004198 <CDC_Receive_FS+0x54>
 8004166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800416a:	4629      	mov	r1, r5
 800416c:	4640      	mov	r0, r8
 800416e:	f000 fa05 	bl	800457c <memset>
  uint8_t len = (uint8_t)*Len;
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8004172:	7836      	ldrb	r6, [r6, #0]
 8004174:	4632      	mov	r2, r6
 8004176:	4621      	mov	r1, r4
 8004178:	4640      	mov	r0, r8
 800417a:	f000 f9f1 	bl	8004560 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800417e:	4632      	mov	r2, r6
 8004180:	4629      	mov	r1, r5
 8004182:	4620      	mov	r0, r4
 8004184:	f000 f9fa 	bl	800457c <memset>
  dataInBuffer = len;
 8004188:	603e      	str	r6, [r7, #0]

  return (USBD_OK);
  /* USER CODE END 6 */
}
 800418a:	4628      	mov	r0, r5
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004190:	20000fe4 	.word	0x20000fe4
 8004194:	200001d8 	.word	0x200001d8
 8004198:	20000198 	.word	0x20000198

0800419c <CDC_Init_FS>:
{
 800419c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800419e:	4c06      	ldr	r4, [pc, #24]	; (80041b8 <CDC_Init_FS+0x1c>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	4906      	ldr	r1, [pc, #24]	; (80041bc <CDC_Init_FS+0x20>)
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff fac0 	bl	800372a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80041aa:	4905      	ldr	r1, [pc, #20]	; (80041c0 <CDC_Init_FS+0x24>)
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7ff fac4 	bl	800373a <USBD_CDC_SetRxBuffer>
}
 80041b2:	2000      	movs	r0, #0
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	20000fe4 	.word	0x20000fe4
 80041bc:	20001690 	.word	0x20001690
 80041c0:	200012a8 	.word	0x200012a8

080041c4 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <CDC_Transmit_FS+0x28>)
 80041c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80041ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041ce:	b10b      	cbz	r3, 80041d4 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80041d0:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80041d2:	4770      	bx	lr
{
 80041d4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80041d6:	4c05      	ldr	r4, [pc, #20]	; (80041ec <CDC_Transmit_FS+0x28>)
 80041d8:	460a      	mov	r2, r1
 80041da:	4601      	mov	r1, r0
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff faa4 	bl	800372a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7ff faaf 	bl	8003746 <USBD_CDC_TransmitPacket>
}
 80041e8:	bd10      	pop	{r4, pc}
 80041ea:	bf00      	nop
 80041ec:	20000fe4 	.word	0x20000fe4

080041f0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80041f0:	2312      	movs	r3, #18
 80041f2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80041f4:	4800      	ldr	r0, [pc, #0]	; (80041f8 <USBD_FS_DeviceDescriptor+0x8>)
 80041f6:	4770      	bx	lr
 80041f8:	20000148 	.word	0x20000148

080041fc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80041fc:	2304      	movs	r3, #4
 80041fe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004200:	4800      	ldr	r0, [pc, #0]	; (8004204 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004202:	4770      	bx	lr
 8004204:	2000015c 	.word	0x2000015c

08004208 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004208:	b1aa      	cbz	r2, 8004236 <IntToUnicode+0x2e>
{
 800420a:	b470      	push	{r4, r5, r6}
 800420c:	4614      	mov	r4, r2
  for (idx = 0; idx < len; idx++)
 800420e:	2300      	movs	r3, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004210:	1c4e      	adds	r6, r1, #1
 8004212:	461d      	mov	r5, r3
    if (((value >> 28)) < 0xA)
 8004214:	0f02      	lsrs	r2, r0, #28
 8004216:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800421a:	bf34      	ite	cc
 800421c:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800421e:	3237      	addcs	r2, #55	; 0x37
 8004220:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
    value = value << 4;
 8004224:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004226:	f806 5013 	strb.w	r5, [r6, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800422a:	3301      	adds	r3, #1
 800422c:	b2da      	uxtb	r2, r3
 800422e:	42a2      	cmp	r2, r4
 8004230:	d3f0      	bcc.n	8004214 <IntToUnicode+0xc>
  }
}
 8004232:	bc70      	pop	{r4, r5, r6}
 8004234:	4770      	bx	lr
 8004236:	4770      	bx	lr

08004238 <USBD_FS_SerialStrDescriptor>:
{
 8004238:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800423a:	231a      	movs	r3, #26
 800423c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <USBD_FS_SerialStrDescriptor+0x34>)
 8004240:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004242:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8004244:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004246:	18c0      	adds	r0, r0, r3
 8004248:	d101      	bne.n	800424e <USBD_FS_SerialStrDescriptor+0x16>
}
 800424a:	4809      	ldr	r0, [pc, #36]	; (8004270 <USBD_FS_SerialStrDescriptor+0x38>)
 800424c:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004250:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004252:	4c07      	ldr	r4, [pc, #28]	; (8004270 <USBD_FS_SerialStrDescriptor+0x38>)
 8004254:	2208      	movs	r2, #8
 8004256:	1ca1      	adds	r1, r4, #2
 8004258:	f7ff ffd6 	bl	8004208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800425c:	2204      	movs	r2, #4
 800425e:	f104 0112 	add.w	r1, r4, #18
 8004262:	4628      	mov	r0, r5
 8004264:	f7ff ffd0 	bl	8004208 <IntToUnicode>
 8004268:	e7ef      	b.n	800424a <USBD_FS_SerialStrDescriptor+0x12>
 800426a:	bf00      	nop
 800426c:	1ffff7e8 	.word	0x1ffff7e8
 8004270:	20000160 	.word	0x20000160
 8004274:	1ffff7ec 	.word	0x1ffff7ec

08004278 <USBD_FS_ProductStrDescriptor>:
{
 8004278:	b508      	push	{r3, lr}
 800427a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800427c:	4902      	ldr	r1, [pc, #8]	; (8004288 <USBD_FS_ProductStrDescriptor+0x10>)
 800427e:	4803      	ldr	r0, [pc, #12]	; (800428c <USBD_FS_ProductStrDescriptor+0x14>)
 8004280:	f7ff fecb 	bl	800401a <USBD_GetString>
}
 8004284:	4800      	ldr	r0, [pc, #0]	; (8004288 <USBD_FS_ProductStrDescriptor+0x10>)
 8004286:	bd08      	pop	{r3, pc}
 8004288:	20001a78 	.word	0x20001a78
 800428c:	080045d0 	.word	0x080045d0

08004290 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004290:	b510      	push	{r4, lr}
 8004292:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004294:	4c03      	ldr	r4, [pc, #12]	; (80042a4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004296:	4621      	mov	r1, r4
 8004298:	4803      	ldr	r0, [pc, #12]	; (80042a8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800429a:	f7ff febe 	bl	800401a <USBD_GetString>
}
 800429e:	4620      	mov	r0, r4
 80042a0:	bd10      	pop	{r4, pc}
 80042a2:	bf00      	nop
 80042a4:	20001a78 	.word	0x20001a78
 80042a8:	080045e8 	.word	0x080045e8

080042ac <USBD_FS_ConfigStrDescriptor>:
{
 80042ac:	b508      	push	{r3, lr}
 80042ae:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80042b0:	4902      	ldr	r1, [pc, #8]	; (80042bc <USBD_FS_ConfigStrDescriptor+0x10>)
 80042b2:	4803      	ldr	r0, [pc, #12]	; (80042c0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80042b4:	f7ff feb1 	bl	800401a <USBD_GetString>
}
 80042b8:	4800      	ldr	r0, [pc, #0]	; (80042bc <USBD_FS_ConfigStrDescriptor+0x10>)
 80042ba:	bd08      	pop	{r3, pc}
 80042bc:	20001a78 	.word	0x20001a78
 80042c0:	080045fc 	.word	0x080045fc

080042c4 <USBD_FS_InterfaceStrDescriptor>:
{
 80042c4:	b508      	push	{r3, lr}
 80042c6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80042c8:	4902      	ldr	r1, [pc, #8]	; (80042d4 <USBD_FS_InterfaceStrDescriptor+0x10>)
 80042ca:	4803      	ldr	r0, [pc, #12]	; (80042d8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80042cc:	f7ff fea5 	bl	800401a <USBD_GetString>
}
 80042d0:	4800      	ldr	r0, [pc, #0]	; (80042d4 <USBD_FS_InterfaceStrDescriptor+0x10>)
 80042d2:	bd08      	pop	{r3, pc}
 80042d4:	20001a78 	.word	0x20001a78
 80042d8:	08004608 	.word	0x08004608

080042dc <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80042dc:	b120      	cbz	r0, 80042e8 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80042de:	2802      	cmp	r0, #2
 80042e0:	bf14      	ite	ne
 80042e2:	2002      	movne	r0, #2
 80042e4:	2001      	moveq	r0, #1
 80042e6:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 80042ec:	6802      	ldr	r2, [r0, #0]
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_PCD_MspInit+0x3c>)
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d000      	beq.n	80042f6 <HAL_PCD_MspInit+0xa>
 80042f4:	4770      	bx	lr
{
 80042f6:	b500      	push	{lr}
 80042f8:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80042fa:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004304:	61da      	str	r2, [r3, #28]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004310:	2200      	movs	r2, #0
 8004312:	4611      	mov	r1, r2
 8004314:	2014      	movs	r0, #20
 8004316:	f7fc f9af 	bl	8000678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800431a:	2014      	movs	r0, #20
 800431c:	f7fc f9de 	bl	80006dc <HAL_NVIC_EnableIRQ>
}
 8004320:	b003      	add	sp, #12
 8004322:	f85d fb04 	ldr.w	pc, [sp], #4
 8004326:	bf00      	nop
 8004328:	40005c00 	.word	0x40005c00

0800432c <HAL_PCD_SetupStageCallback>:
{
 800432c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800432e:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004332:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004336:	f7ff fa6f 	bl	8003818 <USBD_LL_SetupStage>
}
 800433a:	bd08      	pop	{r3, pc}

0800433c <HAL_PCD_DataOutStageCallback>:
{
 800433c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800433e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004342:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004346:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800434a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800434e:	f7ff fa90 	bl	8003872 <USBD_LL_DataOutStage>
}
 8004352:	bd08      	pop	{r3, pc}

08004354 <HAL_PCD_DataInStageCallback>:
{
 8004354:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004356:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800435a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800435e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004360:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004364:	f7ff fac9 	bl	80038fa <USBD_LL_DataInStage>
}
 8004368:	bd08      	pop	{r3, pc}

0800436a <HAL_PCD_SOFCallback>:
{
 800436a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800436c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004370:	f7ff fb68 	bl	8003a44 <USBD_LL_SOF>
}
 8004374:	bd08      	pop	{r3, pc}

08004376 <HAL_PCD_ResetCallback>:
{ 
 8004376:	b510      	push	{r4, lr}
 8004378:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800437a:	6883      	ldr	r3, [r0, #8]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d109      	bne.n	8004394 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004380:	2101      	movs	r1, #1
 8004382:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004386:	f7ff fb47 	bl	8003a18 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800438a:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800438e:	f7ff fb1b 	bl	80039c8 <USBD_LL_Reset>
}
 8004392:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004394:	f7fb ffe8 	bl	8000368 <Error_Handler>
 8004398:	e7f2      	b.n	8004380 <HAL_PCD_ResetCallback+0xa>
	...

0800439c <HAL_PCD_SuspendCallback>:
{
 800439c:	b510      	push	{r4, lr}
 800439e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80043a0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80043a4:	f7ff fb3b 	bl	8003a1e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80043a8:	69a3      	ldr	r3, [r4, #24]
 80043aa:	b123      	cbz	r3, 80043b6 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80043ac:	4a02      	ldr	r2, [pc, #8]	; (80043b8 <HAL_PCD_SuspendCallback+0x1c>)
 80043ae:	6913      	ldr	r3, [r2, #16]
 80043b0:	f043 0306 	orr.w	r3, r3, #6
 80043b4:	6113      	str	r3, [r2, #16]
}
 80043b6:	bd10      	pop	{r4, pc}
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <HAL_PCD_ResumeCallback>:
{
 80043bc:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80043be:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80043c2:	f7ff fb35 	bl	8003a30 <USBD_LL_Resume>
}
 80043c6:	bd08      	pop	{r3, pc}

080043c8 <USBD_LL_Init>:
{
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80043cc:	481d      	ldr	r0, [pc, #116]	; (8004444 <USBD_LL_Init+0x7c>)
 80043ce:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80043d2:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <USBD_LL_Init+0x80>)
 80043d8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80043da:	2308      	movs	r3, #8
 80043dc:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80043de:	2302      	movs	r3, #2
 80043e0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80043e6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80043e8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80043ea:	f7fc fb87 	bl	8000afc <HAL_PCD_Init>
 80043ee:	bb30      	cbnz	r0, 800443e <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80043f0:	2318      	movs	r3, #24
 80043f2:	2200      	movs	r2, #0
 80043f4:	4611      	mov	r1, r2
 80043f6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80043fa:	f7fd facd 	bl	8001998 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80043fe:	2358      	movs	r3, #88	; 0x58
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004408:	f7fd fac6 	bl	8001998 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800440c:	23c0      	movs	r3, #192	; 0xc0
 800440e:	2200      	movs	r2, #0
 8004410:	2181      	movs	r1, #129	; 0x81
 8004412:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004416:	f7fd fabf 	bl	8001998 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800441a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800441e:	2200      	movs	r2, #0
 8004420:	2101      	movs	r1, #1
 8004422:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004426:	f7fd fab7 	bl	8001998 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800442a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800442e:	2200      	movs	r2, #0
 8004430:	2182      	movs	r1, #130	; 0x82
 8004432:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004436:	f7fd faaf 	bl	8001998 <HAL_PCDEx_PMAConfig>
}
 800443a:	2000      	movs	r0, #0
 800443c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800443e:	f7fb ff93 	bl	8000368 <Error_Handler>
 8004442:	e7d5      	b.n	80043f0 <USBD_LL_Init+0x28>
 8004444:	20001c78 	.word	0x20001c78
 8004448:	40005c00 	.word	0x40005c00

0800444c <USBD_LL_Start>:
{
 800444c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800444e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004452:	f7fc fbd4 	bl	8000bfe <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004456:	f7ff ff41 	bl	80042dc <USBD_Get_USB_Status>
}
 800445a:	bd08      	pop	{r3, pc}

0800445c <USBD_LL_OpenEP>:
{
 800445c:	b510      	push	{r4, lr}
 800445e:	4614      	mov	r4, r2
 8004460:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004462:	4623      	mov	r3, r4
 8004464:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004468:	f7fd f972 	bl	8001750 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800446c:	f7ff ff36 	bl	80042dc <USBD_Get_USB_Status>
}
 8004470:	bd10      	pop	{r4, pc}

08004472 <USBD_LL_CloseEP>:
{
 8004472:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004474:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004478:	f7fd f9a2 	bl	80017c0 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800447c:	f7ff ff2e 	bl	80042dc <USBD_Get_USB_Status>
}
 8004480:	bd08      	pop	{r3, pc}

08004482 <USBD_LL_StallEP>:
{
 8004482:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004484:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004488:	f7fd fa0f 	bl	80018aa <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800448c:	f7ff ff26 	bl	80042dc <USBD_Get_USB_Status>
}
 8004490:	bd08      	pop	{r3, pc}

08004492 <USBD_LL_ClearStallEP>:
{
 8004492:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004494:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004498:	f7fd fa43 	bl	8001922 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800449c:	f7ff ff1e 	bl	80042dc <USBD_Get_USB_Status>
}
 80044a0:	bd08      	pop	{r3, pc}

080044a2 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80044a2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80044a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044aa:	d108      	bne.n	80044be <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80044ac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80044b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80044b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80044b8:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80044bc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80044be:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80044c2:	3101      	adds	r1, #1
 80044c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80044c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80044cc:	7888      	ldrb	r0, [r1, #2]
 80044ce:	4770      	bx	lr

080044d0 <USBD_LL_SetUSBAddress>:
{
 80044d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80044d2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80044d6:	f7fc fbab 	bl	8000c30 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80044da:	f7ff feff 	bl	80042dc <USBD_Get_USB_Status>
}
 80044de:	bd08      	pop	{r3, pc}

080044e0 <USBD_LL_Transmit>:
{
 80044e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80044e2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80044e6:	f7fd f9c3 	bl	8001870 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80044ea:	f7ff fef7 	bl	80042dc <USBD_Get_USB_Status>
}
 80044ee:	bd08      	pop	{r3, pc}

080044f0 <USBD_LL_PrepareReceive>:
{
 80044f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80044f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80044f6:	f7fd f995 	bl	8001824 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80044fa:	f7ff feef 	bl	80042dc <USBD_Get_USB_Status>
}
 80044fe:	bd08      	pop	{r3, pc}

08004500 <USBD_LL_GetRxDataSize>:
{
 8004500:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004502:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004506:	f7fd f9aa 	bl	800185e <HAL_PCD_EP_GetRxCount>
}
 800450a:	bd08      	pop	{r3, pc}

0800450c <USBD_static_malloc>:
}
 800450c:	4800      	ldr	r0, [pc, #0]	; (8004510 <USBD_static_malloc+0x4>)
 800450e:	4770      	bx	lr
 8004510:	200001e0 	.word	0x200001e0

08004514 <USBD_static_free>:
}
 8004514:	4770      	bx	lr

08004516 <HAL_PCDEx_SetConnectionState>:
}
 8004516:	4770      	bx	lr

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	2600      	movs	r6, #0
 800451c:	4d0c      	ldr	r5, [pc, #48]	; (8004550 <__libc_init_array+0x38>)
 800451e:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <__libc_init_array+0x3c>)
 8004520:	1b64      	subs	r4, r4, r5
 8004522:	10a4      	asrs	r4, r4, #2
 8004524:	42a6      	cmp	r6, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	f000 f830 	bl	800458c <_init>
 800452c:	2600      	movs	r6, #0
 800452e:	4d0a      	ldr	r5, [pc, #40]	; (8004558 <__libc_init_array+0x40>)
 8004530:	4c0a      	ldr	r4, [pc, #40]	; (800455c <__libc_init_array+0x44>)
 8004532:	1b64      	subs	r4, r4, r5
 8004534:	10a4      	asrs	r4, r4, #2
 8004536:	42a6      	cmp	r6, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004540:	4798      	blx	r3
 8004542:	3601      	adds	r6, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f855 3b04 	ldr.w	r3, [r5], #4
 800454a:	4798      	blx	r3
 800454c:	3601      	adds	r6, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08004618 	.word	0x08004618
 8004554:	08004618 	.word	0x08004618
 8004558:	08004618 	.word	0x08004618
 800455c:	0800461c 	.word	0x0800461c

08004560 <memcpy>:
 8004560:	440a      	add	r2, r1
 8004562:	4291      	cmp	r1, r2
 8004564:	f100 33ff 	add.w	r3, r0, #4294967295
 8004568:	d100      	bne.n	800456c <memcpy+0xc>
 800456a:	4770      	bx	lr
 800456c:	b510      	push	{r4, lr}
 800456e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004572:	4291      	cmp	r1, r2
 8004574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004578:	d1f9      	bne.n	800456e <memcpy+0xe>
 800457a:	bd10      	pop	{r4, pc}

0800457c <memset>:
 800457c:	4603      	mov	r3, r0
 800457e:	4402      	add	r2, r0
 8004580:	4293      	cmp	r3, r2
 8004582:	d100      	bne.n	8004586 <memset+0xa>
 8004584:	4770      	bx	lr
 8004586:	f803 1b01 	strb.w	r1, [r3], #1
 800458a:	e7f9      	b.n	8004580 <memset+0x4>

0800458c <_init>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr

08004598 <_fini>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr
